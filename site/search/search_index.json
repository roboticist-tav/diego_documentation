{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Diego What is Diego? Diego is a popular instruction programming language for use, predomenatly, for robots and things (IoT). It was created by Tavis Pitt, in 2019, to provide a stable and common commuincation between humans, robots, and things, It is used for: robot communication, thing (of the Internet of Things) (IoT) communication, controlling robots, controlling things What can Diego do? Why Diego? Diego has a structured syntax with mostly English language words. Good to know Hello World The atypical 'hello world' example can easily be performed on a console as: with_me()_msg(Hello, World!); sensor type definition {accelero} _type(accelero) Accelerometer A tool that measures proper acceleration. {amblight} _type(amblight) Ambient Light Sensor A type of photoelectric sensor that is used to sense the amount of ambient light present, and appropriately dim. See modules oplight . {amp} _type(amp) Amplifier An electronic component for increasing the amplitude of electrical signals, used chiefly in sound reproduction. .. mermaid:: sequenceDiagram participant Alice participant Bob Alice->John: Hello John, how are you? loop Healthcheck John->John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John-->Alice: Great! John->Bob: How about you? Bob-->John: Jolly good! Thingy Sub-Types","title":"Diego"},{"location":"#diego","text":"","title":"Diego"},{"location":"#what-is-diego","text":"Diego is a popular instruction programming language for use, predomenatly, for robots and things (IoT). It was created by Tavis Pitt, in 2019, to provide a stable and common commuincation between humans, robots, and things, It is used for: robot communication, thing (of the Internet of Things) (IoT) communication, controlling robots, controlling things","title":"What is Diego?"},{"location":"#what-can-diego-do","text":"","title":"What can Diego do?"},{"location":"#why-diego","text":"Diego has a structured syntax with mostly English language words.","title":"Why Diego?"},{"location":"#good-to-know","text":"","title":"Good to know"},{"location":"#hello-world","text":"The atypical 'hello world' example can easily be performed on a console as: with_me()_msg(Hello, World!); sensor type definition {accelero} _type(accelero) Accelerometer A tool that measures proper acceleration. {amblight} _type(amblight) Ambient Light Sensor A type of photoelectric sensor that is used to sense the amount of ambient light present, and appropriately dim. See modules oplight . {amp} _type(amp) Amplifier An electronic component for increasing the amplitude of electrical signals, used chiefly in sound reproduction. .. mermaid:: sequenceDiagram participant Alice participant Bob Alice->John: Hello John, how are you? loop Healthcheck John->John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John-->Alice: Great! John->Bob: How about you? Bob-->John: Jolly good! Thingy Sub-Types","title":"Hello World"},{"location":"Commands/","text":"Tutorial Requirements The problem we are going resolve in this tutorial involves six large-scale logistical robots (' mule ' type robots), three factories, one showroom, and, one fuel station, all in the physical human world. The requirement is to instruct the six robots to work as a swarm (team based, not form based) and perpetually keep the supply chain between each factory and the showroom, 24 hours/7 days per week. The sole developer and human interaction with the swarm of robots, to begin with, is Bob. Variables First we are going to set the global variables for displaying the map for Bob. The map-type is the physical world (i.e. Earth) so the map_type should be set to global and not local . This means we will be using lat., long., alt. coordinates for all our position. The coordinate system is already defaulted to decimal_degrees , so we will not bother to set this global variable (usually referred as just ' global '). The map_centre and map_zoom defaults are set up. The location in the world we are working with is north of Brisbane, Queensland, Australia. Globals globals: map_type: global map_centre: -27.30948, 152.98256, 18.00000 map_zoom: 12 Capables The ' capables ' are also global variables but developer specific rather the Diego Engine specific like the ' globals '. They are placed in the diego file so the data can be changed at design or run-time by bob using set_capable( capable moniker ) command. capables: - moniker: ready for loading data: /usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav We have only one ' capable ' which points to a '.wav' file used for playing a sound. We will see this ' capable ' used later in this tutorial. Humans There is only one human involved in the ' diego ', monikered as ' bob '. Bob is the only human interaction and communication for the robots. Human interaction in the real physical world is required, such as refueling, loading and unloading payloads, other road users etc., however these humans need not be declared in the ' diego ', Only the moniker of the human is need for this tutorial, however, we have given Bob a robo- rank of o4 ( robotenant ). Bob's robo- rank is not required for this tutorial but added for demonstration purposes. humans: - moniker: bob rank: o4 Robots There are six robots, monikered after the first six letters of the Arabic alphabet. Each robot has different payload capacities and fuel consumption. The payload_weight_capacity is the weight limit for each robots payload in Kg. The fuel_consumption is the consumption of diesel fuel consumed in L/100Km. robots: - moniker: alif payload_weight_capacity: 6100 fuel_consumption: 12.5 - moniker: ba payload_weight_capacity: 7200 fuel_consumption: 12.1 - moinker: ta payload_weight_capacity: 7000 fuel_consumption: 11.8 - moniker: tha payload_weight_capacity: 8845 fuel_consuption: 13.8 - moniker: jim payload_weight_capacity: 8300 fuel_consuption: 12.5 - moniker: ha payload_weight_capacity: 6900 fuel_consuption: 12.4 All measurements use the metric system by default, but this can be changed at design-time using the measure_system global; adding set_measures in the diego code; or, in run-time using the set_measures( measure_type ) call. Points The pre-defined points on the map will be the factories, the showroom and the fuel station. Since we are using the global map_type loc will be used (instead of pos ) to provide the specific location on the points. The z-alt value ( altitude ) has been kept at 18m, roughly the correct elevation of these points on Earth. Since all the robots in this tutorial are ground based robots the altitude (used as elevation) is of no concern for this tutorial. points: - moniker: factory 1 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 1 bay 1 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 1 bay 2 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 1 bay 3 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 2 loc: -27.32559, 152.99008, 18.00000 - moniker: factory 3 loc: -27.28723, 152.98965, 18.00000 - moniker: showroom loc: -27.30597, 152.99015, 18.00000 - moniker: fuel station loc: -27.32642, 152.97474, 18.00000 ```` ### Routes A *diego* can have no routes defined at start up and routes can be calculated; requested from map providers; shared; broadcast etc. between robots and humans in run-time, however, it is recommended for humans to provide all the possible variables needed by the robot(s) before the *diego* runs on each robot. There are four routes defined, at the moment we will just moniker them, with self-explanatory monikers. We will use a map provider to give us the route from any point to the fuel station. ```yaml routes: - moniker: factory 1 to factory 2 - moniker: factory 2 to factory 3 - moniker: factory 3 to showroom - moniker: showroom to factory 1 > Next Step: Instructions Instructions All diego instructions must start with the go_diego command. We will add the north brisbane supply chain management diego_moniker . All monikers can be in any case, however, to avoid link bugs in the code, it is recommended to use all lowercase, and never use the characters , ( ) ? : . White-space can be used for monikers, but white-space is never used when entering types. go_diego(north brisbane supply chain management); We start the ' diego ' with all six robots unpacked and lined up on the car park of factory 1 . We switch each robot on and then we must decide who goes first. We can leave the robots to do this, however, just for the initial (once-only) ' out of the box allocation ' Bob will decide from the outside physical world. start_instruct(out of the box allocation)_asvirgin(); begin_instruct(out of the box allocation); listen_point(factory 1) ? start_instruct(load at factory 1); keep_listening(); end_instruct(out of the box allocation); The start_instruct(out of the box allocation)_asvirgin() command can be placed in this location (below go_diego ), however, it is common practice to place the first start_instruct command at the bottom of the program. It is really up to the developers preference. The _asvirgin() parameter-less sub command tells the robot to execute the instruct once-only (even if the robot is switched off). 1 We create a simple instruct using begin_instruct(out of the box allocation) . The instruct only creates a point listener on factory 1 point moniker, using listen_point(factory 1) command. The listen_point command has a hey_diego command, but no oh_diego command. The keep_listening() command will keep each robot waiting for a point call , and prevent the end_instruct command from executing and finishing the ' out of the box allocation ' instruct prematurely. Meanwhile, in the real physical world, Bob has a tablet computer connected to the swarm network and through his GUI calls each robot by name using the call_point command, first for alif robot... call_point(factory 1)_for(alif) ... and then for the other robots... If at this point Bob had sent call_point(factory 1) with no _for sub command, all the robots would execute the ' out of the box allocation ' instruct at the same time. This would not cause a problem as each robot has good manners and will and give way to each other, or at least inform the human(s) (that's bob ) of their predicament. When Bob sends the calll_point to alif , alif , the robot, will pick this up at command listen_point(factory 1) and its hey_diego event will be triggered. Then the program cursor will execute start_instruct(load at factory 1) . This will break in the ' out of the box allocation ' instruct to go on to the ' load at factory 1 ' instruct , marking the instruct s end, which would call the hey_diego event of end_instruct(load at factory 1) (if there was one). \\< Previous Step: Diego Declarations > Next Step: Load at Factory One begin_instruct(load at factory 1) go_point(factory 1) ? check_point(factory 1 bay 1); check_point(factory 1 bay 1) ? go_point(factory 1 bay 1) : check_point(factory 1 bay 2); check_point(factory 1 bay 2) ? go_point(factory 1 bay 2) : check_point(factory 1 bay 3); check_point(factory 1 bay 3) ? go_point(factory 1 bay 3) : go_point(factory 1 bay 1) ? alert_world(ready for loading); go_point(factory 1 bay 2) ? alert_world(ready for loading); go_point(factory 1 bay 3) ? alert_world(ready for loading); alert_world(ready for loading)_until(acknowl); listen_call(payload loaded)_onlyme() ? start_instruct(supply to factory 2); keep_listening(); end_instruct(load at factory 1); begin_instruct(supply to factory 2); go_point(factory 2); end_instruct(supply to factory 2) start_instruct(out of the box allocation)_asvirgin(); ddd ... call_point(factory 1)_for(alif) Written with StackEdit . Killing a robot is offensive and should be avoided. Switching a robot off is effectively killing the robot. In order for a robot to learn from its experiences and knowledge, both personal and shared, it needs to be kept alive and have very little to zero reincarnations. Each robot has a short-term memory (which is wiped when switched off) and a long-term memory (a database), which could become damaged if a robot is switched off. \u21a9","title":"Tutorial"},{"location":"Commands/#tutorial","text":"","title":"Tutorial"},{"location":"Commands/#requirements","text":"The problem we are going resolve in this tutorial involves six large-scale logistical robots (' mule ' type robots), three factories, one showroom, and, one fuel station, all in the physical human world. The requirement is to instruct the six robots to work as a swarm (team based, not form based) and perpetually keep the supply chain between each factory and the showroom, 24 hours/7 days per week. The sole developer and human interaction with the swarm of robots, to begin with, is Bob.","title":"Requirements"},{"location":"Commands/#variables","text":"First we are going to set the global variables for displaying the map for Bob. The map-type is the physical world (i.e. Earth) so the map_type should be set to global and not local . This means we will be using lat., long., alt. coordinates for all our position. The coordinate system is already defaulted to decimal_degrees , so we will not bother to set this global variable (usually referred as just ' global '). The map_centre and map_zoom defaults are set up. The location in the world we are working with is north of Brisbane, Queensland, Australia.","title":"Variables"},{"location":"Commands/#globals","text":"globals: map_type: global map_centre: -27.30948, 152.98256, 18.00000 map_zoom: 12","title":"Globals"},{"location":"Commands/#capables","text":"The ' capables ' are also global variables but developer specific rather the Diego Engine specific like the ' globals '. They are placed in the diego file so the data can be changed at design or run-time by bob using set_capable( capable moniker ) command. capables: - moniker: ready for loading data: /usr/share/xemacs21/xemacs-packages/etc/sounds/boing.wav We have only one ' capable ' which points to a '.wav' file used for playing a sound. We will see this ' capable ' used later in this tutorial.","title":"Capables"},{"location":"Commands/#humans","text":"There is only one human involved in the ' diego ', monikered as ' bob '. Bob is the only human interaction and communication for the robots. Human interaction in the real physical world is required, such as refueling, loading and unloading payloads, other road users etc., however these humans need not be declared in the ' diego ', Only the moniker of the human is need for this tutorial, however, we have given Bob a robo- rank of o4 ( robotenant ). Bob's robo- rank is not required for this tutorial but added for demonstration purposes. humans: - moniker: bob rank: o4","title":"Humans"},{"location":"Commands/#robots","text":"There are six robots, monikered after the first six letters of the Arabic alphabet. Each robot has different payload capacities and fuel consumption. The payload_weight_capacity is the weight limit for each robots payload in Kg. The fuel_consumption is the consumption of diesel fuel consumed in L/100Km. robots: - moniker: alif payload_weight_capacity: 6100 fuel_consumption: 12.5 - moniker: ba payload_weight_capacity: 7200 fuel_consumption: 12.1 - moinker: ta payload_weight_capacity: 7000 fuel_consumption: 11.8 - moniker: tha payload_weight_capacity: 8845 fuel_consuption: 13.8 - moniker: jim payload_weight_capacity: 8300 fuel_consuption: 12.5 - moniker: ha payload_weight_capacity: 6900 fuel_consuption: 12.4 All measurements use the metric system by default, but this can be changed at design-time using the measure_system global; adding set_measures in the diego code; or, in run-time using the set_measures( measure_type ) call.","title":"Robots"},{"location":"Commands/#points","text":"The pre-defined points on the map will be the factories, the showroom and the fuel station. Since we are using the global map_type loc will be used (instead of pos ) to provide the specific location on the points. The z-alt value ( altitude ) has been kept at 18m, roughly the correct elevation of these points on Earth. Since all the robots in this tutorial are ground based robots the altitude (used as elevation) is of no concern for this tutorial. points: - moniker: factory 1 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 1 bay 1 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 1 bay 2 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 1 bay 3 loc: -27.31556, 152.97592, 18.00000 - moniker: factory 2 loc: -27.32559, 152.99008, 18.00000 - moniker: factory 3 loc: -27.28723, 152.98965, 18.00000 - moniker: showroom loc: -27.30597, 152.99015, 18.00000 - moniker: fuel station loc: -27.32642, 152.97474, 18.00000 ```` ### Routes A *diego* can have no routes defined at start up and routes can be calculated; requested from map providers; shared; broadcast etc. between robots and humans in run-time, however, it is recommended for humans to provide all the possible variables needed by the robot(s) before the *diego* runs on each robot. There are four routes defined, at the moment we will just moniker them, with self-explanatory monikers. We will use a map provider to give us the route from any point to the fuel station. ```yaml routes: - moniker: factory 1 to factory 2 - moniker: factory 2 to factory 3 - moniker: factory 3 to showroom - moniker: showroom to factory 1 > Next Step: Instructions","title":"Points"},{"location":"Commands/#instructions","text":"All diego instructions must start with the go_diego command. We will add the north brisbane supply chain management diego_moniker . All monikers can be in any case, however, to avoid link bugs in the code, it is recommended to use all lowercase, and never use the characters , ( ) ? : . White-space can be used for monikers, but white-space is never used when entering types. go_diego(north brisbane supply chain management); We start the ' diego ' with all six robots unpacked and lined up on the car park of factory 1 . We switch each robot on and then we must decide who goes first. We can leave the robots to do this, however, just for the initial (once-only) ' out of the box allocation ' Bob will decide from the outside physical world. start_instruct(out of the box allocation)_asvirgin(); begin_instruct(out of the box allocation); listen_point(factory 1) ? start_instruct(load at factory 1); keep_listening(); end_instruct(out of the box allocation); The start_instruct(out of the box allocation)_asvirgin() command can be placed in this location (below go_diego ), however, it is common practice to place the first start_instruct command at the bottom of the program. It is really up to the developers preference. The _asvirgin() parameter-less sub command tells the robot to execute the instruct once-only (even if the robot is switched off). 1 We create a simple instruct using begin_instruct(out of the box allocation) . The instruct only creates a point listener on factory 1 point moniker, using listen_point(factory 1) command. The listen_point command has a hey_diego command, but no oh_diego command. The keep_listening() command will keep each robot waiting for a point call , and prevent the end_instruct command from executing and finishing the ' out of the box allocation ' instruct prematurely. Meanwhile, in the real physical world, Bob has a tablet computer connected to the swarm network and through his GUI calls each robot by name using the call_point command, first for alif robot... call_point(factory 1)_for(alif) ... and then for the other robots... If at this point Bob had sent call_point(factory 1) with no _for sub command, all the robots would execute the ' out of the box allocation ' instruct at the same time. This would not cause a problem as each robot has good manners and will and give way to each other, or at least inform the human(s) (that's bob ) of their predicament. When Bob sends the calll_point to alif , alif , the robot, will pick this up at command listen_point(factory 1) and its hey_diego event will be triggered. Then the program cursor will execute start_instruct(load at factory 1) . This will break in the ' out of the box allocation ' instruct to go on to the ' load at factory 1 ' instruct , marking the instruct s end, which would call the hey_diego event of end_instruct(load at factory 1) (if there was one). \\< Previous Step: Diego Declarations > Next Step: Load at Factory One begin_instruct(load at factory 1) go_point(factory 1) ? check_point(factory 1 bay 1); check_point(factory 1 bay 1) ? go_point(factory 1 bay 1) : check_point(factory 1 bay 2); check_point(factory 1 bay 2) ? go_point(factory 1 bay 2) : check_point(factory 1 bay 3); check_point(factory 1 bay 3) ? go_point(factory 1 bay 3) : go_point(factory 1 bay 1) ? alert_world(ready for loading); go_point(factory 1 bay 2) ? alert_world(ready for loading); go_point(factory 1 bay 3) ? alert_world(ready for loading); alert_world(ready for loading)_until(acknowl); listen_call(payload loaded)_onlyme() ? start_instruct(supply to factory 2); keep_listening(); end_instruct(load at factory 1); begin_instruct(supply to factory 2); go_point(factory 2); end_instruct(supply to factory 2) start_instruct(out of the box allocation)_asvirgin(); ddd ... call_point(factory 1)_for(alif) Written with StackEdit . Killing a robot is offensive and should be avoided. Switching a robot off is effectively killing the robot. In order for a robot to learn from its experiences and knowledge, both personal and shared, it needs to be kept alive and have very little to zero reincarnations. Each robot has a short-term memory (which is wiped when switched off) and a long-term memory (a database), which could become damaged if a robot is switched off. \u21a9","title":"Instructions"},{"location":"Diego%20Introduction/","text":"Diego Introduction What is Diego? Diego is a popular instruction language. It was created by Tavis Pitt, and released in 2020. The Diego instruction programming language is an open source project to make roboticists more productive. Diego is structured, expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write and execute instructions that get the most out of robots and smart devices (things), while its novel type system enables flexible and modular program construction. Diego is direct, real-time, and, intelligent language for robots and things to communicate and learn. It is used for: robot communication, controlling robots, controlling things (of the Internet of Things) (IoT). What can Diego do? Hello World with_me()_msg(Hello, World!); me_msg(Hello, World!); cle","title":"Diego Introduction"},{"location":"Diego%20Introduction/#diego-introduction","text":"","title":"Diego Introduction"},{"location":"Diego%20Introduction/#what-is-diego","text":"Diego is a popular instruction language. It was created by Tavis Pitt, and released in 2020. The Diego instruction programming language is an open source project to make roboticists more productive. Diego is structured, expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write and execute instructions that get the most out of robots and smart devices (things), while its novel type system enables flexible and modular program construction. Diego is direct, real-time, and, intelligent language for robots and things to communicate and learn. It is used for: robot communication, controlling robots, controlling things (of the Internet of Things) (IoT).","title":"What is Diego?"},{"location":"Diego%20Introduction/#what-can-diego-do","text":"","title":"What can Diego do?"},{"location":"Diego%20Introduction/#hello-world","text":"with_me()_msg(Hello, World!); me_msg(Hello, World!); cle","title":"Hello World"},{"location":"gettingstarted/","text":"Diego Getting Started Diego Install Many PCs and Macs will have diego already installed. To check if you have diego installed on a Windows PC, search in the start bar for Diego or run the following on the Command Line (cmd.exe): C:\\Users\\{your_name}> diego --version To check if you have diego installed on a Linux or Mac, then on linux open the Terminal or on Mac open the command line and type: {your_name}@{your_pc}:~$ diego --version If you find that you do not have diego installed on your computer, then you can download it for free from the following website: https://www.diego.org/ Diego Quickstart Diego is an interpreted instructional language, this means that as a developer you write Diego (.dgo) files in a text editor and then put those files into the diego console to be executed. The way to run a diego file is like this on the command line: Windows: C:\\Users\\{your_name}> diego helloworld.dgo Linux/Macs: {your_name}@{your_pc}:~$ diego helloworld.dgo Where \"helloworld.dgo\" is the name of your diego file. Let's write our first diego file, called helloworld.dgo, which can be done in any text editor. helloworld.dgo Diego with_me()_msg(Hello, World!); Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run: Windows: C:\\Users\\{your_name}> diego helloworld.dgo Linux/Macs: {your_name}@{your_pc}:~$ diego helloworld.dgo The output should read: Hello, World! Congratulations, you have written and executed your first Diego program. See: https://www.w3schools.com/python/python_getstarted.asp","title":"Diego Getting Started"},{"location":"gettingstarted/#diego-getting-started","text":"","title":"Diego Getting Started"},{"location":"gettingstarted/#diego-install","text":"Many PCs and Macs will have diego already installed. To check if you have diego installed on a Windows PC, search in the start bar for Diego or run the following on the Command Line (cmd.exe): C:\\Users\\{your_name}> diego --version To check if you have diego installed on a Linux or Mac, then on linux open the Terminal or on Mac open the command line and type: {your_name}@{your_pc}:~$ diego --version If you find that you do not have diego installed on your computer, then you can download it for free from the following website: https://www.diego.org/","title":"Diego Install"},{"location":"gettingstarted/#diego-quickstart","text":"Diego is an interpreted instructional language, this means that as a developer you write Diego (.dgo) files in a text editor and then put those files into the diego console to be executed. The way to run a diego file is like this on the command line: Windows: C:\\Users\\{your_name}> diego helloworld.dgo Linux/Macs: {your_name}@{your_pc}:~$ diego helloworld.dgo Where \"helloworld.dgo\" is the name of your diego file. Let's write our first diego file, called helloworld.dgo, which can be done in any text editor. helloworld.dgo Diego with_me()_msg(Hello, World!); Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run: Windows: C:\\Users\\{your_name}> diego helloworld.dgo Linux/Macs: {your_name}@{your_pc}:~$ diego helloworld.dgo The output should read: Hello, World! Congratulations, you have written and executed your first Diego program. See: https://www.w3schools.com/python/python_getstarted.asp","title":"Diego Quickstart"},{"location":"intro/","text":"Diego Introduction The Diego instruction programming language is an open source project to make roboticists more productive. What is Diego? Diego is structured, expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write and execute instructions that get the most out of robots and smart devices (things), while its novel type system enables flexible and modular program construction. Diego is direct, real-time, and, intelligent language for robots and things to communicate and learn. What can Diego do? Communicate intelligent and life-learning strategies between robot \u2194 robot, and, robot \u2194 human Provide a universal communication protocol for thingies (robots and things) Empower quick and precise swarming strategies Remove telemetry clutter by allowing robots and things to think for themselves Remove the reliance of human-computer micro-management by giving robots and things more responsibilities Why Diego? Diego has a structured syntax with mostly English language words. Good to know Hello World The atypical 'hello world' example can easily be performed on a console as: with_me()_msg(Hello, World!); The syntax is very structured, but flexible to compose. Where next?","title":"Diego Introduction"},{"location":"intro/#diego-introduction","text":"The Diego instruction programming language is an open source project to make roboticists more productive.","title":"Diego Introduction"},{"location":"intro/#what-is-diego","text":"Diego is structured, expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write and execute instructions that get the most out of robots and smart devices (things), while its novel type system enables flexible and modular program construction. Diego is direct, real-time, and, intelligent language for robots and things to communicate and learn.","title":"What is Diego?"},{"location":"intro/#what-can-diego-do","text":"Communicate intelligent and life-learning strategies between robot \u2194 robot, and, robot \u2194 human Provide a universal communication protocol for thingies (robots and things) Empower quick and precise swarming strategies Remove telemetry clutter by allowing robots and things to think for themselves Remove the reliance of human-computer micro-management by giving robots and things more responsibilities","title":"What can Diego do?"},{"location":"intro/#why-diego","text":"Diego has a structured syntax with mostly English language words.","title":"Why Diego?"},{"location":"intro/#good-to-know","text":"","title":"Good to know"},{"location":"intro/#hello-world","text":"The atypical 'hello world' example can easily be performed on a console as: with_me()_msg(Hello, World!); The syntax is very structured, but flexible to compose.","title":"Hello World"},{"location":"intro/#where-next","text":"","title":"Where next?"},{"location":"syntax/","text":"Language Syntax Simple Command It is also executes commands synchronously by the terminator ; keysymbol. The common and most simplified command syntax is: {verb}_{object}({moniker|uuid}); The command will do {verb} to an {object} type identified as {moniker|uuid} . The Diego engine will initiate this command and then move on to the next command immediately, it will not wait for the command to return success ( 1 or true ) or failure ( 0 or false ). To catch a response to the command, wait for the command to finish the developer will need to use the 'elvish' operator. The Elvish Operator The elvish operator is a word pun on the Elvis Operator as it is similar -ish to the Elvis operator. Here are some variations of syntax of a command using the elvish operator: {verb}_{object}({moniker|uuid}) ? ; {verb}_{object}({moniker|uuid}) ? : ; {verb}_{object}({moniker|uuid}) : ; {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}); {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}) : ; {verb}_{object}({moniker|uuid}) ? : {verb}_{object}({moniker|uuid}) ; {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}) : {verb}_{object}({moniker|uuid}); {verb}_{object}({moniker|uuid}) : {verb}_{object}({moniker|uuid}); The first three command syntaxes are semantically the same, however, the second syntax ( {verb}_{object}({moniker|uuid}) ? : ; ) is preferred as it provides placeholders for future use. The full asynchronous command syntax is as follows: {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}) : {verb}_{object}({moniker|uuid}); {go_diego command} ? {hey_diego command} : {oh_diego command}; When the elvish operator is used the Diego engine will initiate and wait for completion of the command (asynchronous). Upon completion of the first command (known as the 'go_deigo command' ) any successful result(s) will be passed to the next command after the ? operator, this command is known as the 'hey_diego command' . Similarly any failures/failed results/errors will be passed to the 'oh_diego' command, after the : operator. Unless otherwise set, the default process of all commands that use the elvish operator ( ? and/or : ) if one or more valid objects are provided for successes and one or more err object provided for failures/errors. Child Commands The go_diego , hey_diego , and oh_diego commands can have objects children Sibling Commands The hey_diego and oh_diego commands can have siblings identified using the | operator. Each sibling command is initiated synchronously unless an elvish operator is used. The go_diego command cannot have any siblings. For ease-of-reading whitespace can be used, for example: {go_diego command} ? {hey_diego command} | {sibling hey_diego command} ? : : {oh_diego command} | {sibling oh_diego command}; Nesting Commands Commands can be nested to the n th level, however, for ease-of-reading it is recommended to encapsulate nested commands into instruct s. Examples: {go_diego command} ? {hey_diego command} ? {nested hey_diego-hey_diego command} : {nested hey_diego-oh_diego command} : {oh_diego command} ? {nested oh_diego-hey_diego command} : {nested oh_diego-oh_diego command}; {go_diego command} ? {hey_diego command} ? {nested hey_diego-hey_diego command} ? {nested hey_diego-hey_diego-hey_diego command} : {nested hey_diego-hey_diego-oh_diego command} : {nested hey_diego-oh_diego command} ? {nested hey_diego-oh_diego-hey_diego command} : {nested hey_diego-oh_diego-oh_diego command} : {oh_diego command} ? {nested oh_diego-hey_diego command} ? {nested oh_diego-hey_diego-hey_diego command} : {nested oh_diego-hey_diego-oh_diego command} : {nested oh_diego-oh_diego command} ? {nested oh_diego-oh_diego-hey_diego command} : {nested oh_diego-oh_diego-oh_diego command}; {go_diego command} ? {hey_diego command} ? {nested hey_diego-hey_diego command} : {nested hey_diego-oh_diego command} : {oh_diego command} ? {nested oh_diego-hey_diego command} : {nested oh_diego-oh_diego command} | {sibling hey_diego command} ? {nested sibling hey_diego-hey_diego command} : {nested sibling hey_diego-oh_diego command} : {sibling oh_diego command} ? {nested sibling oh_diego-hey_diego command} : {nested sibling oh_diego-oh_diego command}; ; {go_diego command} ? {instruct} : {instruct}; Recursive Commands begin_funct(fact)_param(n,int); proviso(n)_equals(0) ? with_funct()_this()_return(1); add_calc(nwith_funct()_this()_return(1); end_funct(fact);","title":"Language Syntax"},{"location":"syntax/#language-syntax","text":"","title":"Language Syntax"},{"location":"syntax/#simple-command","text":"It is also executes commands synchronously by the terminator ; keysymbol. The common and most simplified command syntax is: {verb}_{object}({moniker|uuid}); The command will do {verb} to an {object} type identified as {moniker|uuid} . The Diego engine will initiate this command and then move on to the next command immediately, it will not wait for the command to return success ( 1 or true ) or failure ( 0 or false ). To catch a response to the command, wait for the command to finish the developer will need to use the 'elvish' operator.","title":"Simple Command"},{"location":"syntax/#the-elvish-operator","text":"The elvish operator is a word pun on the Elvis Operator as it is similar -ish to the Elvis operator. Here are some variations of syntax of a command using the elvish operator: {verb}_{object}({moniker|uuid}) ? ; {verb}_{object}({moniker|uuid}) ? : ; {verb}_{object}({moniker|uuid}) : ; {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}); {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}) : ; {verb}_{object}({moniker|uuid}) ? : {verb}_{object}({moniker|uuid}) ; {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}) : {verb}_{object}({moniker|uuid}); {verb}_{object}({moniker|uuid}) : {verb}_{object}({moniker|uuid}); The first three command syntaxes are semantically the same, however, the second syntax ( {verb}_{object}({moniker|uuid}) ? : ; ) is preferred as it provides placeholders for future use. The full asynchronous command syntax is as follows: {verb}_{object}({moniker|uuid}) ? {verb}_{object}({moniker|uuid}) : {verb}_{object}({moniker|uuid}); {go_diego command} ? {hey_diego command} : {oh_diego command}; When the elvish operator is used the Diego engine will initiate and wait for completion of the command (asynchronous). Upon completion of the first command (known as the 'go_deigo command' ) any successful result(s) will be passed to the next command after the ? operator, this command is known as the 'hey_diego command' . Similarly any failures/failed results/errors will be passed to the 'oh_diego' command, after the : operator. Unless otherwise set, the default process of all commands that use the elvish operator ( ? and/or : ) if one or more valid objects are provided for successes and one or more err object provided for failures/errors.","title":"The Elvish Operator"},{"location":"syntax/#child-commands","text":"The go_diego , hey_diego , and oh_diego commands can have objects children","title":"Child Commands"},{"location":"syntax/#sibling-commands","text":"The hey_diego and oh_diego commands can have siblings identified using the | operator. Each sibling command is initiated synchronously unless an elvish operator is used. The go_diego command cannot have any siblings. For ease-of-reading whitespace can be used, for example: {go_diego command} ? {hey_diego command} | {sibling hey_diego command} ? : : {oh_diego command} | {sibling oh_diego command};","title":"Sibling Commands"},{"location":"syntax/#nesting-commands","text":"Commands can be nested to the n th level, however, for ease-of-reading it is recommended to encapsulate nested commands into instruct s. Examples: {go_diego command} ? {hey_diego command} ? {nested hey_diego-hey_diego command} : {nested hey_diego-oh_diego command} : {oh_diego command} ? {nested oh_diego-hey_diego command} : {nested oh_diego-oh_diego command}; {go_diego command} ? {hey_diego command} ? {nested hey_diego-hey_diego command} ? {nested hey_diego-hey_diego-hey_diego command} : {nested hey_diego-hey_diego-oh_diego command} : {nested hey_diego-oh_diego command} ? {nested hey_diego-oh_diego-hey_diego command} : {nested hey_diego-oh_diego-oh_diego command} : {oh_diego command} ? {nested oh_diego-hey_diego command} ? {nested oh_diego-hey_diego-hey_diego command} : {nested oh_diego-hey_diego-oh_diego command} : {nested oh_diego-oh_diego command} ? {nested oh_diego-oh_diego-hey_diego command} : {nested oh_diego-oh_diego-oh_diego command}; {go_diego command} ? {hey_diego command} ? {nested hey_diego-hey_diego command} : {nested hey_diego-oh_diego command} : {oh_diego command} ? {nested oh_diego-hey_diego command} : {nested oh_diego-oh_diego command} | {sibling hey_diego command} ? {nested sibling hey_diego-hey_diego command} : {nested sibling hey_diego-oh_diego command} : {sibling oh_diego command} ? {nested sibling oh_diego-hey_diego command} : {nested sibling oh_diego-oh_diego command}; ; {go_diego command} ? {instruct} : {instruct};","title":"Nesting Commands"},{"location":"syntax/#recursive-commands","text":"begin_funct(fact)_param(n,int); proviso(n)_equals(0) ? with_funct()_this()_return(1); add_calc(nwith_funct()_this()_return(1); end_funct(fact);","title":"Recursive Commands"},{"location":"abstract/abstract/","text":"Abstract The term abstract is used to define statements in diego that represent abstract objects, usually used in a programming environment. Self As with most object-orientated programming langauges, the idea of self is used in Diego . However, since there are multiple intelects that are interpreting Diego code, there needs to be several levels of self. The differing level of self are usful for discernment, discrimination, and, swarming. All four self objects are metaphysical, however, me is considered to be also abstract as this is associated with ' this ' in other programming languages. However, the four self objects are: self description API me_ <object> _me() A representation of the self thingy, similar to ' this ' in other programming languages me _we() A representation of a group of thingys, through the viewpoint of a spox we spox _us() Declaration of a group of thingys us _them() A representation of a group of thingys from the viewpoint of me them _you() A assignment member of the a group of thingys from the viewpoint of the spox of the group you Declarable Data data description API _deed( moniker ) A basic one-dimensional data storage object called moniker , immutable except for deed owner deed _indent( moniker ) indenture( moniker ) A basic one-dimensional data storage object called moniker , immutable except for indenture owners indent val( moniker ) valuable( moniker ) A basic one-dimensional immutable data storage object called moniker val var( moniker ) variable( moniker ) A basic one-dimensional mutable data storage object called moniker var Primitive Data data description API tempor( moniker ) temporal( moniker ) _tempor( moniker ) _temporal( moniker ) {tempor} {temporal} A primitive data object representing a date off a calendar monikered moniker tempor Collections collection description API array( moniker ) ary( moniker ) A collection of multiple mutable elements under a single object called moniker array list( moniker ) A database-assigned collection object called moniker list arran( moniker ) arn( moniker ) arrangem( moniker ) arrangement( moniker ) A collection of multiple mutable elements under a single variable name of moniker arran matrix( moniker ) _matrix( moniker ) A two-dimensional collection data storage object called moniker matrix clump( moniker ) A multi-dimensional collection of data storage object called moniker clump dict( moniker ) _dict( moniker ) dictionary( moniker ) _dictionary( moniker ) A keyed collection, with key-value pairs, data storage object called moniker dict hash( moniker ) A two-dimensional collection data storage object called moniker , with hashed keys hash lexi( moniker ) lexikon( moniker ) A two-dimensional collection data storage object called moniker , with unique keys lexi Function Properties Functional Objects Error Objects err description API err Numerics Dates Text Processing Control Flow Declarations Functions & Classes Iterations Primary Expressions Collection Dimensions Data storage can be achieved in diego flowchart RL subgraph multi-dimension clump([\"<code>clump</code>\"]) end subgraph two-dimension matrix([\"<code>matrix</code>\"]) dict([\"<code>dict</code>\"]) hash([\"<code>hash</code>\"]) end subgraph one-dimension var([\"<code>var</code>\"]) array([\"<code>ary</code>\"]) end Dimensions of collections All physic al objects in diego are detrived from the thingy object, which represents all physic al objects. There are only four 1 types of thingies : human , human beings interacting with diego through a console ; organic , organic non-human beings, such as a dog, a cat, a flower, a bush, etc.; robot , a self-propelled thingy in the physical world; and a, thing , an object in the physical world represented in diego . There are other sub-types of thingies. A sobot is a stationary robot , that although can be self-propelled, does not neccesarily interact physically in the physical world outside its own environment, such as a robot arm . A thing can be sub-typed as: mobot , a conveyed smart device, such as a smart watch, smart doorbel, etc.; and a, ject , a traditional physical object that is not smart enough to think. There are two variants of a ject : an object (ob ject), an immoveable ject such as a rock, a chair; and, a subject (sub ject), a self-propelled or moveable ject such as a trolley, wheeled tool cabinet, etc. Physic Composition Hierarchy (Organs / Components / Devices) Each of the four thingies has associated components that are further categorised, as such: flowchart TD thingy --> human thingy --> organic thingy --> robot thingy --> thing human --> apparat_human(apparat) human --> device_human(device) organic --> apparat_organic(apparat) organic --> device_organic(device) robot --> equip_robot(equip) robot --> compon_robot(compon) robot --> peripher_robot(peripher) thing --> equip_thing(equip) thing --> compon_thing(compon) thing --> peripher_thing(peripher) Physic Hierarchy (by component) There are effectively three components that come with each thingy . The apparat us/ equip ment are non-smart components that are carried or attached to the thingy, so, for human s this could be a traditional watch or a jacket. For organic s this could be a collar on a dog or cat. For robot s this is a component like wheels, or the chassis. For a thing this could be the door of a fridge, or a cushion on a chair. Each of the four thingies also have a compon ent. A compon is a component that moves in the physical world, so for human s and organic s this would be a limb or an organ. Since diego is not, yet, concerned with controlling human and organic anotomy, they are not represented here. However, compon s for robots and things include actuators, projectile launchers, encoders, motors, switches, etc. Then there are device s and peripher als, which are smart components that are carried or attached to the thingy, so for human s this could be a smart watch or a cellphone 2 . For organic s this could be a microchip implanted in a dog. For robot s and thing s this is termed a peripher and includes hygrometers, proximity sensors, sensors, cameras, etc. Notes References There are some fringe thingy types such as mech , applian , mach , and, vehicle . \u21a9 Smart devices are can also be treated a sobot s. \u21a9","title":"Abstract"},{"location":"abstract/abstract/#abstract","text":"The term abstract is used to define statements in diego that represent abstract objects, usually used in a programming environment.","title":"Abstract"},{"location":"abstract/abstract/#self","text":"As with most object-orientated programming langauges, the idea of self is used in Diego . However, since there are multiple intelects that are interpreting Diego code, there needs to be several levels of self. The differing level of self are usful for discernment, discrimination, and, swarming. All four self objects are metaphysical, however, me is considered to be also abstract as this is associated with ' this ' in other programming languages. However, the four self objects are: self description API me_ <object> _me() A representation of the self thingy, similar to ' this ' in other programming languages me _we() A representation of a group of thingys, through the viewpoint of a spox we spox _us() Declaration of a group of thingys us _them() A representation of a group of thingys from the viewpoint of me them _you() A assignment member of the a group of thingys from the viewpoint of the spox of the group you","title":" Self"},{"location":"abstract/abstract/#declarable-data","text":"data description API _deed( moniker ) A basic one-dimensional data storage object called moniker , immutable except for deed owner deed _indent( moniker ) indenture( moniker ) A basic one-dimensional data storage object called moniker , immutable except for indenture owners indent val( moniker ) valuable( moniker ) A basic one-dimensional immutable data storage object called moniker val var( moniker ) variable( moniker ) A basic one-dimensional mutable data storage object called moniker var","title":" Declarable Data"},{"location":"abstract/abstract/#primitive-data","text":"data description API tempor( moniker ) temporal( moniker ) _tempor( moniker ) _temporal( moniker ) {tempor} {temporal} A primitive data object representing a date off a calendar monikered moniker tempor","title":" Primitive Data"},{"location":"abstract/abstract/#collections","text":"collection description API array( moniker ) ary( moniker ) A collection of multiple mutable elements under a single object called moniker array list( moniker ) A database-assigned collection object called moniker list arran( moniker ) arn( moniker ) arrangem( moniker ) arrangement( moniker ) A collection of multiple mutable elements under a single variable name of moniker arran matrix( moniker ) _matrix( moniker ) A two-dimensional collection data storage object called moniker matrix clump( moniker ) A multi-dimensional collection of data storage object called moniker clump dict( moniker ) _dict( moniker ) dictionary( moniker ) _dictionary( moniker ) A keyed collection, with key-value pairs, data storage object called moniker dict hash( moniker ) A two-dimensional collection data storage object called moniker , with hashed keys hash lexi( moniker ) lexikon( moniker ) A two-dimensional collection data storage object called moniker , with unique keys lexi","title":" Collections"},{"location":"abstract/abstract/#function-properties","text":"","title":" Function Properties"},{"location":"abstract/abstract/#functional-objects","text":"","title":" Functional Objects"},{"location":"abstract/abstract/#error-objects","text":"err description API err","title":" Error Objects"},{"location":"abstract/abstract/#numerics","text":"","title":" Numerics"},{"location":"abstract/abstract/#dates","text":"","title":" Dates"},{"location":"abstract/abstract/#text-processing","text":"","title":" Text Processing"},{"location":"abstract/abstract/#control-flow","text":"","title":" Control Flow"},{"location":"abstract/abstract/#declarations","text":"","title":" Declarations"},{"location":"abstract/abstract/#functions-classes","text":"","title":" Functions &amp; Classes"},{"location":"abstract/abstract/#iterations","text":"","title":" Iterations"},{"location":"abstract/abstract/#primary-expressions","text":"","title":" Primary Expressions"},{"location":"abstract/abstract/#collection-dimensions","text":"Data storage can be achieved in diego flowchart RL subgraph multi-dimension clump([\"<code>clump</code>\"]) end subgraph two-dimension matrix([\"<code>matrix</code>\"]) dict([\"<code>dict</code>\"]) hash([\"<code>hash</code>\"]) end subgraph one-dimension var([\"<code>var</code>\"]) array([\"<code>ary</code>\"]) end Dimensions of collections All physic al objects in diego are detrived from the thingy object, which represents all physic al objects. There are only four 1 types of thingies : human , human beings interacting with diego through a console ; organic , organic non-human beings, such as a dog, a cat, a flower, a bush, etc.; robot , a self-propelled thingy in the physical world; and a, thing , an object in the physical world represented in diego . There are other sub-types of thingies. A sobot is a stationary robot , that although can be self-propelled, does not neccesarily interact physically in the physical world outside its own environment, such as a robot arm . A thing can be sub-typed as: mobot , a conveyed smart device, such as a smart watch, smart doorbel, etc.; and a, ject , a traditional physical object that is not smart enough to think. There are two variants of a ject : an object (ob ject), an immoveable ject such as a rock, a chair; and, a subject (sub ject), a self-propelled or moveable ject such as a trolley, wheeled tool cabinet, etc.","title":"Collection Dimensions"},{"location":"abstract/abstract/#physic-composition-hierarchy-organs-components-devices","text":"Each of the four thingies has associated components that are further categorised, as such: flowchart TD thingy --> human thingy --> organic thingy --> robot thingy --> thing human --> apparat_human(apparat) human --> device_human(device) organic --> apparat_organic(apparat) organic --> device_organic(device) robot --> equip_robot(equip) robot --> compon_robot(compon) robot --> peripher_robot(peripher) thing --> equip_thing(equip) thing --> compon_thing(compon) thing --> peripher_thing(peripher) Physic Hierarchy (by component) There are effectively three components that come with each thingy . The apparat us/ equip ment are non-smart components that are carried or attached to the thingy, so, for human s this could be a traditional watch or a jacket. For organic s this could be a collar on a dog or cat. For robot s this is a component like wheels, or the chassis. For a thing this could be the door of a fridge, or a cushion on a chair. Each of the four thingies also have a compon ent. A compon is a component that moves in the physical world, so for human s and organic s this would be a limb or an organ. Since diego is not, yet, concerned with controlling human and organic anotomy, they are not represented here. However, compon s for robots and things include actuators, projectile launchers, encoders, motors, switches, etc. Then there are device s and peripher als, which are smart components that are carried or attached to the thingy, so for human s this could be a smart watch or a cellphone 2 . For organic s this could be a microchip implanted in a dog. For robot s and thing s this is termed a peripher and includes hygrometers, proximity sensors, sensors, cameras, etc.","title":"Physic Composition Hierarchy (Organs / Components / Devices)"},{"location":"abstract/abstract/#notes","text":"","title":"Notes"},{"location":"abstract/abstract/#references","text":"There are some fringe thingy types such as mech , applian , mach , and, vehicle . \u21a9 Smart devices are can also be treated a sobot s. \u21a9","title":"References"},{"location":"abstract/condit/after/","text":"After (condition) The after condit is used to determine if the preceding object is after the provided from parameter. after functions as a boolean return switch, returning true if the condition is met. Syntax The use of the after condit needs to provide _after( from ) _after([ variable_name ]) Temporal After (condition) Using the after condit with a preceding tempor object returns true if the preceding object is after the tempor provided as the from parameter. The temporfrom is syntactically identical to after with tempor objects and ` parameters , they can be used interchangeably. Syntax _after( tempor_from ) _temporfrom( tempor_from ) _after([ tempor_variable_name ]) _temporfrom([ tempor_variable_name ])","title":"After (condition)"},{"location":"abstract/condit/after/#after-condition","text":"The after condit is used to determine if the preceding object is after the provided from parameter. after functions as a boolean return switch, returning true if the condition is met.","title":"After (condition)"},{"location":"abstract/condit/after/#syntax","text":"The use of the after condit needs to provide _after( from ) _after([ variable_name ])","title":"Syntax"},{"location":"abstract/condit/after/#temporal-after-condition","text":"Using the after condit with a preceding tempor object returns true if the preceding object is after the tempor provided as the from parameter. The temporfrom is syntactically identical to after with tempor objects and ` parameters , they can be used interchangeably.","title":"Temporal After (condition)"},{"location":"abstract/condit/after/#syntax_1","text":"_after( tempor_from ) _temporfrom( tempor_from ) _after([ tempor_variable_name ]) _temporfrom([ tempor_variable_name ])","title":"Syntax"},{"location":"abstract/condit/at/","text":"At (condition) A index condit used to determine if the preceeding object is positioned at the after the provided date | datetime for proceeding object to do proceeding action . after functions as a boolean return switch, returning true if the condition is met. | _at( index ) _at() | Provides the element at index index | with_ary( moniker )_at( index )_v( val ) [myArray]_at(3); [myMatrix]_at(3, 2); with_map(map)_object(table)_at(-26.812298, 153.082254); add_point(head off point)_at(warnia, 23.54345, 23.3232, 4.334)_for(beta, gamma);","title":"At (condition)"},{"location":"abstract/condit/at/#at-condition","text":"A index condit used to determine if the preceeding object is positioned at the after the provided date | datetime for proceeding object to do proceeding action . after functions as a boolean return switch, returning true if the condition is met. | _at( index ) _at() | Provides the element at index index | with_ary( moniker )_at( index )_v( val ) [myArray]_at(3); [myMatrix]_at(3, 2); with_map(map)_object(table)_at(-26.812298, 153.082254); add_point(head off point)_at(warnia, 23.54345, 23.3232, 4.334)_for(beta, gamma);","title":"At (condition)"},{"location":"abstract/condit/before/","text":"Before (condit) The before condit is used to determine if the preceding object is before the provided before parameter. before functions as a boolean return switch, returning true if the condition is met.","title":"Before (condit)"},{"location":"abstract/condit/before/#before-condit","text":"The before condit is used to determine if the preceding object is before the provided before parameter. before functions as a boolean return switch, returning true if the condition is met.","title":"Before (condit)"},{"location":"abstract/condit/during/","text":"","title":"During"},{"location":"abstract/condit/temporat/","text":"Temporal At (condit)","title":"Temporal At (condit)"},{"location":"abstract/condit/temporat/#temporal-at-condit","text":"","title":"Temporal At (condit)"},{"location":"abstract/condit/temporfrom/","text":"Temporal From (condition) The temporfrom conditional property is used to determine a tempor for the preceding object to action from, optionally using definitions of the proceeding object . Declaration The temporfrom conditional property is only available via posit syntax. To declare a new temporfrom conditional property , provide a from_tempor_expression with one of eight formats. <object> _temporfrom( from_tempor_expression ); There are eight syntaxes available for a from_tempor_expression . expression syntax description example P MM - DD Plain month-day, known as 'PlainMonthDay'. P08-05 P YYYY - MM Plain year-month, known as 'PlainYearMonth'. P2020-08 P YYYY - MM - DD Plain date, known as 'PlainDate'. P2020-08-05 T HH : mm : ss Plain time, known as 'PlainTime'. T20:06:13 P YYYY - MM - DD T HH : mm : ss Plain datetime, known as 'PlainDateTime'. P2020-08-05T20:06:13 P YYYY - MM - DD T HH : mm : ss + offset P YYYY - MM - DD T HH : mm : ss Z Instant datetime, known just as 'Instant'. P2020-08-05T20:06:13+09:00 P2020-08-05T11:06:13Z P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ] Zoned datetime, known as 'ZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese] P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ][ calendar_extension ] Full zoned datetime, known as 'FullZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese] Assignment ; providing the moniker of a pre-declared tempor <object> _temporfrom([ tempor_variable_name ]); <object> _temporfrom( from_tempor_moniker ); <object> _temporfrom(\u27e6 from_tempor_moniker \u27e7); <object> _temporfrom([[ from_tempor_moniker ]]); apt_freq(); express","title":"Temporal From (condition)"},{"location":"abstract/condit/temporfrom/#temporal-from-condition","text":"The temporfrom conditional property is used to determine a tempor for the preceding object to action from, optionally using definitions of the proceeding object .","title":"Temporal From (condition)"},{"location":"abstract/condit/temporfrom/#declaration","text":"The temporfrom conditional property is only available via posit syntax. To declare a new temporfrom conditional property , provide a from_tempor_expression with one of eight formats. <object> _temporfrom( from_tempor_expression ); There are eight syntaxes available for a from_tempor_expression . expression syntax description example P MM - DD Plain month-day, known as 'PlainMonthDay'. P08-05 P YYYY - MM Plain year-month, known as 'PlainYearMonth'. P2020-08 P YYYY - MM - DD Plain date, known as 'PlainDate'. P2020-08-05 T HH : mm : ss Plain time, known as 'PlainTime'. T20:06:13 P YYYY - MM - DD T HH : mm : ss Plain datetime, known as 'PlainDateTime'. P2020-08-05T20:06:13 P YYYY - MM - DD T HH : mm : ss + offset P YYYY - MM - DD T HH : mm : ss Z Instant datetime, known just as 'Instant'. P2020-08-05T20:06:13+09:00 P2020-08-05T11:06:13Z P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ] Zoned datetime, known as 'ZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese] P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ][ calendar_extension ] Full zoned datetime, known as 'FullZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese]","title":"Declaration"},{"location":"abstract/condit/temporfrom/#assignment","text":"; providing the moniker of a pre-declared tempor <object> _temporfrom([ tempor_variable_name ]); <object> _temporfrom( from_tempor_moniker ); <object> _temporfrom(\u27e6 from_tempor_moniker \u27e7); <object> _temporfrom([[ from_tempor_moniker ]]); apt_freq(); express","title":"Assignment"},{"location":"abstract/condit/temporto/","text":"Temporal To (condition)","title":"Temporal To (condition)"},{"location":"abstract/condit/temporto/#temporal-to-condition","text":"","title":"Temporal To (condition)"},{"location":"abstract/condit/to/","text":"To (condition)","title":"To (condition)"},{"location":"abstract/condit/to/#to-condition","text":"","title":"To (condition)"},{"location":"abstract/const/e/","text":"Euler's Constant (constant) The e object represents Euler's constant, the base of natural logarithms, which is approximately 2.718. It follows formula: \\(e^{i\\pi} + 1 = 0\\) . Syntax To provide a Euler's constant, use the e() posit or \u2107 in expressions. Optionally, the number of decimal places can be given, if omitted the default decimal places of the callee thingy is used. _e() _e( decimal_places ) <expression_posit> ( ... \u2107 ... ); _e([ variable_name ]) Example The following function returns e: add_funct(getNapier)_param(dp)_ret()_e([dp]); me_msg()_funct(getNapier)_param(15); // 2.718281828459045 References","title":"Euler's Constant (constant)"},{"location":"abstract/const/e/#eulers-constant-constant","text":"The e object represents Euler's constant, the base of natural logarithms, which is approximately 2.718. It follows formula: \\(e^{i\\pi} + 1 = 0\\) .","title":"Euler's Constant (constant)"},{"location":"abstract/const/e/#syntax","text":"To provide a Euler's constant, use the e() posit or \u2107 in expressions. Optionally, the number of decimal places can be given, if omitted the default decimal places of the callee thingy is used. _e() _e( decimal_places ) <expression_posit> ( ... \u2107 ... ); _e([ variable_name ])","title":"Syntax"},{"location":"abstract/const/e/#example","text":"The following function returns e: add_funct(getNapier)_param(dp)_ret()_e([dp]); me_msg()_funct(getNapier)_param(15); // 2.718281828459045","title":"Example"},{"location":"abstract/const/e/#references","text":"","title":"References"},{"location":"abstract/const/ln10/","text":"Natural Logarithm of 10 (constant)","title":"Natural Logarithm of 10 (constant)"},{"location":"abstract/const/ln10/#natural-logarithm-of-10-constant","text":"","title":"Natural Logarithm of 10 (constant)"},{"location":"abstract/const/ln10e/","text":"Base 10 Logarithm of e (constant)","title":"Base 10 Logarithm of e (constant)"},{"location":"abstract/const/ln10e/#base-10-logarithm-of-e-constant","text":"","title":"Base 10 Logarithm of e (constant)"},{"location":"abstract/const/ln2/","text":"Natural Logarithm of 2 (constant)","title":"Natural Logarithm of 2 (constant)"},{"location":"abstract/const/ln2/#natural-logarithm-of-2-constant","text":"","title":"Natural Logarithm of 2 (constant)"},{"location":"abstract/const/pi/","text":"Pi (constant) The pi constant represents pi ( \\(\\pi\\) ), the ratio of the circumference of a circle to its diameter, which is approximately 3.14159. Syntax To provide a pi, use the pi() posit or ( \u03c0 or \ud835\uded1 or \ud835\udf0b or \ud835\udf45 or \ud835\udf7f ) in expressions. Optionally, the number of decimal places can be given, if omitted the default decimal places of the callee thingy is used. _pi() _pi( decimal_places ) <expression_posit> ( ... \u03c0 ... ); Example The following function returns e: add_funct(calcCircumference)_param(radius) ()_ret()_calc\u27e6[radius]\u00d7(\u03c0+\u03c0)\u27e7; ; me_msg()_funct(calcCircumference, )_arg(1); // 6.283185307179586 References Mathematical constants: e ; ln2 ; ln10 ; ln10e ;","title":"Pi (constant)"},{"location":"abstract/const/pi/#pi-constant","text":"The pi constant represents pi ( \\(\\pi\\) ), the ratio of the circumference of a circle to its diameter, which is approximately 3.14159.","title":"Pi (constant)"},{"location":"abstract/const/pi/#syntax","text":"To provide a pi, use the pi() posit or ( \u03c0 or \ud835\uded1 or \ud835\udf0b or \ud835\udf45 or \ud835\udf7f ) in expressions. Optionally, the number of decimal places can be given, if omitted the default decimal places of the callee thingy is used. _pi() _pi( decimal_places ) <expression_posit> ( ... \u03c0 ... );","title":"Syntax"},{"location":"abstract/const/pi/#example","text":"The following function returns e: add_funct(calcCircumference)_param(radius) ()_ret()_calc\u27e6[radius]\u00d7(\u03c0+\u03c0)\u27e7; ; me_msg()_funct(calcCircumference, )_arg(1); // 6.283185307179586","title":"Example"},{"location":"abstract/const/pi/#references","text":"Mathematical constants: e ; ln2 ; ln10 ; ln10e ;","title":"References"},{"location":"abstract/dt/circle/","text":"Circle (property) A circ is a property to represent the two-dimensional geometric circle shape. It has a lengthened syntax of circle . flowchart LR shape(shape) --> circle([circle]) Circle Hierarchy Declaration The default declaration of the circ (or lengthened circle ) object is to use the add_ verb and provide a moniker . Multiple circle s are declared using a coma-separated list of moniker s. The circ object can also be declared by casting shape with {circ} (or {circle} type ). add_circ( moniker ); add_circle( moniker ); add_circ( moniker1 , moniker2 , ... ); add_shape({circ}, moniker ); It is common with the circ object to provide a radius at declaration. When providing a radius inside the declaration of a circ , providing the unit is optional. If the unit declaration is omitted, the caller and callee will revert to their friendship (mutual understanding) with each other. A radius can also be assigned by appending with a proceeding _radius posit. add_circ( moniker , radius ); add_circ( moniker ,\u276c unit \u276d, radius ); add_circ( moniker ,\u276c unit \u276d,[ radius_variable_moniker ]); add_circ( moniker )_radius( radius ); Referencing Referencing a circ object is achieved with the with verb, or the shortened ( circle_moniker ) syntax. with_circ( moniker ); with_circle( moniker ); with_circ( moniker1 , moniker2 , ... ); ( circle_moniker ); Assignment Assignments to the circ object are achieved by using proceeding posits. with_circle( moniker )_ <posit> ( ... ); ( circle_moniker )_ <posit> ( ... ); Posits Location posit description API _at( x_lat , y_long ); _at({ map_moniker , x_lat , y_long ); Provides a cartesian coordinate location in the frame of the preceding object (or declared map_moniker ) of the centre of the circle. at Plications posit description API _plicat({ type },???) . plicat _fold( theta_from_x_plane ); Provides a diameter fold along the preceding circ object , through the centre. fold _pleat Provides a tangent fold along the preceding circ object , not through the centre. pleat _crimp Provides a radius fold along the preceding circ object , to the centre. crimp _pucker Provides a fold from a point on the circumference to any point within the preceding circ object . pucker . . <object> _second( second_value ); <object> _sec( second_value ); Some objects allow for an array of seconds. To set an array of seconds, use multiple second posits. Alternatively an array can be used to set seconds in one second posit. <object> _second( {second_value1} )_sec( {second_value2} )_ ... <object> _second([ second_array_moniker ]); <object> _sec([ second_array_moniker ]); Getting To get the reference to the circle object(s) from the proceeding object, use the circ (or lengthened circle ) posit. <object> _circ(); <object> _circle(); For an object with an array of circles, use the index (or shortened, i ) posit to determine which circle in the array you are getting. <object> _circ()_i( index_integer ); <object> _circle()_i( index_integer ); _fold( ) _circ( moniker ) _circ( * moniker * ) ```diego with_map(map1) _circ(poi1)_at(4,3)_r(\u276cm\u276d,0.332) _square(sq1)_cnr(5,7)_cnr(6,8) ; log_console()_(map1)_shape(); // poi1,poi1.sq1 with_map(map2) _circ(poi2)_at(4,3)_r(\u276cm\u276d,0.332) ()_square(sq2)_cnr(5,7)_cnr(6,8); ; log_console()_(map2)_shapes(); // poi2,sq2 with_map(map3) ()_circ(poi3)_at(4,3)_r(\u276cm\u276d,0.332); ()_square(sq3)_cnr(5,7)_cnr(6,8); ; log_console()_(map3)_shapes(); // poi3,sq3 add_wp(wp1)_at({map1},)","title":"Circle (property)"},{"location":"abstract/dt/circle/#circle-property","text":"A circ is a property to represent the two-dimensional geometric circle shape. It has a lengthened syntax of circle . flowchart LR shape(shape) --> circle([circle]) Circle Hierarchy","title":"Circle (property)"},{"location":"abstract/dt/circle/#declaration","text":"The default declaration of the circ (or lengthened circle ) object is to use the add_ verb and provide a moniker . Multiple circle s are declared using a coma-separated list of moniker s. The circ object can also be declared by casting shape with {circ} (or {circle} type ). add_circ( moniker ); add_circle( moniker ); add_circ( moniker1 , moniker2 , ... ); add_shape({circ}, moniker ); It is common with the circ object to provide a radius at declaration. When providing a radius inside the declaration of a circ , providing the unit is optional. If the unit declaration is omitted, the caller and callee will revert to their friendship (mutual understanding) with each other. A radius can also be assigned by appending with a proceeding _radius posit. add_circ( moniker , radius ); add_circ( moniker ,\u276c unit \u276d, radius ); add_circ( moniker ,\u276c unit \u276d,[ radius_variable_moniker ]); add_circ( moniker )_radius( radius );","title":"Declaration"},{"location":"abstract/dt/circle/#referencing","text":"Referencing a circ object is achieved with the with verb, or the shortened ( circle_moniker ) syntax. with_circ( moniker ); with_circle( moniker ); with_circ( moniker1 , moniker2 , ... ); ( circle_moniker );","title":"Referencing"},{"location":"abstract/dt/circle/#assignment","text":"Assignments to the circ object are achieved by using proceeding posits. with_circle( moniker )_ <posit> ( ... ); ( circle_moniker )_ <posit> ( ... );","title":"Assignment"},{"location":"abstract/dt/circle/#posits","text":"","title":"Posits"},{"location":"abstract/dt/circle/#location","text":"posit description API _at( x_lat , y_long ); _at({ map_moniker , x_lat , y_long ); Provides a cartesian coordinate location in the frame of the preceding object (or declared map_moniker ) of the centre of the circle. at","title":"Location"},{"location":"abstract/dt/circle/#plications","text":"posit description API _plicat({ type },???) . plicat _fold( theta_from_x_plane ); Provides a diameter fold along the preceding circ object , through the centre. fold _pleat Provides a tangent fold along the preceding circ object , not through the centre. pleat _crimp Provides a radius fold along the preceding circ object , to the centre. crimp _pucker Provides a fold from a point on the circumference to any point within the preceding circ object . pucker . . <object> _second( second_value ); <object> _sec( second_value ); Some objects allow for an array of seconds. To set an array of seconds, use multiple second posits. Alternatively an array can be used to set seconds in one second posit. <object> _second( {second_value1} )_sec( {second_value2} )_ ... <object> _second([ second_array_moniker ]); <object> _sec([ second_array_moniker ]);","title":"Plications"},{"location":"abstract/dt/circle/#getting","text":"To get the reference to the circle object(s) from the proceeding object, use the circ (or lengthened circle ) posit. <object> _circ(); <object> _circle(); For an object with an array of circles, use the index (or shortened, i ) posit to determine which circle in the array you are getting. <object> _circ()_i( index_integer ); <object> _circle()_i( index_integer ); _fold( ) _circ( moniker ) _circ( * moniker * ) ```diego with_map(map1) _circ(poi1)_at(4,3)_r(\u276cm\u276d,0.332) _square(sq1)_cnr(5,7)_cnr(6,8) ; log_console()_(map1)_shape(); // poi1,poi1.sq1 with_map(map2) _circ(poi2)_at(4,3)_r(\u276cm\u276d,0.332) ()_square(sq2)_cnr(5,7)_cnr(6,8); ; log_console()_(map2)_shapes(); // poi2,sq2 with_map(map3) ()_circ(poi3)_at(4,3)_r(\u276cm\u276d,0.332); ()_square(sq3)_cnr(5,7)_cnr(6,8); ; log_console()_(map3)_shapes(); // poi3,sq3 add_wp(wp1)_at({map1},)","title":"Getting"},{"location":"abstract/dt/cube/","text":"Cube (shape) A cube is a property to represent the three-dimensional geometric cube. flowchart LR shape(shape) --> cube([cube]) Cube Hierarchy","title":"Cube (shape)"},{"location":"abstract/dt/cube/#cube-shape","text":"A cube is a property to represent the three-dimensional geometric cube. flowchart LR shape(shape) --> cube([cube]) Cube Hierarchy","title":"Cube (shape)"},{"location":"abstract/dt/cuboid/","text":"Cuboid (shape)","title":"Cuboid (shape)"},{"location":"abstract/dt/cuboid/#cuboid-shape","text":"","title":"Cuboid (shape)"},{"location":"abstract/dt/datatype/","text":"Datatype (datatype)","title":"Datatype (datatype)"},{"location":"abstract/dt/datatype/#datatype-datatype","text":"","title":"Datatype (datatype)"},{"location":"abstract/dt/dt/","text":"Datatype (statement) The use of curly brackets ( {} ) in Diego represents the datatype of the object. Syntax Curly brackets are used to define datatype in declarations, such as with a var . add_var({ datatype }, moniker ) All primative objects have their datatype counterpart. add_var({str}, moniker ) add_var({int}, moniker ) add_var({double}, moniker ) add_var({float}, moniker ) add_var({real}, moniker ) add_var({bool}, moniker ) add_var({tempor}, moniker ) etc... In declarations, omitting the datatype will imply the {variant} datatype is used. with_array( moniker ) For assignment, initialisation, and referencing, adding a datatype will always cast the datatype. The _dt posit can be used, instead of curly brackets ( {} ). For an omitted datatype at declaration the cast will be from the {variant} datatype. with_ary({ datatype }, moniker ) with_ary( moniker )_dt( datatype ) Curly brackets ( {} ) and the _dt posit can be used with shortened referencing, referenced variables, and, encapsulated variables. ({ datatype }, objmoniker ) ( objmoniker )_dt( datatype ) [{ datatype }, variablemoniker ] [ variablemoniker ]_dt( datatype ) ([{ datatype }, variablemoniker ]) ([ variablemoniker ])_dt( datatype ) Casts can be achieved inside expressions , such as, for example, the calc function. <...> _calc\u27e6[{ datatype }, variablemoniker ]) References Datatype posit _dt Datatype statement in Lexicon See also Unit statement","title":"Datatype (statement)"},{"location":"abstract/dt/dt/#datatype-statement","text":"The use of curly brackets ( {} ) in Diego represents the datatype of the object.","title":"Datatype (statement)"},{"location":"abstract/dt/dt/#syntax","text":"Curly brackets are used to define datatype in declarations, such as with a var . add_var({ datatype }, moniker ) All primative objects have their datatype counterpart. add_var({str}, moniker ) add_var({int}, moniker ) add_var({double}, moniker ) add_var({float}, moniker ) add_var({real}, moniker ) add_var({bool}, moniker ) add_var({tempor}, moniker ) etc... In declarations, omitting the datatype will imply the {variant} datatype is used. with_array( moniker ) For assignment, initialisation, and referencing, adding a datatype will always cast the datatype. The _dt posit can be used, instead of curly brackets ( {} ). For an omitted datatype at declaration the cast will be from the {variant} datatype. with_ary({ datatype }, moniker ) with_ary( moniker )_dt( datatype ) Curly brackets ( {} ) and the _dt posit can be used with shortened referencing, referenced variables, and, encapsulated variables. ({ datatype }, objmoniker ) ( objmoniker )_dt( datatype ) [{ datatype }, variablemoniker ] [ variablemoniker ]_dt( datatype ) ([{ datatype }, variablemoniker ]) ([ variablemoniker ])_dt( datatype ) Casts can be achieved inside expressions , such as, for example, the calc function. <...> _calc\u27e6[{ datatype }, variablemoniker ])","title":"Syntax"},{"location":"abstract/dt/dt/#references","text":"Datatype posit _dt Datatype statement in Lexicon See also Unit statement","title":"References"},{"location":"abstract/dt/plicat/","text":"Plication (property)","title":"Plication (property)"},{"location":"abstract/dt/plicat/#plication-property","text":"","title":"Plication (property)"},{"location":"abstract/dt/pyramid/","text":"Pyramid (shape)","title":"Pyramid (shape)"},{"location":"abstract/dt/pyramid/#pyramid-shape","text":"","title":"Pyramid (shape)"},{"location":"abstract/dt/rect/","text":"Rectangle (shape)","title":"Rectangle (shape)"},{"location":"abstract/dt/rect/#rectangle-shape","text":"","title":"Rectangle (shape)"},{"location":"abstract/dt/square/","text":"Square (shape) A sqr is a property to represent the two-dimensional geometric square shape. It has a lengthened syntax of square . flowchart LR shape(shape) --> square([square]) Circle Hierarchy Declaration The default declaration of the circ (or lengthened circle ) object is to use the add_ verb and provide a moniker . Multiple circle s are declared using a coma-separated list of moniker s. The circ object can also be declared by casting shape with {circ} (or {circle} type ). add_circ( moniker ); add_circle( moniker ); add_circ( moniker1 , moniker2 , ... ); add_shape({circ}, moniker ); It is common with the circ object to provide a radius at declaration. When providing a radius inside the declaration of a circ , providing the unit is optional. If the unit declaration is omitted, the caller and callee will revert to their friendship (mutual understanding) with each other. A radius can also be assigned by appending with a proceeding _radius posit. add_circ( moniker , radius ); add_circ( moniker ,\u276c unit \u276d, radius ); add_circ( moniker ,\u276c unit \u276d,[ radius_variable_moniker ]); add_circ( moniker )_radius( radius ); sqr - square shape sq - exponent of 2 sqrt - square root","title":"Square (shape)"},{"location":"abstract/dt/square/#square-shape","text":"A sqr is a property to represent the two-dimensional geometric square shape. It has a lengthened syntax of square . flowchart LR shape(shape) --> square([square]) Circle Hierarchy","title":"Square (shape)"},{"location":"abstract/dt/square/#declaration","text":"The default declaration of the circ (or lengthened circle ) object is to use the add_ verb and provide a moniker . Multiple circle s are declared using a coma-separated list of moniker s. The circ object can also be declared by casting shape with {circ} (or {circle} type ). add_circ( moniker ); add_circle( moniker ); add_circ( moniker1 , moniker2 , ... ); add_shape({circ}, moniker ); It is common with the circ object to provide a radius at declaration. When providing a radius inside the declaration of a circ , providing the unit is optional. If the unit declaration is omitted, the caller and callee will revert to their friendship (mutual understanding) with each other. A radius can also be assigned by appending with a proceeding _radius posit. add_circ( moniker , radius ); add_circ( moniker ,\u276c unit \u276d, radius ); add_circ( moniker ,\u276c unit \u276d,[ radius_variable_moniker ]); add_circ( moniker )_radius( radius ); sqr - square shape sq - exponent of 2 sqrt - square root","title":"Declaration"},{"location":"abstract/dt/tri/","text":"Triangle (shape)","title":"Triangle (shape)"},{"location":"abstract/dt/tri/#triangle-shape","text":"","title":"Triangle (shape)"},{"location":"abstract/dt/variant/","text":"Variant (datatype)","title":"Variant (datatype)"},{"location":"abstract/dt/variant/#variant-datatype","text":"","title":"Variant (datatype)"},{"location":"abstract/flow/for/","text":"For Loop (looper)","title":"For Loop (looper)"},{"location":"abstract/flow/for/#for-loop-looper","text":"","title":"For Loop (looper)"},{"location":"abstract/flow/unless/","text":"Unless (flow) go_robot(alif)_wp(wp1)_unless([camera]=\ud83d\udc08); I heard Mark Rendle take the mickey out of Ruby using unless and I decided, for fun, to include it in Diego. See: https://www.youtube.com/watch?v=vcFBwt1nu2U @ 18:42 Alan Kay smalltak null billion dollar !=! shopping trolley operator \u037e; <\ufe64<\uff1c","title":"Unless (flow)"},{"location":"abstract/flow/unless/#unless-flow","text":"go_robot(alif)_wp(wp1)_unless([camera]=\ud83d\udc08); I heard Mark Rendle take the mickey out of Ruby using unless and I decided, for fun, to include it in Diego. See: https://www.youtube.com/watch?v=vcFBwt1nu2U @ 18:42 Alan Kay smalltak null billion dollar !=! shopping trolley operator \u037e; <\ufe64<\uff1c","title":"Unless (flow)"},{"location":"abstract/funct/abs/","text":"Absolute Value (function) The abs function is the mathematical absolute value or modulus of a real number \\(x\\) ( |\ud835\udc65| ). 'abs' can be used in expressions using the pipe symbols ( || ).","title":"Absolute Value (function)"},{"location":"abstract/funct/abs/#absolute-value-function","text":"The abs function is the mathematical absolute value or modulus of a real number \\(x\\) ( |\ud835\udc65| ). 'abs' can be used in expressions using the pipe symbols ( || ).","title":"Absolute Value (function)"},{"location":"abstract/funct/acos/","text":"Arc Cosine (function) The acos function is the inverted cosine trigonometric function of an angle.","title":"Arc Cosine (function)"},{"location":"abstract/funct/acos/#arc-cosine-function","text":"The acos function is the inverted cosine trigonometric function of an angle.","title":"Arc Cosine (function)"},{"location":"abstract/funct/calc/","text":"Calculation (expression) The calc expressive object provides a numeric output using a variety of numeric related expressions. Declaration Although the most common use of the calc expressive object is via a posit, it can be declared using the add_ verb (or shortened +_ ). Since the calc object is expressive the expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ) can be used directly, i.e. in place of the brackets ( () ). Multiple calc s are declared using a coma-separated list of moniker s. If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_calc( moniker ); +_calc( moniker1 , moniker2 , ... ); +_calc\u27e6 expression \u27e7; +_calc(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_calc( moniker ,\u27e6 expression \u27e7); +_calc( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); The common declaration of the calc object is via posit syntax. <object> _calc( moniker ); <object> _calc( moniker1 , moniker2 , ... ); <object> _calc\u27e6 expression \u27e7; <object> _calc(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); <object> _calc( moniker ,\u27e6 expression \u27e7); <object> _calc( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); Referencing Referencing a calc object is achieved with the with verb (or shortened >_ ), or the shortened ( calculation_moniker ) syntax. For inside expressions use square brackets ( [] ) as in [ stacle_moniker ] . with_calc( moniker ); >_calc( moniker ); ( calculation_moniker ); \u27e6 ... [ calculation_moniker ] ... \u27e7 Assignment Only other expressions can be assigned to the calc object . with_calc(\u27e6 moniker \u27e7, expression ); (\u27e6 calculation_moniker \u27e7, expression ); _format _unit() Typing Casting Posits Operators Arithmetic Operators _calc\u27e6 ... + ... \u27e7; _calc\u27e6 ... - ... \u27e7; _calc\u27e6 ... * ... \u27e7; _calc\u27e6 ... \u00d7 ... \u27e7; _calc\u27e6 ... / ... \u27e7; _calc\u27e6 ... \u00f7 ... \u27e7; _calc\u27e6 ... % ... \u27e7; _calc\u27e6 ... \ud835\udc26 ... \u27e7; _calc\u27e6 ... \ud835\udc26( sub_expression ) ... \u27e7; _calc\u27e6 ... \ud835\udc26\ud835\udc28\ud835\udc1d( sub_expression ) ... \u27e7;","title":"Calculation (expression)"},{"location":"abstract/funct/calc/#calculation-expression","text":"The calc expressive object provides a numeric output using a variety of numeric related expressions.","title":"Calculation (expression)"},{"location":"abstract/funct/calc/#declaration","text":"Although the most common use of the calc expressive object is via a posit, it can be declared using the add_ verb (or shortened +_ ). Since the calc object is expressive the expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ) can be used directly, i.e. in place of the brackets ( () ). Multiple calc s are declared using a coma-separated list of moniker s. If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_calc( moniker ); +_calc( moniker1 , moniker2 , ... ); +_calc\u27e6 expression \u27e7; +_calc(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_calc( moniker ,\u27e6 expression \u27e7); +_calc( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); The common declaration of the calc object is via posit syntax. <object> _calc( moniker ); <object> _calc( moniker1 , moniker2 , ... ); <object> _calc\u27e6 expression \u27e7; <object> _calc(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); <object> _calc( moniker ,\u27e6 expression \u27e7); <object> _calc( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7);","title":"Declaration"},{"location":"abstract/funct/calc/#referencing","text":"Referencing a calc object is achieved with the with verb (or shortened >_ ), or the shortened ( calculation_moniker ) syntax. For inside expressions use square brackets ( [] ) as in [ stacle_moniker ] . with_calc( moniker ); >_calc( moniker ); ( calculation_moniker ); \u27e6 ... [ calculation_moniker ] ... \u27e7","title":"Referencing"},{"location":"abstract/funct/calc/#assignment","text":"Only other expressions can be assigned to the calc object . with_calc(\u27e6 moniker \u27e7, expression ); (\u27e6 calculation_moniker \u27e7, expression ); _format _unit()","title":"Assignment"},{"location":"abstract/funct/calc/#typing","text":"","title":"Typing"},{"location":"abstract/funct/calc/#casting","text":"","title":"Casting"},{"location":"abstract/funct/calc/#posits","text":"","title":"Posits"},{"location":"abstract/funct/calc/#operators","text":"","title":"Operators"},{"location":"abstract/funct/calc/#arithmetic-operators","text":"_calc\u27e6 ... + ... \u27e7; _calc\u27e6 ... - ... \u27e7; _calc\u27e6 ... * ... \u27e7; _calc\u27e6 ... \u00d7 ... \u27e7; _calc\u27e6 ... / ... \u27e7; _calc\u27e6 ... \u00f7 ... \u27e7; _calc\u27e6 ... % ... \u27e7; _calc\u27e6 ... \ud835\udc26 ... \u27e7; _calc\u27e6 ... \ud835\udc26( sub_expression ) ... \u27e7; _calc\u27e6 ... \ud835\udc26\ud835\udc28\ud835\udc1d( sub_expression ) ... \u27e7;","title":"Arithmetic Operators"},{"location":"abstract/funct/dt/","text":"Datatype (function)","title":"Datatype (function)"},{"location":"abstract/funct/dt/#datatype-function","text":"","title":"Datatype (function)"},{"location":"abstract/funct/equals/","text":"Equals (function) A logical open gate function for boolean or twinned expressions. The equals function is the transverse of not function. Syntax euals can be used as its own expression posit ( _equals ) or as an operator inside another expression posit, using the equals symbol ( = ). <...> _equals( expression ); <...> _ <expression_posit> ( ... = ... ); The is operator ( = ), can be used inside its posit equals , but this counter-productive to the function of the logical open gate, however, it can be achieved. <...> _equals( ... = ... ); Example add_bool(bool1); log_console()_valueof()_equals([bool1]); // undefined with_bool(bool1)_v(false); log_console()_valueof()_equals\u27e6\u27e7_bool(bool1); // true log_console()_valueof()_equals\u27e6[bool1]\u27e7; // true log_console()_valueof()_calc\u27e6=[bool1]\u27e7; // true","title":"Equals (function)"},{"location":"abstract/funct/equals/#equals-function","text":"A logical open gate function for boolean or twinned expressions. The equals function is the transverse of not function.","title":"Equals (function)"},{"location":"abstract/funct/equals/#syntax","text":"euals can be used as its own expression posit ( _equals ) or as an operator inside another expression posit, using the equals symbol ( = ). <...> _equals( expression ); <...> _ <expression_posit> ( ... = ... ); The is operator ( = ), can be used inside its posit equals , but this counter-productive to the function of the logical open gate, however, it can be achieved. <...> _equals( ... = ... );","title":"Syntax"},{"location":"abstract/funct/equals/#example","text":"add_bool(bool1); log_console()_valueof()_equals([bool1]); // undefined with_bool(bool1)_v(false); log_console()_valueof()_equals\u27e6\u27e7_bool(bool1); // true log_console()_valueof()_equals\u27e6[bool1]\u27e7; // true log_console()_valueof()_calc\u27e6=[bool1]\u27e7; // true","title":"Example"},{"location":"abstract/funct/false/","text":"False (function)","title":"False (function)"},{"location":"abstract/funct/false/#false-function","text":"","title":"False (function)"},{"location":"abstract/funct/fix/","text":"Fixed Points (method)","title":"Fixed Points (method)"},{"location":"abstract/funct/fix/#fixed-points-method","text":"","title":"Fixed Points (method)"},{"location":"abstract/funct/is/","text":"Is (function) A logical open gate function for expressions other than boolean or twinned expressions. The is function is the sibling functionality of equals function. Syntax is can be used as its own expression posit ( _is ) or as an operator inside another expression posit, using either: the exclamation mark ( ! ); or, the 'not tilde' symbol ( \u2241 ). <...> _is( expression ); <...> _equals( expression ); <...> _ <expression_posit> ( ... = ... ); The is operator ( = ), can be used inside its posit not , but this counter-productive to the function of the logical NOT gate, however, it can be achieved. <...> _is( ... = ... ); <...> _equals( ... = ... ); Example add_bool(bool1); log_console()_valueof()_not([bool1]); // undefined with_bool(bool1)_v(false); log_console()_valueof()_not()_bool(bool1); // true log_console()_valueof()_not([bool1]); // true log_console()_valueof()_calc(![bool1]); // true log_console()_valueof()_calc(\u2241[bool1]); // true","title":"Is (function)"},{"location":"abstract/funct/is/#is-function","text":"A logical open gate function for expressions other than boolean or twinned expressions. The is function is the sibling functionality of equals function.","title":"Is (function)"},{"location":"abstract/funct/is/#syntax","text":"is can be used as its own expression posit ( _is ) or as an operator inside another expression posit, using either: the exclamation mark ( ! ); or, the 'not tilde' symbol ( \u2241 ). <...> _is( expression ); <...> _equals( expression ); <...> _ <expression_posit> ( ... = ... ); The is operator ( = ), can be used inside its posit not , but this counter-productive to the function of the logical NOT gate, however, it can be achieved. <...> _is( ... = ... ); <...> _equals( ... = ... );","title":"Syntax"},{"location":"abstract/funct/is/#example","text":"add_bool(bool1); log_console()_valueof()_not([bool1]); // undefined with_bool(bool1)_v(false); log_console()_valueof()_not()_bool(bool1); // true log_console()_valueof()_not([bool1]); // true log_console()_valueof()_calc(![bool1]); // true log_console()_valueof()_calc(\u2241[bool1]); // true","title":"Example"},{"location":"abstract/funct/json/","text":"JavaScript Object Notation (function)","title":"JavaScript Object Notation (function)"},{"location":"abstract/funct/json/#javascript-object-notation-function","text":"","title":"JavaScript Object Notation (function)"},{"location":"abstract/funct/length/","text":"Length (function)","title":"Length (function)"},{"location":"abstract/funct/length/#length-function","text":"","title":"Length (function)"},{"location":"abstract/funct/ln/","text":"Natural logarithm (function) Provides the natural logarithm (in base e ) of a number. Syntax To provide a the natural logarithm of a number use the ln posit or \u33d2 in expressions. _ln( numeric ) <expression_posit> ( ... \u33d2( numeric ) ... ); _ln([ variable_name ]) Example The following function returns e: add_funct(getNapier)_param(dp)_ret()_e([dp]); me_msg()_funct(getNapier)_param(15); // 2.718281828459045 References","title":"Natural logarithm (function)"},{"location":"abstract/funct/ln/#natural-logarithm-function","text":"Provides the natural logarithm (in base e ) of a number.","title":"Natural logarithm (function)"},{"location":"abstract/funct/ln/#syntax","text":"To provide a the natural logarithm of a number use the ln posit or \u33d2 in expressions. _ln( numeric ) <expression_posit> ( ... \u33d2( numeric ) ... ); _ln([ variable_name ])","title":"Syntax"},{"location":"abstract/funct/ln/#example","text":"The following function returns e: add_funct(getNapier)_param(dp)_ret()_e([dp]); me_msg()_funct(getNapier)_param(15); // 2.718281828459045","title":"Example"},{"location":"abstract/funct/ln/#references","text":"","title":"References"},{"location":"abstract/funct/ln2/","text":"Natural Logarithm of 2 (constant)","title":"Natural Logarithm of 2 (constant)"},{"location":"abstract/funct/ln2/#natural-logarithm-of-2-constant","text":"","title":"Natural Logarithm of 2 (constant)"},{"location":"abstract/funct/not/","text":"Not (function) A logical NOT gate function for boolean or twinned expressions. not is the transverse of equals function. Syntax not can be used as its own expression posit ( _not ) or as an operator inside another expression posit, using either: the exclamation mark ( ! ); or, the 'not tilde' symbol ( \u2241 ). <...> _not( expression ); <...> _ <expression_posit> ( ... ! ... ); <...> _ <expression_posit> ( ... \u2241 ... ); The not operator ( ! or \u2241 ), can be used inside its posit not , but this counter-productive to the function of the logical NOT gate, however, it can be achieved. <...> _not( ... ! ... ); <...> _not( ... \u2241 ... ); Example add_bool(bool1); log_console()_valueof()_not([bool1]); // undefined with_bool(bool1)_v(false); log_console()_valueof()_not()_bool(bool1); // true log_console()_valueof()_not([bool1]); // true log_console()_valueof()_calc(![bool1]); // true log_console()_valueof()_calc(\u2241[bool1]); // true","title":"Not (function)"},{"location":"abstract/funct/not/#not-function","text":"A logical NOT gate function for boolean or twinned expressions. not is the transverse of equals function.","title":"Not (function)"},{"location":"abstract/funct/not/#syntax","text":"not can be used as its own expression posit ( _not ) or as an operator inside another expression posit, using either: the exclamation mark ( ! ); or, the 'not tilde' symbol ( \u2241 ). <...> _not( expression ); <...> _ <expression_posit> ( ... ! ... ); <...> _ <expression_posit> ( ... \u2241 ... ); The not operator ( ! or \u2241 ), can be used inside its posit not , but this counter-productive to the function of the logical NOT gate, however, it can be achieved. <...> _not( ... ! ... ); <...> _not( ... \u2241 ... );","title":"Syntax"},{"location":"abstract/funct/not/#example","text":"add_bool(bool1); log_console()_valueof()_not([bool1]); // undefined with_bool(bool1)_v(false); log_console()_valueof()_not()_bool(bool1); // true log_console()_valueof()_not([bool1]); // true log_console()_valueof()_calc(![bool1]); // true log_console()_valueof()_calc(\u2241[bool1]); // true","title":"Example"},{"location":"abstract/funct/now/","text":"Now (function)","title":"Now (function)"},{"location":"abstract/funct/now/#now-function","text":"","title":"Now (function)"},{"location":"abstract/funct/parse/","text":"Parse (function)","title":"Parse (function)"},{"location":"abstract/funct/parse/#parse-function","text":"","title":"Parse (function)"},{"location":"abstract/funct/ret/","text":"Return (function) The return function ( return , or shortened as ret ) returns the output of the proceeding object to the preceding object . Syntax The ret function comes in two forms: an expression, returning the result of the expression (and any porceeding object output) and returning the result to the preceding object . The other form is as a gate passing the result of the proceeding objects to the preceding objects , with no interfering expression. <object> _ret( expression ); <object> _ret( expression )_ .... ; <object> _ret()_ .... ; Example The ret function is an expression function. When left parameter-less the ret function will act as gate passing the result of the proceeding objects to the preceding objects . add_funct({int},addplus)_param({int},a,b)_ret()_param(a)_plus(b); add_funct({int},addcalc)_param({int},a,b)_ret()_calc([a]+[b]); add_funct({int},addret)_param({int},a,b)_ret([a]+[b]); add_funct({int},addvar)_param({int},a,b) add_var({int},return)_calc([a]+[b]); ()_ret([return]); ; int result = 0; // Declare and initialize an integer. double coefficient = 10.8; // Declare and initialize a floating // point value. auto name = \"Lady G.\"; // Declare a variable and let compiler // deduce the type. auto address; // error. Compiler cannot deduce a type // without an intializing value. age = 12; // error. Variable declaration must // specify a type or use auto! result = \"Kenny G.\"; // error. Can\u2019t assign text to an int. string result = \"zero\"; // error. Can\u2019t redefine a variable with // new type. int maxValue; // Not recommended! maxValue contains // garbage bits until it is initialized. {int}(result)_(0); // Declare and initialize an integer. {double}(coefficient)_(10.8);// Declare and initialize a floating // point value. {}(name)_(Lady G.); // Declare a variable and let compiler // deduce the type. {}(address); // error. Compiler cannot deduce a type // without an intializing value. {}(age)_(12); // error. Variable declaration must // specify a type or use auto! result = \"Kenny G.\"; // error. Can\u2019t assign text to an int. string result = \"zero\"; // error. Can\u2019t redefine a variable with // new type. int maxValue; // Not recommended! maxValue contains // garbage bits until it is initialized.","title":"Return (function)"},{"location":"abstract/funct/ret/#return-function","text":"The return function ( return , or shortened as ret ) returns the output of the proceeding object to the preceding object .","title":"Return (function)"},{"location":"abstract/funct/ret/#syntax","text":"The ret function comes in two forms: an expression, returning the result of the expression (and any porceeding object output) and returning the result to the preceding object . The other form is as a gate passing the result of the proceeding objects to the preceding objects , with no interfering expression. <object> _ret( expression ); <object> _ret( expression )_ .... ; <object> _ret()_ .... ;","title":"Syntax"},{"location":"abstract/funct/ret/#example","text":"The ret function is an expression function. When left parameter-less the ret function will act as gate passing the result of the proceeding objects to the preceding objects . add_funct({int},addplus)_param({int},a,b)_ret()_param(a)_plus(b); add_funct({int},addcalc)_param({int},a,b)_ret()_calc([a]+[b]); add_funct({int},addret)_param({int},a,b)_ret([a]+[b]); add_funct({int},addvar)_param({int},a,b) add_var({int},return)_calc([a]+[b]); ()_ret([return]); ; int result = 0; // Declare and initialize an integer. double coefficient = 10.8; // Declare and initialize a floating // point value. auto name = \"Lady G.\"; // Declare a variable and let compiler // deduce the type. auto address; // error. Compiler cannot deduce a type // without an intializing value. age = 12; // error. Variable declaration must // specify a type or use auto! result = \"Kenny G.\"; // error. Can\u2019t assign text to an int. string result = \"zero\"; // error. Can\u2019t redefine a variable with // new type. int maxValue; // Not recommended! maxValue contains // garbage bits until it is initialized. {int}(result)_(0); // Declare and initialize an integer. {double}(coefficient)_(10.8);// Declare and initialize a floating // point value. {}(name)_(Lady G.); // Declare a variable and let compiler // deduce the type. {}(address); // error. Compiler cannot deduce a type // without an intializing value. {}(age)_(12); // error. Variable declaration must // specify a type or use auto! result = \"Kenny G.\"; // error. Can\u2019t assign text to an int. string result = \"zero\"; // error. Can\u2019t redefine a variable with // new type. int maxValue; // Not recommended! maxValue contains // garbage bits until it is initialized.","title":"Example"},{"location":"abstract/funct/slice/","text":"Slice _slice() _sliceto()","title":"Slice"},{"location":"abstract/funct/slice/#slice","text":"_slice() _sliceto()","title":"Slice"},{"location":"abstract/funct/sql/","text":"Structured Query Language (function) use_me(); add_list(accts)_sql(SELECT CreatedById, CreatedDate, LastModifiedById, LastModifiedDate, BillingCity FROM Account WHERE Name='Acme' OR Name='Salesforce'); add_ary({id},acctCreator)_list(accts)_ofsql([CreatedById]); add_list(creators)_sql(SELECT FirstName, LastName FROM User WHERE Id IN:[acctCreator] ); log_console(List of account creators: [])_list(creators)_calc([FirstName]&' '&[LastName]); // List of account creators: James Bond, Sherlock Holmes, Oliver Twist reset_me();","title":"Structured Query Language (function)"},{"location":"abstract/funct/sql/#structured-query-language-function","text":"use_me(); add_list(accts)_sql(SELECT CreatedById, CreatedDate, LastModifiedById, LastModifiedDate, BillingCity FROM Account WHERE Name='Acme' OR Name='Salesforce'); add_ary({id},acctCreator)_list(accts)_ofsql([CreatedById]); add_list(creators)_sql(SELECT FirstName, LastName FROM User WHERE Id IN:[acctCreator] ); log_console(List of account creators: [])_list(creators)_calc([FirstName]&' '&[LastName]); // List of account creators: James Bond, Sherlock Holmes, Oliver Twist reset_me();","title":"Structured Query Language (function)"},{"location":"abstract/funct/stringify/","text":"stringify (function)","title":"stringify (function)"},{"location":"abstract/funct/stringify/#stringify-function","text":"","title":"stringify (function)"},{"location":"abstract/funct/true/","text":"True (function)","title":"True (function)"},{"location":"abstract/funct/true/#true-function","text":"","title":"True (function)"},{"location":"abstract/funct/value/","text":"Value Data Management data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":"Value"},{"location":"abstract/funct/value/#value","text":"","title":"Value"},{"location":"abstract/funct/value/#data-management","text":"data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":" Data Management"},{"location":"abstract/funct/xyz/","text":"XYZ (function) | _x() , _x( x ) _y() , _y( y ) _z() , _z( z ) | Gets and sets the x, y, and z coordinates, repsectively| xyz |","title":"XYZ (function)"},{"location":"abstract/funct/xyz/#xyz-function","text":"| _x() , _x( x ) _y() , _y( y ) _z() , _z( z ) | Gets and sets the x, y, and z coordinates, repsectively| xyz |","title":"XYZ (function)"},{"location":"abstract/funct/zdt/","text":"Zoned Date Time (function)","title":"Zoned Date Time (function)"},{"location":"abstract/funct/zdt/#zoned-date-time-function","text":"","title":"Zoned Date Time (function)"},{"location":"abstract/meta/verb/","text":"Verb","title":"Verb"},{"location":"abstract/meta/verb/#verb","text":"","title":"Verb"},{"location":"abstract/obj/arran/","text":"Arrangement (object) An associative data type, as an extension of an array with negative length acting as a history of plucked or popped elements. Sytnax The default declaration of the arran gement object is to at least provide a moniker . With no datatype provided for values the {variant} datatype is implied. The datatype of the values can be declared at declaration. arran has are several shortened terms, arn , arrangem , arrangement , which can be used freely and interchangabily. add_arran( moniker ) add_arn( moniker ) add_arrangem( moniker ) add_arrangement({ valdt }, moniker ) Posits posit description _arity() Provides the number of elements in full extend of the arran, both negative and positive _at( index ) _at() Provides the element at index index _concat() _concatenate() Concatenates proceeding objects with proceeding objects _concat( arymoniker ) _concatenate( arymoniker ) Merges array arymoniker with preceeding objects ( arrays ) _concat( arymoniker1 , arymoniker1 , ... ) _concatenate( arymoniker1 , arymoniker1 , ... ) Merges arrays arymonikers with preceeding objects ( arrays ) _copyin( targetindex ) Shallow copies all elements of the preceeding array into the same array from index without modifying its length _copyin( targetindex , startindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _copyin( targetindex ) _copyin( targetindex , startindex ) _copyin( targetindex , startindex , endindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _dt({ datatype ) Cast / convert proceeding objects ( arrays ) add <...> _len( length ) add <...> _length( length ) Sets the number of elements in the array at declaration _len( length ) _length( length ) Destructively resizes the array _lens( arymoniker ) Declares a sub-view block of array called moniker _oflens( length ) Sets a specifc sub-view block of the array to length _oflens( startindex , endindex ) Sets a specific sub-view block of the array from startindex to endindex _todict() _todict( moniker ) Provides a new dict object from preceeding array uses a numeric iterator add_arran({int},arran1)_v(1,2,3,4,5,6,7,8); log_console()_(arran1); // 1,2,3,4,5,6,7,8 log_console()_(arran1)_len(); // 8 (arran1)_pop(); log_console()_(arran1); // 8|1,2,3,4,5,6,7 log_console()_(arran1)_len(); // 7 log_console()_(arran1)_arity(); // 8 (arran1)_pop()_pop()_pip(); log_console()_(arran1); // 7,8|1,2,3,4,5,6 add_arrangem() add","title":"Arrangement (object)"},{"location":"abstract/obj/arran/#arrangement-object","text":"An associative data type, as an extension of an array with negative length acting as a history of plucked or popped elements.","title":"Arrangement (object)"},{"location":"abstract/obj/arran/#sytnax","text":"The default declaration of the arran gement object is to at least provide a moniker . With no datatype provided for values the {variant} datatype is implied. The datatype of the values can be declared at declaration. arran has are several shortened terms, arn , arrangem , arrangement , which can be used freely and interchangabily. add_arran( moniker ) add_arn( moniker ) add_arrangem( moniker ) add_arrangement({ valdt }, moniker )","title":"Sytnax"},{"location":"abstract/obj/arran/#posits","text":"posit description _arity() Provides the number of elements in full extend of the arran, both negative and positive _at( index ) _at() Provides the element at index index _concat() _concatenate() Concatenates proceeding objects with proceeding objects _concat( arymoniker ) _concatenate( arymoniker ) Merges array arymoniker with preceeding objects ( arrays ) _concat( arymoniker1 , arymoniker1 , ... ) _concatenate( arymoniker1 , arymoniker1 , ... ) Merges arrays arymonikers with preceeding objects ( arrays ) _copyin( targetindex ) Shallow copies all elements of the preceeding array into the same array from index without modifying its length _copyin( targetindex , startindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _copyin( targetindex ) _copyin( targetindex , startindex ) _copyin( targetindex , startindex , endindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _dt({ datatype ) Cast / convert proceeding objects ( arrays ) add <...> _len( length ) add <...> _length( length ) Sets the number of elements in the array at declaration _len( length ) _length( length ) Destructively resizes the array _lens( arymoniker ) Declares a sub-view block of array called moniker _oflens( length ) Sets a specifc sub-view block of the array to length _oflens( startindex , endindex ) Sets a specific sub-view block of the array from startindex to endindex _todict() _todict( moniker ) Provides a new dict object from preceeding array uses a numeric iterator add_arran({int},arran1)_v(1,2,3,4,5,6,7,8); log_console()_(arran1); // 1,2,3,4,5,6,7,8 log_console()_(arran1)_len(); // 8 (arran1)_pop(); log_console()_(arran1); // 8|1,2,3,4,5,6,7 log_console()_(arran1)_len(); // 7 log_console()_(arran1)_arity(); // 8 (arran1)_pop()_pop()_pip(); log_console()_(arran1); // 7,8|1,2,3,4,5,6 add_arrangem() add","title":"Posits"},{"location":"abstract/obj/ary/","text":"Array (object) The array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations. Sytnax The default declaration of the arrat object is to at least provide a moniker . With no datatype provided, the {variant} datatype is implied. The shortened form ary can be used. add_ary( moniker ) add_array( moniker ) add_ary({ datatype }, moniker ) All arrays are dynamic and mutable, they can be declared with a fixed length but this is not enforced. Any value given with no value will return as undefined when referenced. add_ary( moniker )_len( length ) Arrays tend to be based from zero, however, this all depends upon the thingy's upbringing, set with set_numbase( numbase ) . The caller can declare the number base. add_ary( moniker )_base( numbase ); Assignment of array is allowed at declaration, initialisation, and post-declaration. The _value , and, _set posits are used for assignment, their equivalent syntax, _values , _v are identical and can be used freely and interchangeably. The set_ verb can also be used to the same effect as the _set posit. add_ary( moniker )_value( val ) with_array( moniker )_values( val1 , val2 , ... ) ( arraymoniker )_set( val1 , val2 , ... ) set_ary( moniker , val1 , val2 , ... ) Values can be assigned at different indexes using the _at posit. with_ary( moniker )_at( index )_v( val ) Arrays have various properties and methods... Posits method description _arity() Provides the number of elements in the array _at( index ) _at() Provides the element at index index _concat() _concatenate() Merges proceeding objects ( arrays ) with proceeding objects ( arrays ) _concat( arymoniker ) _concatenate( arymoniker ) Merges array arymoniker with preceeding objects ( arrays ) _concat( arymoniker1 , arymoniker1 , ... ) _concatenate( arymoniker1 , arymoniker1 , ... ) Merges arrays arymonikers with preceeding objects ( arrays ) _copyin( targetindex ) Shallow copies all elements of the preceeding array into the same array from index without modifying its length _copyin( targetindex , startindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _copyin( targetindex ) _copyin( targetindex , startindex ) _copyin( targetindex , startindex , endindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _dt({ datatype ) Cast / convert proceeding objects ( arrays ) add <...> _len( length ) add <...> _length( length ) Sets the number of elements in the array at declaration _len( length ) _length( length ) Destructively resizes the array _lens( arymoniker ) Declares a sub-view block of array called moniker _oflens( length ) Sets a specifc sub-view block of the array to length _oflens( startindex , endindex ) Sets a specific sub-view block of the array from startindex to endindex _todict() _todict( moniker ) Provides a new dict object from preceeding array uses a numeric iterator add_check(isBelowThreshold)_param()_test([]<30); add_check(Are) add_ary(array1)_v(1, 30, 39, 29, 10, 13); log_console()_ary(array1)_every(isBelowThreshold); // Create a new dynamic array with length zero, variant and/or mixed datatypes add_array(myEmptyArray); // Create a new dynamic array with length zero, of integers with no mixed datatypes add_array({int},myIntegerArray); // Create a new fixed-length array with length 5 add_array(myFiveArray)_len(5)_base(0); // The value base '_base(0)' is usually defaulted to zero, depends upon thing. // Create an array with 2 members (length is 2) add_ary(myStringArray)_value(Item1,Item2); // '_array' can be shortened to '_ary' // Assign a value to member [2] with_ary(myChangeArray)_at(2)_v(5); // '_value' can be shortened to '_v' // Add a member to an array with the push function (defaulted at end), length increased by one [myExpandedArray]_push()_v(9); // 'with_ary(...)' can be shortened to '[...]' [myExpandedArray]_append()_v(9); // Add a member to an array with the push function (at a location), length increased by one [myExpandedArray]_pushat(3)_v(8); // Remove a member to an array with the pop function (defaulted at end), length reduced by one [myExpandedArray]_pop(); // Remove a member to an array with the pop function (at a location), length reduced by one [myExpandedArray]_popat(3); // Swap a member to an array with the swap function [myExpandedArray]_swapfrom(2)_swapto(6); [myExpandedArray]_swap(2, 6); // Rectiline a member in an array [MyCaterpillarArray]_rectilat(4)_rectilup(2); [MyCaterpillarArray]_rectilup(4, 2); [MyCaterpillarArray]_rectilat(5)_rectildown(3); [MyCaterpillarArray]_rectildown(5, 3); // Null a member to an array with the pluck function (defaulted at end) [myExpandedArray]_pluck(); // Null a member to an array with the pluck function (at a location) [myExpandedArray]_pluckat(3); // Get size of array [mySizableArray]_size(); // '_len()' can also be used [myMultidimensialArray]_size() // Retrieve an element of an array [myArray]_at(3); [myArray]_first(); // Retrieve first element in an array [myArray]_last(); // Retrieve last element in an array // More transformations of arrays (like append, union, intersection) are available // For multi-dimensional array use the 'matrix' object set_matrixorder(row-major); // set major order as row- or column-major order depends on the thing set_handrule(right); // set hand-rule, most things will use right hand-rule // Create a new dynamic two-dimensional array with length zero, variant and/or mixed datatypes add_matrix(myMatrix)_dim(2); // Create a new dynamic three-dimensional array with length zero, of integers with no mixed datatypes add_matrix({int}my3DEmptyMatrix)_dim(3); // Convert an array to a matrix by adding a new dimension with length zero, variant and/or mixed datatypes with_array(MyConvertedArray)_dim(); // Should now use '_matrix' object rather than '_array' with_array(MyConvertedArray)_dim(3); // Add three dimensions to array, should now use '_matrix' object rather than '_array' // Create a new fixed-length traditional (2D) matrix with 5 rows and 4 columns add_matrix(myMatrix)_rows(5)_columns(4); add_matirx(myMatrix)_subs(5, 4); // check or set major order first // Create a new fixed-length mutil-dimensional matrix with 5 rows, 4 columns, 6 subscripts, and 8 subscripts add_matrix(myMatrix)_rows(5)_columns(4)_subs(6)_subs(8); add_mat(myMatrix)_subs(5, 4, 6, 8); // check or set major order first, '_matrix' can be shortened to 'mat' // Create a 4 x 4 identiy matrix: add_mat(myIdentityMatrix)_subs(4, 4)_identity(); // ...or... add_mat(myMorphedMatrix)_subs(4, 4) with_mat(myMorphedMatrix)_trans(morph)_identity(); // More transformations available // Assign a value to member [2,4] with_mat(myMatrix)_row(2)_col(4)_value(5); // ...or... with_mat(myMatrix)_at(2, 4)_v(5); // check or set major order first // Add a member(s) to a matrix using push functions is available // Remove a member(s) from a matrix with the pop functions is available // Swap a member(s) in a matrix with the swap functions is available // Rectiline a single member in a three-dimensional matrix [MyWobbleMatrix]_rectilat()_row(3)_col(3)_sub(3)_rectilto()_row(-1)_col(1)_sub(0); // ...or... [MyWobbleMatrix]_rectilat(3, 3, 3)_rectilto(-1, 1, 0); // check or set major order first, ...or... [MyWobbleMatrix]_rectilat(3, 3, 3)_rectilleft(1)_rectilup(1); / check or set hand-rule, ...or... // Also 'crab', 'elevate', 'slide' and 'pump' movements are available // Also 'row', 'pitch', and 'yaw' movements are available // Also, quaternions calculations are available // Null a member in a matrix using pluck functions is available // Get size of a matrix mat(mySizableMatrix)_size(); // will return an array of the size() [myMultidimensialArray]_len(); // '_len()' can also be used // Retrieve an element of a matrix [myMatrix]_at(3, 2); [myArray]_first()_atsub(2); // Retrieve first element of a row/column/subscript of a matrix [myArray]_last()_atsub(2); // Retrieve last element of a row/column/subscript of a matrix [myArray]_origin(); // Retrieve first element in a matrix [myArray]_end(); // Retrieve last element in a matrix reset_ns[];","title":"Array (object)"},{"location":"abstract/obj/ary/#array-object","text":"The array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.","title":"Array (object)"},{"location":"abstract/obj/ary/#sytnax","text":"The default declaration of the arrat object is to at least provide a moniker . With no datatype provided, the {variant} datatype is implied. The shortened form ary can be used. add_ary( moniker ) add_array( moniker ) add_ary({ datatype }, moniker ) All arrays are dynamic and mutable, they can be declared with a fixed length but this is not enforced. Any value given with no value will return as undefined when referenced. add_ary( moniker )_len( length ) Arrays tend to be based from zero, however, this all depends upon the thingy's upbringing, set with set_numbase( numbase ) . The caller can declare the number base. add_ary( moniker )_base( numbase ); Assignment of array is allowed at declaration, initialisation, and post-declaration. The _value , and, _set posits are used for assignment, their equivalent syntax, _values , _v are identical and can be used freely and interchangeably. The set_ verb can also be used to the same effect as the _set posit. add_ary( moniker )_value( val ) with_array( moniker )_values( val1 , val2 , ... ) ( arraymoniker )_set( val1 , val2 , ... ) set_ary( moniker , val1 , val2 , ... ) Values can be assigned at different indexes using the _at posit. with_ary( moniker )_at( index )_v( val ) Arrays have various properties and methods...","title":"Sytnax"},{"location":"abstract/obj/ary/#posits","text":"method description _arity() Provides the number of elements in the array _at( index ) _at() Provides the element at index index _concat() _concatenate() Merges proceeding objects ( arrays ) with proceeding objects ( arrays ) _concat( arymoniker ) _concatenate( arymoniker ) Merges array arymoniker with preceeding objects ( arrays ) _concat( arymoniker1 , arymoniker1 , ... ) _concatenate( arymoniker1 , arymoniker1 , ... ) Merges arrays arymonikers with preceeding objects ( arrays ) _copyin( targetindex ) Shallow copies all elements of the preceeding array into the same array from index without modifying its length _copyin( targetindex , startindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _copyin( targetindex ) _copyin( targetindex , startindex ) _copyin( targetindex , startindex , endindex ) Shallow copies part of the preceeding array to another location in the same array without modifying its length _dt({ datatype ) Cast / convert proceeding objects ( arrays ) add <...> _len( length ) add <...> _length( length ) Sets the number of elements in the array at declaration _len( length ) _length( length ) Destructively resizes the array _lens( arymoniker ) Declares a sub-view block of array called moniker _oflens( length ) Sets a specifc sub-view block of the array to length _oflens( startindex , endindex ) Sets a specific sub-view block of the array from startindex to endindex _todict() _todict( moniker ) Provides a new dict object from preceeding array uses a numeric iterator add_check(isBelowThreshold)_param()_test([]<30); add_check(Are) add_ary(array1)_v(1, 30, 39, 29, 10, 13); log_console()_ary(array1)_every(isBelowThreshold); // Create a new dynamic array with length zero, variant and/or mixed datatypes add_array(myEmptyArray); // Create a new dynamic array with length zero, of integers with no mixed datatypes add_array({int},myIntegerArray); // Create a new fixed-length array with length 5 add_array(myFiveArray)_len(5)_base(0); // The value base '_base(0)' is usually defaulted to zero, depends upon thing. // Create an array with 2 members (length is 2) add_ary(myStringArray)_value(Item1,Item2); // '_array' can be shortened to '_ary' // Assign a value to member [2] with_ary(myChangeArray)_at(2)_v(5); // '_value' can be shortened to '_v' // Add a member to an array with the push function (defaulted at end), length increased by one [myExpandedArray]_push()_v(9); // 'with_ary(...)' can be shortened to '[...]' [myExpandedArray]_append()_v(9); // Add a member to an array with the push function (at a location), length increased by one [myExpandedArray]_pushat(3)_v(8); // Remove a member to an array with the pop function (defaulted at end), length reduced by one [myExpandedArray]_pop(); // Remove a member to an array with the pop function (at a location), length reduced by one [myExpandedArray]_popat(3); // Swap a member to an array with the swap function [myExpandedArray]_swapfrom(2)_swapto(6); [myExpandedArray]_swap(2, 6); // Rectiline a member in an array [MyCaterpillarArray]_rectilat(4)_rectilup(2); [MyCaterpillarArray]_rectilup(4, 2); [MyCaterpillarArray]_rectilat(5)_rectildown(3); [MyCaterpillarArray]_rectildown(5, 3); // Null a member to an array with the pluck function (defaulted at end) [myExpandedArray]_pluck(); // Null a member to an array with the pluck function (at a location) [myExpandedArray]_pluckat(3); // Get size of array [mySizableArray]_size(); // '_len()' can also be used [myMultidimensialArray]_size() // Retrieve an element of an array [myArray]_at(3); [myArray]_first(); // Retrieve first element in an array [myArray]_last(); // Retrieve last element in an array // More transformations of arrays (like append, union, intersection) are available // For multi-dimensional array use the 'matrix' object set_matrixorder(row-major); // set major order as row- or column-major order depends on the thing set_handrule(right); // set hand-rule, most things will use right hand-rule // Create a new dynamic two-dimensional array with length zero, variant and/or mixed datatypes add_matrix(myMatrix)_dim(2); // Create a new dynamic three-dimensional array with length zero, of integers with no mixed datatypes add_matrix({int}my3DEmptyMatrix)_dim(3); // Convert an array to a matrix by adding a new dimension with length zero, variant and/or mixed datatypes with_array(MyConvertedArray)_dim(); // Should now use '_matrix' object rather than '_array' with_array(MyConvertedArray)_dim(3); // Add three dimensions to array, should now use '_matrix' object rather than '_array' // Create a new fixed-length traditional (2D) matrix with 5 rows and 4 columns add_matrix(myMatrix)_rows(5)_columns(4); add_matirx(myMatrix)_subs(5, 4); // check or set major order first // Create a new fixed-length mutil-dimensional matrix with 5 rows, 4 columns, 6 subscripts, and 8 subscripts add_matrix(myMatrix)_rows(5)_columns(4)_subs(6)_subs(8); add_mat(myMatrix)_subs(5, 4, 6, 8); // check or set major order first, '_matrix' can be shortened to 'mat' // Create a 4 x 4 identiy matrix: add_mat(myIdentityMatrix)_subs(4, 4)_identity(); // ...or... add_mat(myMorphedMatrix)_subs(4, 4) with_mat(myMorphedMatrix)_trans(morph)_identity(); // More transformations available // Assign a value to member [2,4] with_mat(myMatrix)_row(2)_col(4)_value(5); // ...or... with_mat(myMatrix)_at(2, 4)_v(5); // check or set major order first // Add a member(s) to a matrix using push functions is available // Remove a member(s) from a matrix with the pop functions is available // Swap a member(s) in a matrix with the swap functions is available // Rectiline a single member in a three-dimensional matrix [MyWobbleMatrix]_rectilat()_row(3)_col(3)_sub(3)_rectilto()_row(-1)_col(1)_sub(0); // ...or... [MyWobbleMatrix]_rectilat(3, 3, 3)_rectilto(-1, 1, 0); // check or set major order first, ...or... [MyWobbleMatrix]_rectilat(3, 3, 3)_rectilleft(1)_rectilup(1); / check or set hand-rule, ...or... // Also 'crab', 'elevate', 'slide' and 'pump' movements are available // Also 'row', 'pitch', and 'yaw' movements are available // Also, quaternions calculations are available // Null a member in a matrix using pluck functions is available // Get size of a matrix mat(mySizableMatrix)_size(); // will return an array of the size() [myMultidimensialArray]_len(); // '_len()' can also be used // Retrieve an element of a matrix [myMatrix]_at(3, 2); [myArray]_first()_atsub(2); // Retrieve first element of a row/column/subscript of a matrix [myArray]_last()_atsub(2); // Retrieve last element of a row/column/subscript of a matrix [myArray]_origin(); // Retrieve first element in a matrix [myArray]_end(); // Retrieve last element in a matrix reset_ns[];","title":"Posits"},{"location":"abstract/obj/blob/","text":"Binary Large Object (object) Data Management data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":"Binary Large Object (object)"},{"location":"abstract/obj/blob/#binary-large-object-object","text":"","title":"Binary Large Object (object)"},{"location":"abstract/obj/blob/#data-management","text":"data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":" Data Management"},{"location":"abstract/obj/cal/","text":"Calendar (object)","title":"Calendar (object)"},{"location":"abstract/obj/cal/#calendar-object","text":"","title":"Calendar (object)"},{"location":"abstract/obj/clump/","text":"Clump (object)","title":"Clump (object)"},{"location":"abstract/obj/clump/#clump-object","text":"","title":"Clump (object)"},{"location":"abstract/obj/counter/","text":"Counter (object) use_namespace(diego_sandbox); add_counter(patrol complete)_withinc(++); begin_instruct(border patrol); go_route(border) ? (patrol complete); ? goback_route(border) ? (patrol complete); : err_instruct[]_err(issue on border patrol); ; : err_instruct[]_err(issue on border patrol); ; end_instruct(border patrol); start_instruct(border patrol)_forof(droid1)_you(droid1) ? msg_human(Jim)_counter(patrol complete); : msg_human(Jim)_err(); ; reset_namespace[];","title":"Counter (object)"},{"location":"abstract/obj/counter/#counter-object","text":"use_namespace(diego_sandbox); add_counter(patrol complete)_withinc(++); begin_instruct(border patrol); go_route(border) ? (patrol complete); ? goback_route(border) ? (patrol complete); : err_instruct[]_err(issue on border patrol); ; : err_instruct[]_err(issue on border patrol); ; end_instruct(border patrol); start_instruct(border patrol)_forof(droid1)_you(droid1) ? msg_human(Jim)_counter(patrol complete); : msg_human(Jim)_err(); ; reset_namespace[];","title":"Counter (object)"},{"location":"abstract/obj/datetime/","text":"Datetime (datatype)","title":"Datetime (datatype)"},{"location":"abstract/obj/datetime/#datetime-datatype","text":"","title":"Datetime (datatype)"},{"location":"abstract/obj/declar/","text":"Declaration (of datatype)","title":"Declaration (of datatype)"},{"location":"abstract/obj/declar/#declaration-of-datatype","text":"","title":"Declaration (of datatype)"},{"location":"abstract/obj/deed/","text":"Deed (object) The deed object is a inheritied variable ( var ), a basic one-dimensional data storage object, immutable except for deed owner . Declaration Although the most common use of the deed expression is via a posit, the calc expressive object can be declared. The use of a moniker , is optional, but if used it must be enclosed in moniker brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_deed( moniker ); add_deed( expression ); add_deed(\u27e6 moniker \u27e7,{ datatype }, expression ); <object> _calc( expression ); <object> _calc(\u27e6 moniker \u27e7, expression ); add_deed( moniker ); // robot alif... add_deed({int},deedIntegerA)_v(32); // robot bah... log_console()_deed(deedIntegerA); // 32 with_deed(deedIntegerA)_inc(1); with_deed(deedIntegerA)_err(d3fe,deed `deedIntegerA` only mutable by `{robot}` `alif`); // robot alif... with_deed(deedIntegerA)_inc(1); // robot bah... log_console()_deed(deedIntegerA); // 33","title":"Deed (object)"},{"location":"abstract/obj/deed/#deed-object","text":"The deed object is a inheritied variable ( var ), a basic one-dimensional data storage object, immutable except for deed owner .","title":"Deed (object)"},{"location":"abstract/obj/deed/#declaration","text":"Although the most common use of the deed expression is via a posit, the calc expressive object can be declared. The use of a moniker , is optional, but if used it must be enclosed in moniker brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_deed( moniker ); add_deed( expression ); add_deed(\u27e6 moniker \u27e7,{ datatype }, expression ); <object> _calc( expression ); <object> _calc(\u27e6 moniker \u27e7, expression ); add_deed( moniker ); // robot alif... add_deed({int},deedIntegerA)_v(32); // robot bah... log_console()_deed(deedIntegerA); // 32 with_deed(deedIntegerA)_inc(1); with_deed(deedIntegerA)_err(d3fe,deed `deedIntegerA` only mutable by `{robot}` `alif`); // robot alif... with_deed(deedIntegerA)_inc(1); // robot bah... log_console()_deed(deedIntegerA); // 33","title":"Declaration"},{"location":"abstract/obj/dict/","text":"Dictionary (object) The dict ionary object is an associative data type, which holds key-value pairs. Sometimes called maps in programming languages. The use of \"map\" was discouraged during the development of the Diego language because a map object is an metaphysic object representing a map of an spatial area, learnt by thingies at childhood. Declaration The default declaration of the dict ionary object is to at least provide a moniker . With no datatype for the keys and value the {variant} datatype is implied when key-value pairs are added. The datatype of the keys or the keys-values can be declared at declaration. add_dict( moniker ); add_dict( moniker1 , moniker2 , ... ); add_dictionary( moniker ,{ key_datatype }); +_dict( moniker { key_datatype },{ value_datatype }); Initialisation +_dict( moniker ,\u27e6{ key_value }, value_value \u27e7); +_dict( moniker1 ,\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker2 ,\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker... ,\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7); +_dict( moniker ,{ key_datatype },\u27e6{ key_value }, value_value \u27e7); +_dict( moniker1 { key_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker2 ,{ key_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker... ,{ key_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7); +_dict( moniker ,{ key_datatype },{ value_datatype },\u27e6{ key_value }, value_value \u27e7); +_dict( moniker1 ,{ key_datatype },{ value_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker2 ,{ key_datatype },{ value_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker... ,{ key_datatype },{ value_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7); Assignment Assignment of keys or keys-values is allowed at declaration, initialisation, and post-declaration. The _key , _value , and, _set posits are used for assignment, their equivalent syntax, _keys , _k , _values , _v are identical and can be used freely and interchangeably. The set_ verb can also be used to the same effect as the _set posit. Any value given with no value will return as undefined when referenced. add_dict( moniker )_key( key ) with_dict( moniker )_keys( key1 , key2 , ... ) add_dictionary( moniker )_keys( key1 , key2 , ... )_values( val1 , val2 , ... ) with_dict( moniker )_k( key1 , key2 , ... )_v( val1 , val2 , ... ) ( moniker )_set( key1 , val1 , key2 , val2 , ... ) set_dict( moniker , key1 , val1 , key2 , val2 , ... ) Referencing To reference a dict the _ofkey posit is used. Without the _ofkey posit, the complete dict is returned. The _ofkey posit can accept variables using the [] square brackets to escape variables. with_dict( moniker ) _dict( moniker )_ofkey( key ) ( dictmoniker )_ofkey( key ) with_dictionary( moniker )_ofkey( key , key , ... ) _dict( moniker )_ofkey([ variablename ]) with_dict( moniker )_ofkey([ variablename ]) with_dictionary( moniker )_ofkey([ variablename ],[ variablename ],[ variablename ]) ( dictmoniker )_ofkey([ arrayname ]) Examples A simple example is as follows: // dictionary add_dict(tanzanianBanknoteWidths)_keys(500,1000,2000,5000,10000)_values(120,125,130,135,140); Key or value datatype can be contructed struct ures, as in this example: add_struct(vertex)_param({float64},lat,lng); add_dict({str},{vertex},m); with_me() (m)_key(Bell Labs)_value(40.68433,-74.39967); (m)_str(Bell Labs)_vertex(40.68433,-74.39967); (m)_keyval(Bell Labs,40.68433,-74.39967); log_console()_dict(m)_ofkey(Bell Labs)_me(); ; Translated from Maps, A Tour of Go See Also Similar abstract objects: lexicon ; hash ; ary ; yush Equivalent metaphysic objects: spec dict on Rosetta Code","title":"Dictionary (object)"},{"location":"abstract/obj/dict/#dictionary-object","text":"The dict ionary object is an associative data type, which holds key-value pairs. Sometimes called maps in programming languages. The use of \"map\" was discouraged during the development of the Diego language because a map object is an metaphysic object representing a map of an spatial area, learnt by thingies at childhood.","title":"Dictionary (object)"},{"location":"abstract/obj/dict/#declaration","text":"The default declaration of the dict ionary object is to at least provide a moniker . With no datatype for the keys and value the {variant} datatype is implied when key-value pairs are added. The datatype of the keys or the keys-values can be declared at declaration. add_dict( moniker ); add_dict( moniker1 , moniker2 , ... ); add_dictionary( moniker ,{ key_datatype }); +_dict( moniker { key_datatype },{ value_datatype });","title":"Declaration"},{"location":"abstract/obj/dict/#initialisation","text":"+_dict( moniker ,\u27e6{ key_value }, value_value \u27e7); +_dict( moniker1 ,\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker2 ,\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker... ,\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7); +_dict( moniker ,{ key_datatype },\u27e6{ key_value }, value_value \u27e7); +_dict( moniker1 { key_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker2 ,{ key_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker... ,{ key_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7); +_dict( moniker ,{ key_datatype },{ value_datatype },\u27e6{ key_value }, value_value \u27e7); +_dict( moniker1 ,{ key_datatype },{ value_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker2 ,{ key_datatype },{ value_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7, moniker... ,{ key_datatype },{ value_datatype },\u27e6{ key_value1 }, value_value1 ,{ key_value2 }, value_value2 ,{ key_value... }, value_value... \u27e7);","title":"Initialisation"},{"location":"abstract/obj/dict/#assignment","text":"Assignment of keys or keys-values is allowed at declaration, initialisation, and post-declaration. The _key , _value , and, _set posits are used for assignment, their equivalent syntax, _keys , _k , _values , _v are identical and can be used freely and interchangeably. The set_ verb can also be used to the same effect as the _set posit. Any value given with no value will return as undefined when referenced. add_dict( moniker )_key( key ) with_dict( moniker )_keys( key1 , key2 , ... ) add_dictionary( moniker )_keys( key1 , key2 , ... )_values( val1 , val2 , ... ) with_dict( moniker )_k( key1 , key2 , ... )_v( val1 , val2 , ... ) ( moniker )_set( key1 , val1 , key2 , val2 , ... ) set_dict( moniker , key1 , val1 , key2 , val2 , ... )","title":"Assignment"},{"location":"abstract/obj/dict/#referencing","text":"To reference a dict the _ofkey posit is used. Without the _ofkey posit, the complete dict is returned. The _ofkey posit can accept variables using the [] square brackets to escape variables. with_dict( moniker ) _dict( moniker )_ofkey( key ) ( dictmoniker )_ofkey( key ) with_dictionary( moniker )_ofkey( key , key , ... ) _dict( moniker )_ofkey([ variablename ]) with_dict( moniker )_ofkey([ variablename ]) with_dictionary( moniker )_ofkey([ variablename ],[ variablename ],[ variablename ]) ( dictmoniker )_ofkey([ arrayname ])","title":"Referencing"},{"location":"abstract/obj/dict/#examples","text":"A simple example is as follows: // dictionary add_dict(tanzanianBanknoteWidths)_keys(500,1000,2000,5000,10000)_values(120,125,130,135,140); Key or value datatype can be contructed struct ures, as in this example: add_struct(vertex)_param({float64},lat,lng); add_dict({str},{vertex},m); with_me() (m)_key(Bell Labs)_value(40.68433,-74.39967); (m)_str(Bell Labs)_vertex(40.68433,-74.39967); (m)_keyval(Bell Labs,40.68433,-74.39967); log_console()_dict(m)_ofkey(Bell Labs)_me(); ; Translated from Maps, A Tour of Go","title":"Examples"},{"location":"abstract/obj/dict/#see-also","text":"Similar abstract objects: lexicon ; hash ; ary ; yush Equivalent metaphysic objects: spec dict on Rosetta Code","title":"See Also"},{"location":"abstract/obj/enum/","text":"Enumeration (object) / Enumerator (object) / Enumerator (function) The enum object contains a list of static immutable enumerators with a key (usually an integer) and an enumerator value (usually an explicit string). Declaration Enumerators can be declared using the add_ verb (or shortened +_ ), with or without explicit values. When declared without explicit values the default datatypes of \u27ea{int}\u27eb for keys, and \u27e6{str}\u27e7 for values are used, however, this syntax is dynamically typed, so datatypes will change upon assignment. Key datatype declarations are enclosed in angled and curly brackets ( \u27ea{}\u27eb ), and value datatype declarations are enclosed in expression and curly brackets ( \u27e6{}\u27e7 ). Multiple enum s cannot be declared in a single declaration. add_enum( moniker ); +_enum(\u27ea{ key_datatype }\u27eb,\u27e6{ value_datatype }\u27e7, moniker ); +_enum(\u27ea{ key_datatype }\u27eb, moniker ); +_enum(\u27e6{ value_datatype }\u27e7, moniker ); Declaration & Assignment +_calc(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_calc( moniker ,\u27e6 expression \u27e7); +_calc( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_enum(\u27ea{int}\u27eb,\u27e6{str}\u27e7,urgency) ()_enum(\u27ea4\u27eb,\u27e6emergent\u27e7)_static(URGENCY_EMERGENT)_colour(red)_color({hex},#ca0031)_desc(The most urgent (critical) state, severe risk.); ()_enum(\u27ea3\u27eb,\u27e6exigent\u27e7)_static(URGENT_EXIGENT)_colour(orange)_color({hex},#ff6400)_desc(The high urgent state, high risk.); ()_enum(\u27ea2\u27eb,\u27e6urgent\u27e7)_static(URGENT_URGENT)_colour(yellow)_color({hex},#fce001)_desc(The elevated urgent state, elevated risk.); ()_enum(\u27ea1\u27eb,\u27e6infergent\u27e7)_static(URGENT_INFERGENT)_colour(blue)_color({hex},#3566cd)_desc(The low urgent state, low / guarded risk.); ()_enum(\u27ea0\u27eb,\u27e6nonurgent\u27e7)_static(URGENT_NON)_colour(green)_color({hex},#009a66)_desc(The non-urgent state, negligible risk.); ; Without explicit values (and dynamic typing): add_enum(fruits,\u27e6apple,banana,cherry\u27e7); See Also Similar objects: flag Enumerations in Diego on Rosetta Code","title":"Enumeration (object) / Enumerator (object) / Enumerator (function)"},{"location":"abstract/obj/enum/#enumeration-object-enumerator-object-enumerator-function","text":"The enum object contains a list of static immutable enumerators with a key (usually an integer) and an enumerator value (usually an explicit string).","title":"Enumeration (object) / Enumerator (object) / Enumerator (function)"},{"location":"abstract/obj/enum/#declaration","text":"Enumerators can be declared using the add_ verb (or shortened +_ ), with or without explicit values. When declared without explicit values the default datatypes of \u27ea{int}\u27eb for keys, and \u27e6{str}\u27e7 for values are used, however, this syntax is dynamically typed, so datatypes will change upon assignment. Key datatype declarations are enclosed in angled and curly brackets ( \u27ea{}\u27eb ), and value datatype declarations are enclosed in expression and curly brackets ( \u27e6{}\u27e7 ). Multiple enum s cannot be declared in a single declaration. add_enum( moniker ); +_enum(\u27ea{ key_datatype }\u27eb,\u27e6{ value_datatype }\u27e7, moniker ); +_enum(\u27ea{ key_datatype }\u27eb, moniker ); +_enum(\u27e6{ value_datatype }\u27e7, moniker );","title":"Declaration"},{"location":"abstract/obj/enum/#declaration-assignment","text":"+_calc(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_calc( moniker ,\u27e6 expression \u27e7); +_calc( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_enum(\u27ea{int}\u27eb,\u27e6{str}\u27e7,urgency) ()_enum(\u27ea4\u27eb,\u27e6emergent\u27e7)_static(URGENCY_EMERGENT)_colour(red)_color({hex},#ca0031)_desc(The most urgent (critical) state, severe risk.); ()_enum(\u27ea3\u27eb,\u27e6exigent\u27e7)_static(URGENT_EXIGENT)_colour(orange)_color({hex},#ff6400)_desc(The high urgent state, high risk.); ()_enum(\u27ea2\u27eb,\u27e6urgent\u27e7)_static(URGENT_URGENT)_colour(yellow)_color({hex},#fce001)_desc(The elevated urgent state, elevated risk.); ()_enum(\u27ea1\u27eb,\u27e6infergent\u27e7)_static(URGENT_INFERGENT)_colour(blue)_color({hex},#3566cd)_desc(The low urgent state, low / guarded risk.); ()_enum(\u27ea0\u27eb,\u27e6nonurgent\u27e7)_static(URGENT_NON)_colour(green)_color({hex},#009a66)_desc(The non-urgent state, negligible risk.); ; Without explicit values (and dynamic typing): add_enum(fruits,\u27e6apple,banana,cherry\u27e7);","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/enum/#see-also","text":"Similar objects: flag Enumerations in Diego on Rosetta Code","title":"See Also"},{"location":"abstract/obj/err/","text":"Error (object) Auditing & Error Handling auditing notes examples API valid valid err , error err refuse wtf Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Error (object)"},{"location":"abstract/obj/err/#error-object","text":"","title":"Error (object)"},{"location":"abstract/obj/err/#auditing-error-handling","text":"auditing notes examples API valid valid err , error err refuse wtf","title":" Auditing &amp; Error Handling"},{"location":"abstract/obj/err/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/err/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/err/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/err/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/err/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/err/#typing","text":"","title":"Typing"},{"location":"abstract/obj/err/#getting","text":"","title":"Getting"},{"location":"abstract/obj/err/#setting","text":"","title":"Setting"},{"location":"abstract/obj/err/#casting","text":"","title":"Casting"},{"location":"abstract/obj/err/#properties","text":"","title":"Properties"},{"location":"abstract/obj/err/#examples","text":"","title":"Examples"},{"location":"abstract/obj/flag/","text":"Flag (object) The flag enumerator object contains a multi-selectable list of static immutable bitwise enumerators with a key (positive signed integer of power of two ( \\(2^n\\) )) and an enumerator value (an explicit string). There are no types of flag s. Declaration Flag enumerators can be declared using the add_ verb (or shortened +_ ), with or without explicit values. The key and value datatypes are set at \u27ea{2\u207f}\u27eb for keys, and \u27e6{str}\u27e7 for values. Multiple flag s cannot be declared in a single declaration. add_flag( moniker ); +_flag( moniker ); Declaration & Assignment For quick assignment at declaration, the key values can be omitted, and they will be dynaically created. Otherwise, provide the key-value pairs using angled brackets for keys ( \u27ea\u27eb ), and expression brackets ( \u27e6\u27e7 ) for values. Two patterns can be applied: key-value pairs; or, key-value groups. The key must follow the power of two ( \\(2^n\\) ), starting from one ( 1 ). +_flag( moniker ,\u27e6 value \u27e7); +_flag( moniker ,\u27e6 value1 , value2 , value... \u27e7); +_flag( moniker ,\u27ea1\u27eb,\u27e6 value \u27e7); +_flag( moniker ,\u27ea1,2,4 ... \u27eb,\u27e6 value1 , value2 , value... \u27e7); +_flag( moniker ,\u27ea1\u27eb,\u27e6 value1 \u27e7,\u27ea2\u27eb,\u27e6 value2 \u27e7,\u27ea4\u27eb,\u27e6 value \u27e7, ... ); Assignment Assignment after declaration is achieved using the with_ verb (or shortened >_ ). with_flag( moniker ,\u27e6 value \u27e7); >_flag( moniker ,\u27e6 value1 , value2 , value... \u27e7); >_flag( moniker ,\u27ea1\u27eb,\u27e6 value \u27e7); >_flag( moniker ,\u27ea1,2,4 ... \u27eb,\u27e6 value1 , value2 , value... \u27e7); >_flag( moniker ,\u27ea1\u27eb,\u27e6 value1 \u27e7,\u27ea2\u27eb,\u27e6 value2 \u27e7,\u27ea4\u27eb,\u27e6 value \u27e7, ... ); Casting The flag object can be safely cast to a enum object. Casting from an enum object to flag object, will re-index the keys, if the key from the enum do not follow power of 2 datatype ( \u27ea{2\u207f}\u27eb ). Properting There are key-value associated posit properties of the flag object . Posits posit description API _keys Provides an array of keys, in input order. keys Example add_flag(ape,\u27e6gorilla,chimpanzee,orangutan\u27e7); log_console()_(ape); // \u27ea1\u27eb,\u27e6gorilla\u27e7,\u27ea2\u27eb,\u27e6chimpanzee\u27e7,\u27ea4\u27eb,\u27e6orangutan\u27e7","title":"Flag (object)"},{"location":"abstract/obj/flag/#flag-object","text":"The flag enumerator object contains a multi-selectable list of static immutable bitwise enumerators with a key (positive signed integer of power of two ( \\(2^n\\) )) and an enumerator value (an explicit string). There are no types of flag s.","title":"Flag (object)"},{"location":"abstract/obj/flag/#declaration","text":"Flag enumerators can be declared using the add_ verb (or shortened +_ ), with or without explicit values. The key and value datatypes are set at \u27ea{2\u207f}\u27eb for keys, and \u27e6{str}\u27e7 for values. Multiple flag s cannot be declared in a single declaration. add_flag( moniker ); +_flag( moniker );","title":"Declaration"},{"location":"abstract/obj/flag/#declaration-assignment","text":"For quick assignment at declaration, the key values can be omitted, and they will be dynaically created. Otherwise, provide the key-value pairs using angled brackets for keys ( \u27ea\u27eb ), and expression brackets ( \u27e6\u27e7 ) for values. Two patterns can be applied: key-value pairs; or, key-value groups. The key must follow the power of two ( \\(2^n\\) ), starting from one ( 1 ). +_flag( moniker ,\u27e6 value \u27e7); +_flag( moniker ,\u27e6 value1 , value2 , value... \u27e7); +_flag( moniker ,\u27ea1\u27eb,\u27e6 value \u27e7); +_flag( moniker ,\u27ea1,2,4 ... \u27eb,\u27e6 value1 , value2 , value... \u27e7); +_flag( moniker ,\u27ea1\u27eb,\u27e6 value1 \u27e7,\u27ea2\u27eb,\u27e6 value2 \u27e7,\u27ea4\u27eb,\u27e6 value \u27e7, ... );","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/flag/#assignment","text":"Assignment after declaration is achieved using the with_ verb (or shortened >_ ). with_flag( moniker ,\u27e6 value \u27e7); >_flag( moniker ,\u27e6 value1 , value2 , value... \u27e7); >_flag( moniker ,\u27ea1\u27eb,\u27e6 value \u27e7); >_flag( moniker ,\u27ea1,2,4 ... \u27eb,\u27e6 value1 , value2 , value... \u27e7); >_flag( moniker ,\u27ea1\u27eb,\u27e6 value1 \u27e7,\u27ea2\u27eb,\u27e6 value2 \u27e7,\u27ea4\u27eb,\u27e6 value \u27e7, ... );","title":"Assignment"},{"location":"abstract/obj/flag/#casting","text":"The flag object can be safely cast to a enum object. Casting from an enum object to flag object, will re-index the keys, if the key from the enum do not follow power of 2 datatype ( \u27ea{2\u207f}\u27eb ).","title":"Casting"},{"location":"abstract/obj/flag/#properting","text":"There are key-value associated posit properties of the flag object .","title":"Properting"},{"location":"abstract/obj/flag/#posits","text":"posit description API _keys Provides an array of keys, in input order. keys","title":"Posits"},{"location":"abstract/obj/flag/#example","text":"add_flag(ape,\u27e6gorilla,chimpanzee,orangutan\u27e7); log_console()_(ape); // \u27ea1\u27eb,\u27e6gorilla\u27e7,\u27ea2\u27eb,\u27e6chimpanzee\u27e7,\u27ea4\u27eb,\u27e6orangutan\u27e7","title":"Example"},{"location":"abstract/obj/float/","text":"Floating Point Number (datatye)","title":"Floating Point Number (datatye)"},{"location":"abstract/obj/float/#floating-point-number-datatye","text":"","title":"Floating Point Number (datatye)"},{"location":"abstract/obj/funct/","text":"Function (object) The funct object... begin_funct add_funt _param() Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Function (object)"},{"location":"abstract/obj/funct/#function-object","text":"The funct object... begin_funct add_funt _param()","title":"Function (object)"},{"location":"abstract/obj/funct/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/funct/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/funct/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/funct/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/funct/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/funct/#typing","text":"","title":"Typing"},{"location":"abstract/obj/funct/#getting","text":"","title":"Getting"},{"location":"abstract/obj/funct/#setting","text":"","title":"Setting"},{"location":"abstract/obj/funct/#casting","text":"","title":"Casting"},{"location":"abstract/obj/funct/#properties","text":"","title":"Properties"},{"location":"abstract/obj/funct/#examples","text":"","title":"Examples"},{"location":"abstract/obj/hash/","text":"Hash (object) The hash table object is an associative data type, which holds key-value pairs like dict and lexikon objects, however, the keys managed using a . add_hash( moniker ) with_ary( moniker )_tohash() hash_ary( moniker ) Sytnax The default declaration of the dict ionary object is to at least provide a moniker . With no datatype for the keys and value the {variant} datatype is implied when key-value pairs are added. The datatype of the keys or the keys-values can be declared at declaration. add_dict( moniker ) add_dictionary( moniker ) add_dict({ keydt }, moniker ) add_dict({ keydt },{ valdt }, moniker ) Assignment of keys or keys-values is allowed at both declaration, initialisation, and post-declaration. The _key and _value posits are used for assignment, their equivalent syntax, _keys , _k , _values , _v are identical and can be used freely and interchangeably. Any key given with no value will return as undefined when referenced. add_dict( moniker )_key( key ) with_dict( moniker )_keys( key1 , key2 , ... ) add_dictionary( moniker )_keys( key1 , key2 , ... )_values( val1 , val2 , ... ) with_dict( moniker )_k( key1 , key2 , ... )_v( val1 , val2 , ... )","title":"Hash (object)"},{"location":"abstract/obj/hash/#hash-object","text":"The hash table object is an associative data type, which holds key-value pairs like dict and lexikon objects, however, the keys managed using a . add_hash( moniker ) with_ary( moniker )_tohash() hash_ary( moniker )","title":"Hash (object)"},{"location":"abstract/obj/hash/#sytnax","text":"The default declaration of the dict ionary object is to at least provide a moniker . With no datatype for the keys and value the {variant} datatype is implied when key-value pairs are added. The datatype of the keys or the keys-values can be declared at declaration. add_dict( moniker ) add_dictionary( moniker ) add_dict({ keydt }, moniker ) add_dict({ keydt },{ valdt }, moniker ) Assignment of keys or keys-values is allowed at both declaration, initialisation, and post-declaration. The _key and _value posits are used for assignment, their equivalent syntax, _keys , _k , _values , _v are identical and can be used freely and interchangeably. Any key given with no value will return as undefined when referenced. add_dict( moniker )_key( key ) with_dict( moniker )_keys( key1 , key2 , ... ) add_dictionary( moniker )_keys( key1 , key2 , ... )_values( val1 , val2 , ... ) with_dict( moniker )_k( key1 , key2 , ... )_v( val1 , val2 , ... )","title":"Sytnax"},{"location":"abstract/obj/indent/","text":"Indenture (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Indenture (object)"},{"location":"abstract/obj/indent/#indenture-object","text":"","title":"Indenture (object)"},{"location":"abstract/obj/indent/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/indent/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/indent/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/indent/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/indent/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/indent/#typing","text":"","title":"Typing"},{"location":"abstract/obj/indent/#getting","text":"","title":"Getting"},{"location":"abstract/obj/indent/#setting","text":"","title":"Setting"},{"location":"abstract/obj/indent/#casting","text":"","title":"Casting"},{"location":"abstract/obj/indent/#properties","text":"","title":"Properties"},{"location":"abstract/obj/indent/#examples","text":"","title":"Examples"},{"location":"abstract/obj/int/","text":"Integer (datatype)","title":"Integer (datatype)"},{"location":"abstract/obj/int/#integer-datatype","text":"","title":"Integer (datatype)"},{"location":"abstract/obj/lexi/","text":"Lexikon (object) The lexikon object is an associative data type, which holds key-value pairs like a dict object, however, the keys are uuids and managed. lexikon is named form Swedish for dictionary, it can be shortened to lexi . Sytnax The default declaration of the lexikon object is to at least provide a moniker . lexikon can be shortened to lexi . With no datatype for values declared they will be implied as {variant} , the keys are always uuid version 4 ( {uuid_4} ). However, the datatype of the values can be declared at declaration. add_lexi( moniker ) add_lexikon_( moniker ) add_lexi({ valdt }, moniker ) Assignment of values is allowed at both declaration, initialisation, and post-declaration. The _value posits are used for assignment, their equivalent syntax, _values , _v are identical and can be used freely and interchangeably. add_lexi( moniker )_value( key ) with_lexikon( moniker )_values( val1 , val2 , ... ) To reference a lecikon is, effectively, the reverse of a dict object, by using the _ofval posit. Without the _ofval posit, the complete lexikon is returned. The _ofval posit can accept variables using the [] square brackets to escape variables. with_lexi( moniker ) _lexi( moniker )_ofval( val ) ( leximoniker )_ofval( val ) with_lexikon( moniker )_ofval( val , key , ... ) _lexi( moniker )_ofval([ variablename ]) with_lexikon( moniker )_ofval([ variablename ],[ variablename ],[ variablename ]) ( leximoniker )_ofval([ arrayname ]) However, the real strength of the lexikon object is for use in comparison conditions, for exmaple: add_lexi(droneStockRotarBlades)_v( ???? ) TODO: think of something that is special enough the be id'ed but common enough to be shared and swapped between robots Arrays can be converted (cast) to lexikons. with_ary( moniker )_tolexi() lexi_ary( moniker ) The most common use of a lexikon is the liken object. See Also Similar abstract objects: dict ; hash ; ary ; yush Equivalent metaphysic objects: liken lexikon on Rosetta Code","title":"Lexikon (object)"},{"location":"abstract/obj/lexi/#lexikon-object","text":"The lexikon object is an associative data type, which holds key-value pairs like a dict object, however, the keys are uuids and managed. lexikon is named form Swedish for dictionary, it can be shortened to lexi .","title":"Lexikon (object)"},{"location":"abstract/obj/lexi/#sytnax","text":"The default declaration of the lexikon object is to at least provide a moniker . lexikon can be shortened to lexi . With no datatype for values declared they will be implied as {variant} , the keys are always uuid version 4 ( {uuid_4} ). However, the datatype of the values can be declared at declaration. add_lexi( moniker ) add_lexikon_( moniker ) add_lexi({ valdt }, moniker ) Assignment of values is allowed at both declaration, initialisation, and post-declaration. The _value posits are used for assignment, their equivalent syntax, _values , _v are identical and can be used freely and interchangeably. add_lexi( moniker )_value( key ) with_lexikon( moniker )_values( val1 , val2 , ... ) To reference a lecikon is, effectively, the reverse of a dict object, by using the _ofval posit. Without the _ofval posit, the complete lexikon is returned. The _ofval posit can accept variables using the [] square brackets to escape variables. with_lexi( moniker ) _lexi( moniker )_ofval( val ) ( leximoniker )_ofval( val ) with_lexikon( moniker )_ofval( val , key , ... ) _lexi( moniker )_ofval([ variablename ]) with_lexikon( moniker )_ofval([ variablename ],[ variablename ],[ variablename ]) ( leximoniker )_ofval([ arrayname ]) However, the real strength of the lexikon object is for use in comparison conditions, for exmaple: add_lexi(droneStockRotarBlades)_v( ???? ) TODO: think of something that is special enough the be id'ed but common enough to be shared and swapped between robots Arrays can be converted (cast) to lexikons. with_ary( moniker )_tolexi() lexi_ary( moniker )","title":"Sytnax"},{"location":"abstract/obj/lexi/#the-most-common-use-of-a-lexikon-is-the-liken-object","text":"","title":"The most common use of a lexikon is the liken object."},{"location":"abstract/obj/lexi/#see-also","text":"Similar abstract objects: dict ; hash ; ary ; yush Equivalent metaphysic objects: liken lexikon on Rosetta Code","title":"See Also"},{"location":"abstract/obj/list/","text":"List (object) A database-assigned collection type call moniker assigned exclusively from database queries. use_me(); add_list(accts)_sql(SELECT CreatedById, CreatedDate, LastModifiedById, LastModifiedDate, BillingCity FROM Account WHERE Name='Acme' OR Name='Salesforce'); add_ary({id},acctCreator)_list(accts)_ofsql([CreatedById]); add_list(creators)_sql(SELECT FirstName, LastName FROM User WHERE Id IN:[acctCreator] ); log_console(List of account creators: [])_list(creators)_calc([FirstName]&' '&[LastName]); // List of account creators: James Bond, Sherlock Holmes, Oliver Twist reset_me(); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"List (object)"},{"location":"abstract/obj/list/#list-object","text":"A database-assigned collection type call moniker assigned exclusively from database queries. use_me(); add_list(accts)_sql(SELECT CreatedById, CreatedDate, LastModifiedById, LastModifiedDate, BillingCity FROM Account WHERE Name='Acme' OR Name='Salesforce'); add_ary({id},acctCreator)_list(accts)_ofsql([CreatedById]); add_list(creators)_sql(SELECT FirstName, LastName FROM User WHERE Id IN:[acctCreator] ); log_console(List of account creators: [])_list(creators)_calc([FirstName]&' '&[LastName]); // List of account creators: James Bond, Sherlock Holmes, Oliver Twist reset_me();","title":"List (object)"},{"location":"abstract/obj/list/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/list/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/list/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/list/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/list/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/list/#typing","text":"","title":"Typing"},{"location":"abstract/obj/list/#getting","text":"","title":"Getting"},{"location":"abstract/obj/list/#setting","text":"","title":"Setting"},{"location":"abstract/obj/list/#casting","text":"","title":"Casting"},{"location":"abstract/obj/list/#properties","text":"","title":"Properties"},{"location":"abstract/obj/list/#examples","text":"","title":"Examples"},{"location":"abstract/obj/matrix/","text":"Matrix (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Matrix (object)"},{"location":"abstract/obj/matrix/#matrix-object","text":"","title":"Matrix (object)"},{"location":"abstract/obj/matrix/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/matrix/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/matrix/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/matrix/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/matrix/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/matrix/#typing","text":"","title":"Typing"},{"location":"abstract/obj/matrix/#getting","text":"","title":"Getting"},{"location":"abstract/obj/matrix/#setting","text":"","title":"Setting"},{"location":"abstract/obj/matrix/#casting","text":"","title":"Casting"},{"location":"abstract/obj/matrix/#properties","text":"","title":"Properties"},{"location":"abstract/obj/matrix/#examples","text":"","title":"Examples"},{"location":"abstract/obj/namespace/","text":"Namespace (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Namespace (object)"},{"location":"abstract/obj/namespace/#namespace-object","text":"","title":"Namespace (object)"},{"location":"abstract/obj/namespace/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/namespace/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/namespace/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/namespace/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/namespace/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/namespace/#typing","text":"","title":"Typing"},{"location":"abstract/obj/namespace/#getting","text":"","title":"Getting"},{"location":"abstract/obj/namespace/#setting","text":"","title":"Setting"},{"location":"abstract/obj/namespace/#casting","text":"","title":"Casting"},{"location":"abstract/obj/namespace/#properties","text":"","title":"Properties"},{"location":"abstract/obj/namespace/#examples","text":"","title":"Examples"},{"location":"abstract/obj/pkg/","text":"Package (object) only one include / import once ever - does a human have to include/import methods of making and eating breakfast every morning? study_package(tree) discuss_package(tree) rememb_package({package_moniker})_me(); \"remember from memory what I know about {package_moniker} \" recoll_package({package_moniker})_me(); \"recollect from memory what I know about {package_moniker} , so I can update\" discuss_package({package_moniker}); \"discuss with my buddies and/or form a study group with other thingies to learn about {package_moniker} \" research_package({package_moniker}); \"search the internet for {package_moniker} and learn from the results\" study_package({package_moniker}); \"discuss {package_moniker} with my buddies and search the internet for {package_moniker} and learn\" apt_package({package_moniker}); \" download {package_moniker} from the internet and learn \" recoll_ rememb_ discuss_ research_ apt_ ?_ = study_ = discuss_ : research_ bstorm_ = discuss_ begin_package() end_package()","title":"Package (object)"},{"location":"abstract/obj/pkg/#package-object","text":"only one include / import once ever - does a human have to include/import methods of making and eating breakfast every morning? study_package(tree) discuss_package(tree) rememb_package({package_moniker})_me(); \"remember from memory what I know about {package_moniker} \" recoll_package({package_moniker})_me(); \"recollect from memory what I know about {package_moniker} , so I can update\" discuss_package({package_moniker}); \"discuss with my buddies and/or form a study group with other thingies to learn about {package_moniker} \" research_package({package_moniker}); \"search the internet for {package_moniker} and learn from the results\" study_package({package_moniker}); \"discuss {package_moniker} with my buddies and search the internet for {package_moniker} and learn\" apt_package({package_moniker}); \" download {package_moniker} from the internet and learn \" recoll_ rememb_ discuss_ research_ apt_ ?_ = study_ = discuss_ : research_ bstorm_ = discuss_ begin_package() end_package()","title":"Package (object)"},{"location":"abstract/obj/point/","text":"Point (object) | point | See also: route ; path |clear Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Point (object)"},{"location":"abstract/obj/point/#point-object","text":"| point | See also: route ; path |clear","title":"Point (object)"},{"location":"abstract/obj/point/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/point/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/point/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/point/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/point/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/point/#typing","text":"","title":"Typing"},{"location":"abstract/obj/point/#getting","text":"","title":"Getting"},{"location":"abstract/obj/point/#setting","text":"","title":"Setting"},{"location":"abstract/obj/point/#casting","text":"","title":"Casting"},{"location":"abstract/obj/point/#properties","text":"","title":"Properties"},{"location":"abstract/obj/point/#examples","text":"","title":"Examples"},{"location":"abstract/obj/refuse/","text":"Refuse (object) Auditing & Error Handling auditing notes examples API valid valid err , error err refuse wtf Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Refuse (object)"},{"location":"abstract/obj/refuse/#refuse-object","text":"","title":"Refuse (object)"},{"location":"abstract/obj/refuse/#auditing-error-handling","text":"auditing notes examples API valid valid err , error err refuse wtf","title":" Auditing &amp; Error Handling"},{"location":"abstract/obj/refuse/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/refuse/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/refuse/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/refuse/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/refuse/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/refuse/#typing","text":"","title":"Typing"},{"location":"abstract/obj/refuse/#getting","text":"","title":"Getting"},{"location":"abstract/obj/refuse/#setting","text":"","title":"Setting"},{"location":"abstract/obj/refuse/#casting","text":"","title":"Casting"},{"location":"abstract/obj/refuse/#properties","text":"","title":"Properties"},{"location":"abstract/obj/refuse/#examples","text":"","title":"Examples"},{"location":"abstract/obj/str/","text":"String (object) The str (or lengthened string ) primitive object provides a sequence of characters, as a variable. Declaration Although the most common use of the str expression is via a posit, it can be declared using the add_ verb (or shortened +_ ). Since the str object is expressive the be expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ) can be used directly, i.e. in place of the brackets ( () ). Multiple str s are declared using a coma-separated list of moniker s. If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_str( moniker ); add_txt( moniker1 , moniker2 , ... ); +_txt\u27e6 expression \u27e7; +_txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_txt( moniker ,\u27e6 expression \u27e7); +_txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); The common declaration of the txt object is via posit syntax. <object> _text( moniker ); <object> _txt( moniker1 , moniker2 , ... ); <object> _txt\u27e6 expression \u27e7; <object> _txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); <object> _txt( moniker ,\u27e6 expression \u27e7); <object> _txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7);","title":"String (object)"},{"location":"abstract/obj/str/#string-object","text":"The str (or lengthened string ) primitive object provides a sequence of characters, as a variable.","title":"String (object)"},{"location":"abstract/obj/str/#declaration","text":"Although the most common use of the str expression is via a posit, it can be declared using the add_ verb (or shortened +_ ). Since the str object is expressive the be expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ) can be used directly, i.e. in place of the brackets ( () ). Multiple str s are declared using a coma-separated list of moniker s. If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_str( moniker ); add_txt( moniker1 , moniker2 , ... ); +_txt\u27e6 expression \u27e7; +_txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_txt( moniker ,\u27e6 expression \u27e7); +_txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); The common declaration of the txt object is via posit syntax. <object> _text( moniker ); <object> _txt( moniker1 , moniker2 , ... ); <object> _txt\u27e6 expression \u27e7; <object> _txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); <object> _txt( moniker ,\u27e6 expression \u27e7); <object> _txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7);","title":"Declaration"},{"location":"abstract/obj/tempor/","text":"Temporal (object) A primitive data object and datatype representing a calendar date. Depending upon the upbringing of thingies the most often used calendar for all date ois the Gregorian calendar. Setting the calendar can be achieved using the set_cal( calendar_name ) setter. The {tempor} datatype can be used in data storage objects to create date types. Syntax The default declaration of tempor is to at least provide a moniker . However, assignment can occur at declaration with an overload of two more signatures involving parameters: date , a valid representation of a date to be parsed into its component parts; year , a numeric value for a year; month , a numeric or alphanumeric value for a month; and, day , a numeric or alphanumeric value for a day-of-month. The extended syntax, temporal can be used freely and interchangeably with tempor . add_tempor( moniker ); add_temporal( moniker , date ); add_tempor( moniker , year , month , day ); The date parameter can be passed through the _value (including _v ) posit. The other component parts can be added separately with their own posits. Assignment can occur at declaration, initialisation, and post-declaration. add_tempor( moniker )_value( date )``<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_value( * date * ) `<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_year( * year * )_month( * month * )_day( * day * ); <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_year( * year * ); <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_month( * month * ); <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_day( * day * );` The dag (Afrikaans for \"day\") or dow posit is used to differentiate day from day-of-week. For example, for the date 1776-Jul-14, the day was 14, whereas, the dag / dow was Thursday , or 4 . The dag and dow posits are identical, only syntactically different, they can be used freely and interchangeably. with_tempor( moniker )_dag( dag ) with_tempor( moniker )_dow( dow ) Posits method description API _arity() Provides the named elements in the object arity _year( index ) _at() Provides the element at index index _now() _now( dateformat ) Provides the exact datetime Provides the exact datetime in format dateformat now _instant() Provides the current exact system time, without regard to calendar or time zone instant _year() _year( year ) Provides the element at index index _instant() Provides the 'exact time' as a fixed point in time without regard to calendar or location _zdt() _zone_datetime() Provides the timezone-aware and calendar-aware (of the thingy caller) of the thingies now zdt _zdt( epoch_nanoseconds , timezone ) Accepts the timezone-aware and calendar-presumed (usually Georgian), of the thingy caller zdt _zdt( epoch_nanoseconds , timezone , calendar ) Accepts the timezone-aware and calendar-aware of the thingy caller zdt _fromzdt( date ) Provides the timezone-aware and calendar-aware date #date* zdt _tozdt( date ) Provides the timezone-aware and calendar-aware date #date* zdt See also {tempor} ; tempor ; Temporal (datatype) The {tempor} datatype is of the primative data object tempor , representing a calendar date. Depending upon the upbringing of thingies the most often used calendar for all dates is the Gregorian calendar. Setting the calendar can be achieved using the set_cal( calendarname ) setter. Syntax Since the tempor object is a deriviative of the basic data storage objects , the datatype {tempor} can be used, when declaring the data storage object. The commonly used basic data storage object is var. add_var({tempor}, moniker ) add_var({tempor}, moniker )_value( date ) add_var({tempor}, moniker )_year( year )_month( month )_dag( dag ); add_var({tempor}, moniker )_year( year )_month( month )_dag( dag )_day( day ); Gotchas The data storage object is implied, however, when used, the specific data storage object* will applied its own adaptations of the data, for example: add_var({tempor},independenceDay)_v(04-Jul-1776); log_console()_var(independenceDay); // 04-Jul-1776 log_console()_date(independenceDay); // 1776-07-04T??:??:??.????Z[?][u-ca=?]4 See also Expressions There are several syntaxes to express a tempor . All date expressions must conform to the ISO 8601 / RFC 3339 format. expression syntax description example P MM - DD Plain month-day, known as 'PlainMonthDay'. P08-05 P YYYY - MM Plain year-month, known as 'PlainYearMonth'. P2020-08 P YYYY - MM - DD Plain date, known as 'PlainDate'. P2020-08-05 T HH : mm : ss Plain time, known as 'PlainTime'. T20:06:13 P YYYY - MM - DD T HH : mm : ss Plain datetime, known as 'PlainDateTime'. P2020-08-05T20:06:13 P YYYY - MM - DD T HH : mm : ss + offset P YYYY - MM - DD T HH : mm : ss Z Instant datetime, known just as 'Instant'. P2020-08-05T20:06:13+09:00 P2020-08-05T11:06:13Z P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ] Zoned datetime, known as 'ZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese] P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ][ calendar_extension ] Full zoned datetime, known as 'FullZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese]","title":"Temporal (object)"},{"location":"abstract/obj/tempor/#temporal-object","text":"A primitive data object and datatype representing a calendar date. Depending upon the upbringing of thingies the most often used calendar for all date ois the Gregorian calendar. Setting the calendar can be achieved using the set_cal( calendar_name ) setter. The {tempor} datatype can be used in data storage objects to create date types.","title":"Temporal (object)"},{"location":"abstract/obj/tempor/#syntax","text":"The default declaration of tempor is to at least provide a moniker . However, assignment can occur at declaration with an overload of two more signatures involving parameters: date , a valid representation of a date to be parsed into its component parts; year , a numeric value for a year; month , a numeric or alphanumeric value for a month; and, day , a numeric or alphanumeric value for a day-of-month. The extended syntax, temporal can be used freely and interchangeably with tempor . add_tempor( moniker ); add_temporal( moniker , date ); add_tempor( moniker , year , month , day ); The date parameter can be passed through the _value (including _v ) posit. The other component parts can be added separately with their own posits. Assignment can occur at declaration, initialisation, and post-declaration. add_tempor( moniker )_value( date )``<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_value( * date * ) `<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_year( * year * )_month( * month * )_day( * day * ); <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_year( * year * ); <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_month( * month * ); <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with_tempor( * moniker * )_day( * day * );` The dag (Afrikaans for \"day\") or dow posit is used to differentiate day from day-of-week. For example, for the date 1776-Jul-14, the day was 14, whereas, the dag / dow was Thursday , or 4 . The dag and dow posits are identical, only syntactically different, they can be used freely and interchangeably. with_tempor( moniker )_dag( dag ) with_tempor( moniker )_dow( dow )","title":"Syntax"},{"location":"abstract/obj/tempor/#posits","text":"method description API _arity() Provides the named elements in the object arity _year( index ) _at() Provides the element at index index _now() _now( dateformat ) Provides the exact datetime Provides the exact datetime in format dateformat now _instant() Provides the current exact system time, without regard to calendar or time zone instant _year() _year( year ) Provides the element at index index _instant() Provides the 'exact time' as a fixed point in time without regard to calendar or location _zdt() _zone_datetime() Provides the timezone-aware and calendar-aware (of the thingy caller) of the thingies now zdt _zdt( epoch_nanoseconds , timezone ) Accepts the timezone-aware and calendar-presumed (usually Georgian), of the thingy caller zdt _zdt( epoch_nanoseconds , timezone , calendar ) Accepts the timezone-aware and calendar-aware of the thingy caller zdt _fromzdt( date ) Provides the timezone-aware and calendar-aware date #date* zdt _tozdt( date ) Provides the timezone-aware and calendar-aware date #date* zdt","title":"Posits"},{"location":"abstract/obj/tempor/#see-also","text":"{tempor} ; tempor ;","title":"See also"},{"location":"abstract/obj/tempor/#temporal-datatype","text":"The {tempor} datatype is of the primative data object tempor , representing a calendar date. Depending upon the upbringing of thingies the most often used calendar for all dates is the Gregorian calendar. Setting the calendar can be achieved using the set_cal( calendarname ) setter.","title":"Temporal (datatype)"},{"location":"abstract/obj/tempor/#syntax_1","text":"Since the tempor object is a deriviative of the basic data storage objects , the datatype {tempor} can be used, when declaring the data storage object. The commonly used basic data storage object is var. add_var({tempor}, moniker ) add_var({tempor}, moniker )_value( date ) add_var({tempor}, moniker )_year( year )_month( month )_dag( dag ); add_var({tempor}, moniker )_year( year )_month( month )_dag( dag )_day( day );","title":"Syntax"},{"location":"abstract/obj/tempor/#gotchas","text":"The data storage object is implied, however, when used, the specific data storage object* will applied its own adaptations of the data, for example: add_var({tempor},independenceDay)_v(04-Jul-1776); log_console()_var(independenceDay); // 04-Jul-1776 log_console()_date(independenceDay); // 1776-07-04T??:??:??.????Z[?][u-ca=?]4","title":"Gotchas"},{"location":"abstract/obj/tempor/#see-also_1","text":"","title":"See also"},{"location":"abstract/obj/tempor/#expressions","text":"There are several syntaxes to express a tempor . All date expressions must conform to the ISO 8601 / RFC 3339 format. expression syntax description example P MM - DD Plain month-day, known as 'PlainMonthDay'. P08-05 P YYYY - MM Plain year-month, known as 'PlainYearMonth'. P2020-08 P YYYY - MM - DD Plain date, known as 'PlainDate'. P2020-08-05 T HH : mm : ss Plain time, known as 'PlainTime'. T20:06:13 P YYYY - MM - DD T HH : mm : ss Plain datetime, known as 'PlainDateTime'. P2020-08-05T20:06:13 P YYYY - MM - DD T HH : mm : ss + offset P YYYY - MM - DD T HH : mm : ss Z Instant datetime, known just as 'Instant'. P2020-08-05T20:06:13+09:00 P2020-08-05T11:06:13Z P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ] Zoned datetime, known as 'ZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese] P YYYY - MM - DD T HH : mm : ss + offset [ time_zone_extension ][ calendar_extension ] Full zoned datetime, known as 'FullZonedDateTime'. P2020-08-05T20:06:13+09:00[Asia/Tokyo][u-ca-japanese]","title":"Expressions"},{"location":"abstract/obj/tensor/","text":"Tensor (object) flowchart TB subgraph orientation Excurs((excurs)) --> course(Course) course --> way(Way) way --> pose(Pose) end subgraph time tour(Tour) --> journ(Journ) journ --> trip(Trip) trip --> goal(Goal) end subgraph abstract tensor1(Tensor) --> tensor2(Tensor) tensor2 --> Vector(Vector) end subgraph location intiner(Itinerary) --> Route(route) route --> Path(path) path --> wp(Waypoint) end Time-Space Hierarchy Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Tensor (object)"},{"location":"abstract/obj/tensor/#tensor-object","text":"flowchart TB subgraph orientation Excurs((excurs)) --> course(Course) course --> way(Way) way --> pose(Pose) end subgraph time tour(Tour) --> journ(Journ) journ --> trip(Trip) trip --> goal(Goal) end subgraph abstract tensor1(Tensor) --> tensor2(Tensor) tensor2 --> Vector(Vector) end subgraph location intiner(Itinerary) --> Route(route) route --> Path(path) path --> wp(Waypoint) end Time-Space Hierarchy","title":"Tensor (object)"},{"location":"abstract/obj/tensor/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/tensor/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/tensor/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/tensor/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/tensor/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/tensor/#typing","text":"","title":"Typing"},{"location":"abstract/obj/tensor/#getting","text":"","title":"Getting"},{"location":"abstract/obj/tensor/#setting","text":"","title":"Setting"},{"location":"abstract/obj/tensor/#casting","text":"","title":"Casting"},{"location":"abstract/obj/tensor/#properties","text":"","title":"Properties"},{"location":"abstract/obj/tensor/#examples","text":"","title":"Examples"},{"location":"abstract/obj/time/","text":"Time (datatype) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Time (datatype)"},{"location":"abstract/obj/time/#time-datatype","text":"","title":"Time (datatype)"},{"location":"abstract/obj/time/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/time/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/time/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/time/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/time/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/time/#typing","text":"","title":"Typing"},{"location":"abstract/obj/time/#getting","text":"","title":"Getting"},{"location":"abstract/obj/time/#setting","text":"","title":"Setting"},{"location":"abstract/obj/time/#casting","text":"","title":"Casting"},{"location":"abstract/obj/time/#properties","text":"","title":"Properties"},{"location":"abstract/obj/time/#examples","text":"","title":"Examples"},{"location":"abstract/obj/val/","text":"Valuable (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Valuable (object)"},{"location":"abstract/obj/val/#valuable-object","text":"","title":"Valuable (object)"},{"location":"abstract/obj/val/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/val/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/val/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/val/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/val/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/val/#typing","text":"","title":"Typing"},{"location":"abstract/obj/val/#getting","text":"","title":"Getting"},{"location":"abstract/obj/val/#setting","text":"","title":"Setting"},{"location":"abstract/obj/val/#casting","text":"","title":"Casting"},{"location":"abstract/obj/val/#properties","text":"","title":"Properties"},{"location":"abstract/obj/val/#examples","text":"","title":"Examples"},{"location":"abstract/obj/var/","text":"Variable (object) / Variant (object) The var object is the primitive one-dimensional storage object , also known as just the 'variable' or the 'variant' (after the default implied datatype). Declaration The default declaration of the var (or lengthened variable ) object is to use the add_ verb (or shortened +_ ) and provide a datatype (optional) and a moniker . Multiple var s are declared using a coma-separated list of moniker s. If not datatype is provided the variable is classed as a variant and will be dynamically typed. All expressions must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_variable({ datatype }, moniker ); add_var({ datatype }, moniker1 , moniker2 , ... ); +_var( moniker ); +_var( moniker1 , moniker2 , ... ); +_var( moniker ,[[ expression ]]); +_var( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); +_var({ datatype }, moniker ,\u27e6 expression \u27e7); +_var({ datatype }, moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7);","title":"Variable (object) / Variant (object)"},{"location":"abstract/obj/var/#variable-object-variant-object","text":"The var object is the primitive one-dimensional storage object , also known as just the 'variable' or the 'variant' (after the default implied datatype).","title":"Variable (object) / Variant (object)"},{"location":"abstract/obj/var/#declaration","text":"The default declaration of the var (or lengthened variable ) object is to use the add_ verb (or shortened +_ ) and provide a datatype (optional) and a moniker . Multiple var s are declared using a coma-separated list of moniker s. If not datatype is provided the variable is classed as a variant and will be dynamically typed. All expressions must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_variable({ datatype }, moniker ); add_var({ datatype }, moniker1 , moniker2 , ... ); +_var( moniker ); +_var( moniker1 , moniker2 , ... ); +_var( moniker ,[[ expression ]]); +_var( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); +_var({ datatype }, moniker ,\u27e6 expression \u27e7); +_var({ datatype }, moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7);","title":"Declaration"},{"location":"abstract/obj/variant/","text":"Variant (datatype) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Variant (datatype)"},{"location":"abstract/obj/variant/#variant-datatype","text":"","title":"Variant (datatype)"},{"location":"abstract/obj/variant/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/variant/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/variant/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/variant/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/variant/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/variant/#typing","text":"","title":"Typing"},{"location":"abstract/obj/variant/#getting","text":"","title":"Getting"},{"location":"abstract/obj/variant/#setting","text":"","title":"Setting"},{"location":"abstract/obj/variant/#casting","text":"","title":"Casting"},{"location":"abstract/obj/variant/#properties","text":"","title":"Properties"},{"location":"abstract/obj/variant/#examples","text":"","title":"Examples"},{"location":"abstract/obj/vector/","text":"Vector (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Vector (object)"},{"location":"abstract/obj/vector/#vector-object","text":"","title":"Vector (object)"},{"location":"abstract/obj/vector/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/vector/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/vector/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/vector/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/vector/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/vector/#typing","text":"","title":"Typing"},{"location":"abstract/obj/vector/#getting","text":"","title":"Getting"},{"location":"abstract/obj/vector/#setting","text":"","title":"Setting"},{"location":"abstract/obj/vector/#casting","text":"","title":"Casting"},{"location":"abstract/obj/vector/#properties","text":"","title":"Properties"},{"location":"abstract/obj/vector/#examples","text":"","title":"Examples"},{"location":"abstract/obj/yush/","text":"Yush (object) Yush is an abstract pointer, rather than an variable value. Named after Kateryna Yushchenko. add_var({level_5},varFuelLevel)_robot(myDrone)_fuelstatus(); // varFuelLevel = high add_yush({level_5},yushFuelLevel)_robot(myOtherDrone)_fuelstatus(); // yushFuelLevel = high go_drone(myDrone)_waypoint(greenFlag) ? loop_if([varFuelLevel]>low) // varFuelLevel = high > high > high > high ? (myDrone)_(greenFlag)_loiterat(); // die of exhaustion! : (myDrone)_rtb(); ; ; go_drone(myOtherDrone)_waypoint(blueFlag) ? loop_if([yushFuelLevel]>low) // yushFuelLevel = high > medium > low ? (myOtherDrone)_(blueFlag)_loiterat(); : (myOtherDrone)_rtb(); // return to base! ; ; Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Yush (object)"},{"location":"abstract/obj/yush/#yush-object","text":"Yush is an abstract pointer, rather than an variable value. Named after Kateryna Yushchenko. add_var({level_5},varFuelLevel)_robot(myDrone)_fuelstatus(); // varFuelLevel = high add_yush({level_5},yushFuelLevel)_robot(myOtherDrone)_fuelstatus(); // yushFuelLevel = high go_drone(myDrone)_waypoint(greenFlag) ? loop_if([varFuelLevel]>low) // varFuelLevel = high > high > high > high ? (myDrone)_(greenFlag)_loiterat(); // die of exhaustion! : (myDrone)_rtb(); ; ; go_drone(myOtherDrone)_waypoint(blueFlag) ? loop_if([yushFuelLevel]>low) // yushFuelLevel = high > medium > low ? (myOtherDrone)_(blueFlag)_loiterat(); : (myOtherDrone)_rtb(); // return to base! ; ;","title":"Yush (object)"},{"location":"abstract/obj/yush/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/obj/yush/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/obj/yush/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/obj/yush/#assignment","text":"","title":"Assignment"},{"location":"abstract/obj/yush/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/obj/yush/#typing","text":"","title":"Typing"},{"location":"abstract/obj/yush/#getting","text":"","title":"Getting"},{"location":"abstract/obj/yush/#setting","text":"","title":"Setting"},{"location":"abstract/obj/yush/#casting","text":"","title":"Casting"},{"location":"abstract/obj/yush/#properties","text":"","title":"Properties"},{"location":"abstract/obj/yush/#examples","text":"","title":"Examples"},{"location":"abstract/op/arithmetic/","text":"Arithmetic Operators (operator) Addition (operator) <expression_posit> ( ... + ... ); Subtraction (operator) <expression_posit> ( ... - ... ); Multiplication (operator) <expression_posit> ( ... * ... ); <expression_posit> ( ... \u00d7 ... ); Multiplication (operator) <expression_posit> ( ... / ... ); <expression_posit> ( ... \u00f7 ... ); Modulus (operator) <expression_posit> ( ... % ... ); <expression_posit> ( ... \ud835\udc26 ... ); <expression_posit> ( ... \ud835\udc26\ud835\udc28\ud835\udc1d() ... );","title":"Arithmetic Operators (operator)"},{"location":"abstract/op/arithmetic/#arithmetic-operators-operator","text":"","title":"Arithmetic Operators (operator)"},{"location":"abstract/op/arithmetic/#addition-operator","text":"<expression_posit> ( ... + ... );","title":"Addition (operator)"},{"location":"abstract/op/arithmetic/#subtraction-operator","text":"<expression_posit> ( ... - ... );","title":"Subtraction (operator)"},{"location":"abstract/op/arithmetic/#multiplication-operator","text":"<expression_posit> ( ... * ... ); <expression_posit> ( ... \u00d7 ... );","title":"Multiplication (operator)"},{"location":"abstract/op/arithmetic/#multiplication-operator_1","text":"<expression_posit> ( ... / ... ); <expression_posit> ( ... \u00f7 ... );","title":"Multiplication (operator)"},{"location":"abstract/op/arithmetic/#modulus-operator","text":"<expression_posit> ( ... % ... ); <expression_posit> ( ... \ud835\udc26 ... ); <expression_posit> ( ... \ud835\udc26\ud835\udc28\ud835\udc1d() ... );","title":"Modulus (operator)"},{"location":"abstract/op/exponent/","text":"Exponent Operators (operator) Squared (operator) <expression_posit> ( ... \u00b2 ... ); Cubed (operator) <expression_posit> ( ... \u00b3 ... ); Power (operator) <expression_posit> ( ... ^ ... ); <expression_posit> ( ... ** ... ); <expression_posit> ( ... \ud835\udc65 y ... ); Square Root (operator) <expression_posit> ( ... \u221a ... ); Forth Root (operator) <expression_posit> ( ... \u221b ... );","title":"Exponent Operators (operator)"},{"location":"abstract/op/exponent/#exponent-operators-operator","text":"","title":"Exponent Operators (operator)"},{"location":"abstract/op/exponent/#squared-operator","text":"<expression_posit> ( ... \u00b2 ... );","title":"Squared (operator)"},{"location":"abstract/op/exponent/#cubed-operator","text":"<expression_posit> ( ... \u00b3 ... );","title":"Cubed (operator)"},{"location":"abstract/op/exponent/#power-operator","text":"<expression_posit> ( ... ^ ... ); <expression_posit> ( ... ** ... ); <expression_posit> ( ... \ud835\udc65 y ... );","title":"Power (operator)"},{"location":"abstract/op/exponent/#square-root-operator","text":"<expression_posit> ( ... \u221a ... );","title":"Square Root (operator)"},{"location":"abstract/op/exponent/#forth-root-operator","text":"<expression_posit> ( ... \u221b ... );","title":"Forth Root (operator)"},{"location":"abstract/prop/","text":"Index (property) The index property provides the ordinal index of a multi-data storage object. The shortened version of i can be used. Getting To get the index from the preceding object, use the index posit (or shortened i ). The return will be a the value at the ordinal position of the preceding multi-data storage object . <object> _index(); <object> _i(); For an object with an array of hours, use the index (or shortened, i ) posit to determine which hour in the array you are getting. <object> _hour()_i( index_integer ); <object> _hr()_i( index_integer ); Setting As the hour posit with a hour_value paramter to set the temporal hour as a child (and so property) of the preceding object . <object> _hour( hour_value ); <object> _hour( hour_value ); Some objects allow for an array of hours. To set an array of hours, use multiple hour posits. Alternatively an array can be used to set hours in one hour posit. <object> _hour( {hour_value1} )_hr( {hour_value2} )_ ... <object> _hour([ hour_array_moniker ]); <object> _hr([ hour_array_moniker ]); ```diego add_ add_ary(legs)_v(front_left,front_right,hind_left,hind_right); log_console()_(legs)_i(0); add_var(front_legs)_(legs)_i(0,1); add_ary(hind) v(2,3) add_var(hind_legs) (legs)_i([hind]);","title":"Index (property)"},{"location":"abstract/prop/#index-property","text":"The index property provides the ordinal index of a multi-data storage object. The shortened version of i can be used.","title":"Index (property)"},{"location":"abstract/prop/#getting","text":"To get the index from the preceding object, use the index posit (or shortened i ). The return will be a the value at the ordinal position of the preceding multi-data storage object . <object> _index(); <object> _i(); For an object with an array of hours, use the index (or shortened, i ) posit to determine which hour in the array you are getting. <object> _hour()_i( index_integer ); <object> _hr()_i( index_integer );","title":"Getting"},{"location":"abstract/prop/#setting","text":"As the hour posit with a hour_value paramter to set the temporal hour as a child (and so property) of the preceding object . <object> _hour( hour_value ); <object> _hour( hour_value ); Some objects allow for an array of hours. To set an array of hours, use multiple hour posits. Alternatively an array can be used to set hours in one hour posit. <object> _hour( {hour_value1} )_hr( {hour_value2} )_ ... <object> _hour([ hour_array_moniker ]); <object> _hr([ hour_array_moniker ]); ```diego add_ add_ary(legs)_v(front_left,front_right,hind_left,hind_right); log_console()_(legs)_i(0); add_var(front_legs)_(legs)_i(0,1); add_ary(hind) v(2,3) add_var(hind_legs) (legs)_i([hind]);","title":"Setting"},{"location":"abstract/prop/adicity/","text":"Adicity (property) The adicity property provides the information of elements or members of the preceeding object . There is no adicity object . Arrangement [ arran arn arrangem arrangement ] When the adicity property is applied to a preceeding arran , the element information is provided as a comma-separated list ( , ), with the negative and positive ranges separated with a pipe ( | ). The default output of the arran object is also its adicity property, so the syntax is implied. There are no parameters. <arran> _adicity() <arran> For example: add_arran({int},arran1)_v(1,2,3,4,5,6,7,8); (arran1)_pop()_pop()_pop(); // pop the last/end three elements log_console()_(arran1)_adicity(); // 6,7,8|1,2,3,4,5 log_console()_(arran1); // 6,7,8|1,2,3,4,5 Date [ tempor temporal ] The adicity property is applied to the tempor object to provide details of members in the tempor object construction. The member information consists of the ISO 8601 / RFC 3339 implementation with Time Zone Extension and Calendar Extension. Any missing members are signified with a quesiton mark ( ? ). This property can be useful for testing: the extent of composition of the tempor construction; or, the understanding of a tempor as understood by a thingy. There are no parameters. <tempor> _adicity() Formating of the adicity property is achieved using the stringify function , for example: // 4 December 1973 Pioneer 10 reaches Jupiter // The convention for timezone in 'space' is UTC add_tempor(pioneer\ud83d\udc8bJupiter)_v(Dec 1973)_timezone(etc/utc); log_console()_tempor(pioneer\ud83d\udc8bJupiter)_adicity(); // 1973-12-??T??:??:??.????Z[Etc/UTC][u-ca=?] with_tempor(pioneer\ud83d\udc8bJupiter)_day(4); log_console()_tempor(pioneer\ud83d\udc8bJupiter)_adicity(); // 1973-12-04??:??:??.????Z[Etc/UTC][u-ca=?] log_console()_tempor(pioneer\ud83d\udc8bJupiter)_adicity()_stringify(JSON); // => // { // \"year\":1973, // \"month\":12, // \"day\":4, // \"dayofweek\":2 // } For a more detailed test of date composition, use the adicity property.","title":"Adicity (property)"},{"location":"abstract/prop/adicity/#adicity-property","text":"The adicity property provides the information of elements or members of the preceeding object . There is no adicity object .","title":"Adicity (property)"},{"location":"abstract/prop/adicity/#arrangement-arran-arn-arrangem-arrangement","text":"When the adicity property is applied to a preceeding arran , the element information is provided as a comma-separated list ( , ), with the negative and positive ranges separated with a pipe ( | ). The default output of the arran object is also its adicity property, so the syntax is implied. There are no parameters. <arran> _adicity() <arran> For example: add_arran({int},arran1)_v(1,2,3,4,5,6,7,8); (arran1)_pop()_pop()_pop(); // pop the last/end three elements log_console()_(arran1)_adicity(); // 6,7,8|1,2,3,4,5 log_console()_(arran1); // 6,7,8|1,2,3,4,5","title":" Arrangement [arran arn arrangem arrangement]"},{"location":"abstract/prop/adicity/#date-tempor-temporal","text":"The adicity property is applied to the tempor object to provide details of members in the tempor object construction. The member information consists of the ISO 8601 / RFC 3339 implementation with Time Zone Extension and Calendar Extension. Any missing members are signified with a quesiton mark ( ? ). This property can be useful for testing: the extent of composition of the tempor construction; or, the understanding of a tempor as understood by a thingy. There are no parameters. <tempor> _adicity() Formating of the adicity property is achieved using the stringify function , for example: // 4 December 1973 Pioneer 10 reaches Jupiter // The convention for timezone in 'space' is UTC add_tempor(pioneer\ud83d\udc8bJupiter)_v(Dec 1973)_timezone(etc/utc); log_console()_tempor(pioneer\ud83d\udc8bJupiter)_adicity(); // 1973-12-??T??:??:??.????Z[Etc/UTC][u-ca=?] with_tempor(pioneer\ud83d\udc8bJupiter)_day(4); log_console()_tempor(pioneer\ud83d\udc8bJupiter)_adicity(); // 1973-12-04??:??:??.????Z[Etc/UTC][u-ca=?] log_console()_tempor(pioneer\ud83d\udc8bJupiter)_adicity()_stringify(JSON); // => // { // \"year\":1973, // \"month\":12, // \"day\":4, // \"dayofweek\":2 // } For a more detailed test of date composition, use the adicity property.","title":" Date [tempor temporal]"},{"location":"abstract/prop/arity/","text":"Arity (property) The arity property provides the entire count members of the preceeding object , as a integer ( {int} ). It is most commonly used in collection objects , but this property in also available as a posit for non-collection objects . There is no arity object . Arrangement [ arran arn arrangem arrangement ] The common use of the arity property is as a posit applied to a preceeding arran . This is used to provide the count of elements in the arran from both the negative range and the positive range. There are no parameters. <arran> _arity() The length property of an arran can sometimes be confused with the arity property, but, the length (or len ) property for arran s only provides the positive range. For example: add_arran({int},arran1)_v(1,2,3,4,5,6,7,8); (arran1)_pop()_pop()_pop(); // pop the last/end three elements log_console()_(arran1); // 6,7,8|1,2,3,4,5 log_console()_(arran1)_length(); // 5 log_console()_(arran1)_arity(); // 8 Array [ array ary ] Due to the simularities of the array with the arran object , the arity property is provided for array s. However, unlike arran s, array s are not allowed a negative range, so the arity property becomes a equivalent to the _length (also _len ) property. There are no parameters. <array> _arity() ...is identical to... <array> _length() <array> _len() Date [ date ] The arity property is applied to the date object to provide the count of elements in the date object construction. This can be useful for testing: the extent of composition of the date construction; or, the understanding of a date by a thingy. There are no parameters. <date> _arity() For example: add_date(independenceDay)_v(04-Jul); log_console()_date(independenceDay)_arity(); // 2 with_date(independenceDay)_year(1776); log_console()_date(independenceDay)_arity(); // 3 For a more detailed test of date composition, use the adicity property.","title":"Arity (property)"},{"location":"abstract/prop/arity/#arity-property","text":"The arity property provides the entire count members of the preceeding object , as a integer ( {int} ). It is most commonly used in collection objects , but this property in also available as a posit for non-collection objects . There is no arity object .","title":"Arity (property)"},{"location":"abstract/prop/arity/#arrangement-arran-arn-arrangem-arrangement","text":"The common use of the arity property is as a posit applied to a preceeding arran . This is used to provide the count of elements in the arran from both the negative range and the positive range. There are no parameters. <arran> _arity() The length property of an arran can sometimes be confused with the arity property, but, the length (or len ) property for arran s only provides the positive range. For example: add_arran({int},arran1)_v(1,2,3,4,5,6,7,8); (arran1)_pop()_pop()_pop(); // pop the last/end three elements log_console()_(arran1); // 6,7,8|1,2,3,4,5 log_console()_(arran1)_length(); // 5 log_console()_(arran1)_arity(); // 8","title":" Arrangement [arran arn arrangem arrangement]"},{"location":"abstract/prop/arity/#array-array-ary","text":"Due to the simularities of the array with the arran object , the arity property is provided for array s. However, unlike arran s, array s are not allowed a negative range, so the arity property becomes a equivalent to the _length (also _len ) property. There are no parameters. <array> _arity() ...is identical to... <array> _length() <array> _len()","title":" Array [array ary]"},{"location":"abstract/prop/arity/#date-date","text":"The arity property is applied to the date object to provide the count of elements in the date object construction. This can be useful for testing: the extent of composition of the date construction; or, the understanding of a date by a thingy. There are no parameters. <date> _arity() For example: add_date(independenceDay)_v(04-Jul); log_console()_date(independenceDay)_arity(); // 2 with_date(independenceDay)_year(1776); log_console()_date(independenceDay)_arity(); // 3 For a more detailed test of date composition, use the adicity property.","title":" Date [date]"},{"location":"abstract/prop/day/","text":"Day (property) A day is a property to represent at temporal day of a date. Syntax <object> _day(); <object> _day( day_numeric ); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Day (property)"},{"location":"abstract/prop/day/#day-property","text":"A day is a property to represent at temporal day of a date.","title":"Day (property)"},{"location":"abstract/prop/day/#syntax","text":"<object> _day(); <object> _day( day_numeric );","title":"Syntax"},{"location":"abstract/prop/day/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/day/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/day/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/day/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/day/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/day/#typing","text":"","title":"Typing"},{"location":"abstract/prop/day/#getting","text":"","title":"Getting"},{"location":"abstract/prop/day/#setting","text":"","title":"Setting"},{"location":"abstract/prop/day/#casting","text":"","title":"Casting"},{"location":"abstract/prop/day/#properties","text":"","title":"Properties"},{"location":"abstract/prop/day/#examples","text":"","title":"Examples"},{"location":"abstract/prop/fortn/","text":"Fortnight (property) A fortn is a property to represent at temporal fortnight (two weeks), from a week-able calandar. It has an extended syntax of fortnight . Syntax <object> _fortn(); <object> _fortnight(); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Fortnight (property)"},{"location":"abstract/prop/fortn/#fortnight-property","text":"A fortn is a property to represent at temporal fortnight (two weeks), from a week-able calandar. It has an extended syntax of fortnight .","title":"Fortnight (property)"},{"location":"abstract/prop/fortn/#syntax","text":"<object> _fortn(); <object> _fortnight();","title":"Syntax"},{"location":"abstract/prop/fortn/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/fortn/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/fortn/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/fortn/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/fortn/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/fortn/#typing","text":"","title":"Typing"},{"location":"abstract/prop/fortn/#getting","text":"","title":"Getting"},{"location":"abstract/prop/fortn/#setting","text":"","title":"Setting"},{"location":"abstract/prop/fortn/#casting","text":"","title":"Casting"},{"location":"abstract/prop/fortn/#properties","text":"","title":"Properties"},{"location":"abstract/prop/fortn/#examples","text":"","title":"Examples"},{"location":"abstract/prop/freq/","text":"Temporal Frequency (property) The freq property with the {tempor} type provides a temporal regulated rate of events for a proceeding object (temporal frequency). The lengthened terms frequen , frequent , and, frequency can be used freely and interchangeably. A frequency expression is available, using the mathematical italic f symbol and square brackets ( \ud835\udc53[] ). Declaration Although the most common use of the temporal freq (or lengthened frequen , frequent , frequency ) property is via a posit with given unit and expression, the temporal freq property can be declared using the add_ verb, the {tempor} type , and, a moniker . Multiple temporal freq s cannot be declared with a single temporal freq declaration. add_freq({tempor}, moniker ); <object> _freq({tempor}, moniker ); It is common to declare the temporal freq property using its posit with a frequency_expression provided. If the frequency expression is assigned at declaration then the \u276c unit \u276d must be given, enclosed in angle brackets ( \u276c\u276d ). For temporal freq encies the {tempor} type must also be declared. The use of a moniker , is optional, but if used with a frequency expression it must be enclosed in moniker brackets ( \u27e6\u27e7 ). add_freq({tempor},\u276c unit \u276d, frequency_expression ); <object> _freq({tempor},\u276c unit \u276d, frequency_expression ); add_freq(\u27e6 moniker \u27e7,{tempor},\u276c unit \u276d, frequency_expression ); <object> _freq(\u27e6 moniker \u27e7,{tempor},\u276c unit \u276d, frequency_expression ); Referencing Referencing a temporal freq property is achieved with the with verb, or the shortened ( frequency_moniker ) syntax. with_freq( moniker ); ( frequency_moniker ); Assignment Assignments to the temporal freq property are achieved by using proceeding posits. add_poll({track},charger_share) ()_quest(energy_level)_gauge({nrg})_v(\u276curgency\u276d); ()_freq(\"quarter_hr\",\u276cmin\u276d,15); ; 7152273a91ae8a6be1e696d96c4104c2 7152273a91ae8a6be1e696d96c4104c2 with_poll(charger_share)_offreq(quarter_hr)_i()_quest(energy_level)_enum(nonurgent); Posits _posit description API _temporfrom A tempor to start the preceding object with the proceeding object definitions. temporfrom See Also Statistical Frequency Spatial Frequency Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Temporal Frequency (property)"},{"location":"abstract/prop/freq/#temporal-frequency-property","text":"The freq property with the {tempor} type provides a temporal regulated rate of events for a proceeding object (temporal frequency). The lengthened terms frequen , frequent , and, frequency can be used freely and interchangeably. A frequency expression is available, using the mathematical italic f symbol and square brackets ( \ud835\udc53[] ).","title":"Temporal Frequency (property)"},{"location":"abstract/prop/freq/#declaration","text":"Although the most common use of the temporal freq (or lengthened frequen , frequent , frequency ) property is via a posit with given unit and expression, the temporal freq property can be declared using the add_ verb, the {tempor} type , and, a moniker . Multiple temporal freq s cannot be declared with a single temporal freq declaration. add_freq({tempor}, moniker ); <object> _freq({tempor}, moniker ); It is common to declare the temporal freq property using its posit with a frequency_expression provided. If the frequency expression is assigned at declaration then the \u276c unit \u276d must be given, enclosed in angle brackets ( \u276c\u276d ). For temporal freq encies the {tempor} type must also be declared. The use of a moniker , is optional, but if used with a frequency expression it must be enclosed in moniker brackets ( \u27e6\u27e7 ). add_freq({tempor},\u276c unit \u276d, frequency_expression ); <object> _freq({tempor},\u276c unit \u276d, frequency_expression ); add_freq(\u27e6 moniker \u27e7,{tempor},\u276c unit \u276d, frequency_expression ); <object> _freq(\u27e6 moniker \u27e7,{tempor},\u276c unit \u276d, frequency_expression );","title":"Declaration"},{"location":"abstract/prop/freq/#referencing","text":"Referencing a temporal freq property is achieved with the with verb, or the shortened ( frequency_moniker ) syntax. with_freq( moniker ); ( frequency_moniker );","title":"Referencing"},{"location":"abstract/prop/freq/#assignment","text":"Assignments to the temporal freq property are achieved by using proceeding posits. add_poll({track},charger_share) ()_quest(energy_level)_gauge({nrg})_v(\u276curgency\u276d); ()_freq(\"quarter_hr\",\u276cmin\u276d,15); ; 7152273a91ae8a6be1e696d96c4104c2 7152273a91ae8a6be1e696d96c4104c2 with_poll(charger_share)_offreq(quarter_hr)_i()_quest(energy_level)_enum(nonurgent);","title":"Assignment"},{"location":"abstract/prop/freq/#posits","text":"_posit description API _temporfrom A tempor to start the preceding object with the proceeding object definitions. temporfrom","title":"Posits"},{"location":"abstract/prop/freq/#see-also","text":"Statistical Frequency Spatial Frequency","title":"See Also"},{"location":"abstract/prop/freq/#declaration_1","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/freq/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/freq/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/freq/#assignment_1","text":"","title":"Assignment"},{"location":"abstract/prop/freq/#referencing_1","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/freq/#typing","text":"","title":"Typing"},{"location":"abstract/prop/freq/#getting","text":"","title":"Getting"},{"location":"abstract/prop/freq/#setting","text":"","title":"Setting"},{"location":"abstract/prop/freq/#casting","text":"","title":"Casting"},{"location":"abstract/prop/freq/#properties","text":"","title":"Properties"},{"location":"abstract/prop/freq/#examples","text":"","title":"Examples"},{"location":"abstract/prop/hr/","text":"Hour (property) A hour is a property to represent at temporal (Earth) hour. It has a shortened syntax of hr . Getting To get the hour from the proceeding object, use the hour posit (or shortened hr ). The return will be a numeric values represent an temporal hour aspect of the preceding object . For a return representing a specific hours (rather than an amount of hours) the default format if not format posit is used. <object> _hour(); <object> _hr(); For an object with an array of hours, use the index (or shortened, i ) posit to determine which hour in the array you are getting. <object> _hour()_i( index_integer ); <object> _hr()_i( index_integer ); Setting As the hour posit with a hour_value paramter to set the temporal hour as a child (and so property) of the preceding object . <object> _hour( hour_value ); <object> _hour( hour_value ); Some objects allow for an array of hours. To set an array of hours, use multiple hour posits. Alternatively an array can be used to set hours in one hour posit. <object> _hour( {hour_value1} )_hr( {hour_value2} )_ ... <object> _hour([ hour_array_moniker ]); <object> _hr([ hour_array_moniker ]); Typing There are two types of types use for the hour property : the first is the format of the string {str} output; and, the format of the numeric output. Format Output: {type} Output Range Description {h} 0,1,...12,1...11 Hour integer without leading zero. {hh} 00,01,...12,01...11 Hour integer with leading zero. {H} 0,1,...12,13...23 24-Hour integer without leading zero. {HH} 00,01,...12,13...23 24-Hour integer with leading zero. Numeric Output: {type} Description {dh} Decimal hour, up to default decimal places. The default precision is one second equals 0.016666667 . Precision can be changed using the precision function . {h:m} Hours as integers and the minutes as 'firsts' ( \\(\\frac{1}{60}\\) ) of the hour, separated by commas ( : ). {h:m:s} Hours as integers and the minutes as 'firsts' ( \\(\\frac{1}{60}\\) ) of the hour, and seconds as 'seconds' ( \\(\\frac{1}{3600}\\) ) of the hour, separated by commas ( : ). Uniting In a similar way to typing, the hour property can also be cast or formatted as a unit. <object> _ <posit> (\u276chour\u276d, ... ); <object> _ <posit> (\u276chr\u276d, ... ); Casting Casting an hour property requires the tohour posit (or shortened tohr ), both a single hour and an array of hours. <object> _tohour( hour_value ); <object> _tohour( {hour_value_cast_to1} )_tohr( {hour_value_cast_to2} )_ ... <object> _tohour([ hour_array__cast_to_moniker ]); <object> _tohr([ hour_array__cast_to_moniker ]); Objecting Objecting for the hour property are mostly confined to preceding temporal objects . However, immediate preceding lesser temporal objects ( seconds , milliseconds , and microseconds siblings), will be skipped until either an elder sibling ( jour , day , month , year ) or a parent ( tempor ) precedes. Minute With minute as the preceding object the hour posit will","title":"Hour (property)"},{"location":"abstract/prop/hr/#hour-property","text":"A hour is a property to represent at temporal (Earth) hour. It has a shortened syntax of hr .","title":"Hour (property)"},{"location":"abstract/prop/hr/#getting","text":"To get the hour from the proceeding object, use the hour posit (or shortened hr ). The return will be a numeric values represent an temporal hour aspect of the preceding object . For a return representing a specific hours (rather than an amount of hours) the default format if not format posit is used. <object> _hour(); <object> _hr(); For an object with an array of hours, use the index (or shortened, i ) posit to determine which hour in the array you are getting. <object> _hour()_i( index_integer ); <object> _hr()_i( index_integer );","title":"Getting"},{"location":"abstract/prop/hr/#setting","text":"As the hour posit with a hour_value paramter to set the temporal hour as a child (and so property) of the preceding object . <object> _hour( hour_value ); <object> _hour( hour_value ); Some objects allow for an array of hours. To set an array of hours, use multiple hour posits. Alternatively an array can be used to set hours in one hour posit. <object> _hour( {hour_value1} )_hr( {hour_value2} )_ ... <object> _hour([ hour_array_moniker ]); <object> _hr([ hour_array_moniker ]);","title":"Setting"},{"location":"abstract/prop/hr/#typing","text":"There are two types of types use for the hour property : the first is the format of the string {str} output; and, the format of the numeric output. Format Output: {type} Output Range Description {h} 0,1,...12,1...11 Hour integer without leading zero. {hh} 00,01,...12,01...11 Hour integer with leading zero. {H} 0,1,...12,13...23 24-Hour integer without leading zero. {HH} 00,01,...12,13...23 24-Hour integer with leading zero. Numeric Output: {type} Description {dh} Decimal hour, up to default decimal places. The default precision is one second equals 0.016666667 . Precision can be changed using the precision function . {h:m} Hours as integers and the minutes as 'firsts' ( \\(\\frac{1}{60}\\) ) of the hour, separated by commas ( : ). {h:m:s} Hours as integers and the minutes as 'firsts' ( \\(\\frac{1}{60}\\) ) of the hour, and seconds as 'seconds' ( \\(\\frac{1}{3600}\\) ) of the hour, separated by commas ( : ).","title":"Typing"},{"location":"abstract/prop/hr/#uniting","text":"In a similar way to typing, the hour property can also be cast or formatted as a unit. <object> _ <posit> (\u276chour\u276d, ... ); <object> _ <posit> (\u276chr\u276d, ... );","title":"Uniting"},{"location":"abstract/prop/hr/#casting","text":"Casting an hour property requires the tohour posit (or shortened tohr ), both a single hour and an array of hours. <object> _tohour( hour_value ); <object> _tohour( {hour_value_cast_to1} )_tohr( {hour_value_cast_to2} )_ ... <object> _tohour([ hour_array__cast_to_moniker ]); <object> _tohr([ hour_array__cast_to_moniker ]);","title":"Casting"},{"location":"abstract/prop/hr/#objecting","text":"Objecting for the hour property are mostly confined to preceding temporal objects . However, immediate preceding lesser temporal objects ( seconds , milliseconds , and microseconds siblings), will be skipped until either an elder sibling ( jour , day , month , year ) or a parent ( tempor ) precedes.","title":"Objecting"},{"location":"abstract/prop/hr/#minute","text":"With minute as the preceding object the hour posit will","title":"Minute"},{"location":"abstract/prop/instant/","text":"Instant (property) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Instant (property)"},{"location":"abstract/prop/instant/#instant-property","text":"","title":"Instant (property)"},{"location":"abstract/prop/instant/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/instant/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/instant/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/instant/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/instant/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/instant/#typing","text":"","title":"Typing"},{"location":"abstract/prop/instant/#getting","text":"","title":"Getting"},{"location":"abstract/prop/instant/#setting","text":"","title":"Setting"},{"location":"abstract/prop/instant/#casting","text":"","title":"Casting"},{"location":"abstract/prop/instant/#properties","text":"","title":"Properties"},{"location":"abstract/prop/instant/#examples","text":"","title":"Examples"},{"location":"abstract/prop/keys/","text":"Keys (property) Provides an array of keys, in input order. ```deigo log_console()_ary(myArray)_keys(); // 0,1,2,3,4,5,6,7 hash dict enum flag Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Keys (property)"},{"location":"abstract/prop/keys/#keys-property","text":"Provides an array of keys, in input order. ```deigo log_console()_ary(myArray)_keys(); // 0,1,2,3,4,5,6,7 hash dict enum flag","title":"Keys (property)"},{"location":"abstract/prop/keys/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/keys/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/keys/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/keys/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/keys/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/keys/#typing","text":"","title":"Typing"},{"location":"abstract/prop/keys/#getting","text":"","title":"Getting"},{"location":"abstract/prop/keys/#setting","text":"","title":"Setting"},{"location":"abstract/prop/keys/#casting","text":"","title":"Casting"},{"location":"abstract/prop/keys/#properties","text":"","title":"Properties"},{"location":"abstract/prop/keys/#examples","text":"","title":"Examples"},{"location":"abstract/prop/min/","text":"Minute (property) A minute is a property to represent at temporal (Earth) minute. It has a shortened syntax of min . Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Minute (property)"},{"location":"abstract/prop/min/#minute-property","text":"A minute is a property to represent at temporal (Earth) minute. It has a shortened syntax of min .","title":"Minute (property)"},{"location":"abstract/prop/min/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/min/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/min/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/min/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/min/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/min/#typing","text":"","title":"Typing"},{"location":"abstract/prop/min/#getting","text":"","title":"Getting"},{"location":"abstract/prop/min/#setting","text":"","title":"Setting"},{"location":"abstract/prop/min/#casting","text":"","title":"Casting"},{"location":"abstract/prop/min/#properties","text":"","title":"Properties"},{"location":"abstract/prop/min/#examples","text":"","title":"Examples"},{"location":"abstract/prop/ms/","text":"Millisecond (property) A millisecond is a property to represent at temporal (Earth) millisecond or \\(\\frac{1}{1000}\\) of a second . It has a shortened syntax of ms . Getting To get the millisecond from the proceeding object, use the millisecond posit (or shortened ms ). The return will be a numeric values represent an temporal millisecond aspect of the preceding object . For a return representing a specific millisecond (rather than an amount of millisecond) the default format is used, if not format posit is used. <object> _millisecond(); <object> _ms(); For an object with an array of seconds, use the index (or shortened, i ) posit to determine which second in the array you are getting. <object> _millisecond()_i( index_integer ); <object> _ms_()_i( index_integer ); Setting As the millisecond posit with a millisecond_value parameter to set the temporal millisecond as a child (and so property) of the preceding object . <object> _millisecond( millisecond_value ); <object> _ms( millisecond_value ); Some objects allow for an array of milliseconds. To set an array of milliseconds, use multiple millisecond posits. Alternatively an array can be used to set seconds in one millisecond posit. <object> _millisecond( {millisecond_value1} )_ms( {millisecond_value2} )_ ... <object> _millisecond([ millisecond_array_moniker ]); <object> _ms([ millisecond_array_moniker ]);","title":"Millisecond (property)"},{"location":"abstract/prop/ms/#millisecond-property","text":"A millisecond is a property to represent at temporal (Earth) millisecond or \\(\\frac{1}{1000}\\) of a second . It has a shortened syntax of ms .","title":"Millisecond (property)"},{"location":"abstract/prop/ms/#getting","text":"To get the millisecond from the proceeding object, use the millisecond posit (or shortened ms ). The return will be a numeric values represent an temporal millisecond aspect of the preceding object . For a return representing a specific millisecond (rather than an amount of millisecond) the default format is used, if not format posit is used. <object> _millisecond(); <object> _ms(); For an object with an array of seconds, use the index (or shortened, i ) posit to determine which second in the array you are getting. <object> _millisecond()_i( index_integer ); <object> _ms_()_i( index_integer );","title":"Getting"},{"location":"abstract/prop/ms/#setting","text":"As the millisecond posit with a millisecond_value parameter to set the temporal millisecond as a child (and so property) of the preceding object . <object> _millisecond( millisecond_value ); <object> _ms( millisecond_value ); Some objects allow for an array of milliseconds. To set an array of milliseconds, use multiple millisecond posits. Alternatively an array can be used to set seconds in one millisecond posit. <object> _millisecond( {millisecond_value1} )_ms( {millisecond_value2} )_ ... <object> _millisecond([ millisecond_array_moniker ]); <object> _ms([ millisecond_array_moniker ]);","title":"Setting"},{"location":"abstract/prop/mth/","text":"Month (property) Month (property) A month is a property to represent at temporal month, from a month-able calandar. It has a shortened syntax of mth . Syntax <object> _month(); <object> _mth(); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Month (property)"},{"location":"abstract/prop/mth/#month-property","text":"","title":"Month (property)"},{"location":"abstract/prop/mth/#month-property_1","text":"A month is a property to represent at temporal month, from a month-able calandar. It has a shortened syntax of mth .","title":"Month (property)"},{"location":"abstract/prop/mth/#syntax","text":"<object> _month(); <object> _mth();","title":"Syntax"},{"location":"abstract/prop/mth/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/mth/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/mth/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/mth/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/mth/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/mth/#typing","text":"","title":"Typing"},{"location":"abstract/prop/mth/#getting","text":"","title":"Getting"},{"location":"abstract/prop/mth/#setting","text":"","title":"Setting"},{"location":"abstract/prop/mth/#casting","text":"","title":"Casting"},{"location":"abstract/prop/mth/#properties","text":"","title":"Properties"},{"location":"abstract/prop/mth/#examples","text":"","title":"Examples"},{"location":"abstract/prop/now/","text":"Now | _now() _now( dateformat ) | Provides the exact datetime Provides the exact datetime in format dateformat | now | dateformat description instant Provides the current time, without regard to calendar or time zone zoned_datetime_iso Provides the current current system date, time, time zone, and time zone offset zoned_datetime Provides the current system date, time, time zone, and time zone offset time_zone Provides the time zone according to the thingy's settings (aligns to IANA time zones ) plan_datetime_iso Provides the current system date and time in the reckoning of the ISO 8601 calendar plan_datetime Provides the current system date and time in the reckoning of the caller's calendar or proceeding calendar plan_date_iso Provides the current system date in the reckoning of the ISO 8601 calendar plan_date Provides the current system date in the reckoning of the caller's calendar or proceeding calendar plan_time_iso Provides the current system time in the reckoning of the ISO 8601 calendar Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Now"},{"location":"abstract/prop/now/#now","text":"| _now() _now( dateformat ) | Provides the exact datetime Provides the exact datetime in format dateformat | now | dateformat description instant Provides the current time, without regard to calendar or time zone zoned_datetime_iso Provides the current current system date, time, time zone, and time zone offset zoned_datetime Provides the current system date, time, time zone, and time zone offset time_zone Provides the time zone according to the thingy's settings (aligns to IANA time zones ) plan_datetime_iso Provides the current system date and time in the reckoning of the ISO 8601 calendar plan_datetime Provides the current system date and time in the reckoning of the caller's calendar or proceeding calendar plan_date_iso Provides the current system date in the reckoning of the ISO 8601 calendar plan_date Provides the current system date in the reckoning of the caller's calendar or proceeding calendar plan_time_iso Provides the current system time in the reckoning of the ISO 8601 calendar","title":"Now"},{"location":"abstract/prop/now/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/now/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/now/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/now/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/now/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/now/#typing","text":"","title":"Typing"},{"location":"abstract/prop/now/#getting","text":"","title":"Getting"},{"location":"abstract/prop/now/#setting","text":"","title":"Setting"},{"location":"abstract/prop/now/#casting","text":"","title":"Casting"},{"location":"abstract/prop/now/#properties","text":"","title":"Properties"},{"location":"abstract/prop/now/#examples","text":"","title":"Examples"},{"location":"abstract/prop/s/","text":"Second (property) A second is a property to represent at temporal (Earth) second or \\(\\frac{1}{3600}\\) of a hour. It has a shortened syntax of sec . Getting To get the second from the proceeding object, use the second posit (or shortened sec ). The return will be a numeric values represent an temporal second aspect of the preceding object . For a return representing a specific second (rather than an amount of seconds) the default format is used, if not format posit is used. <object> _second(); <object> _sec(); For an object with an array of seconds, use the index (or shortened, i ) posit to determine which second in the array you are getting. <object> _second()_i( index_integer ); <object> _sec()_i( index_integer ); Setting As the second posit with a second_value parameter to set the temporal second as a child (and so property) of the preceding object . <object> _second( second_value ); <object> _sec( second_value ); Some objects allow for an array of seconds. To set an array of seconds, use multiple second posits. Alternatively an array can be used to set seconds in one second posit. <object> _second( {second_value1} )_sec( {second_value2} )_ ... <object> _second([ second_array_moniker ]); <object> _sec([ second_array_moniker ]); Typing There are two types of types use for the second property : the first is the format of the string {str} output; and, the format of the numeric output. Format Output: {type} Output Range Description {} . Numeric Output: {type} Description {} Uniting In a similar way to typing, the second property can also be cast or formatted as a unit. <object> _ <posit> (\u276csecond\u276d, ... ); <object> _ <posit> (\u276csec\u276d, ... ); Casting Casting an second property requires the tosecond posit (or shortened tosec ), both a single second and an array of seconds. <object> _tosecond( second_value ); <object> _tosecond( {second_value_cast_to1} )_tosec( {second_value_cast_to2} )_ ... <object> _tosecond([ second_array__cast_to_moniker ]); <object> _tosec([ second_array__cast_to_moniker ]); Objecting Objecting for the second property are mostly confined to preceding temporal objects . However, immediate preceding lesser temporal objects ( milliseconds , and microseconds siblings), will be skipped until either an elder sibling ( hour , jour , day , month , year ) or a parent ( tempor ) precedes.","title":"Second (property)"},{"location":"abstract/prop/s/#second-property","text":"A second is a property to represent at temporal (Earth) second or \\(\\frac{1}{3600}\\) of a hour. It has a shortened syntax of sec .","title":"Second (property)"},{"location":"abstract/prop/s/#getting","text":"To get the second from the proceeding object, use the second posit (or shortened sec ). The return will be a numeric values represent an temporal second aspect of the preceding object . For a return representing a specific second (rather than an amount of seconds) the default format is used, if not format posit is used. <object> _second(); <object> _sec(); For an object with an array of seconds, use the index (or shortened, i ) posit to determine which second in the array you are getting. <object> _second()_i( index_integer ); <object> _sec()_i( index_integer );","title":"Getting"},{"location":"abstract/prop/s/#setting","text":"As the second posit with a second_value parameter to set the temporal second as a child (and so property) of the preceding object . <object> _second( second_value ); <object> _sec( second_value ); Some objects allow for an array of seconds. To set an array of seconds, use multiple second posits. Alternatively an array can be used to set seconds in one second posit. <object> _second( {second_value1} )_sec( {second_value2} )_ ... <object> _second([ second_array_moniker ]); <object> _sec([ second_array_moniker ]);","title":"Setting"},{"location":"abstract/prop/s/#typing","text":"There are two types of types use for the second property : the first is the format of the string {str} output; and, the format of the numeric output. Format Output: {type} Output Range Description {} . Numeric Output: {type} Description {}","title":"Typing"},{"location":"abstract/prop/s/#uniting","text":"In a similar way to typing, the second property can also be cast or formatted as a unit. <object> _ <posit> (\u276csecond\u276d, ... ); <object> _ <posit> (\u276csec\u276d, ... );","title":"Uniting"},{"location":"abstract/prop/s/#casting","text":"Casting an second property requires the tosecond posit (or shortened tosec ), both a single second and an array of seconds. <object> _tosecond( second_value ); <object> _tosecond( {second_value_cast_to1} )_tosec( {second_value_cast_to2} )_ ... <object> _tosecond([ second_array__cast_to_moniker ]); <object> _tosec([ second_array__cast_to_moniker ]);","title":"Casting"},{"location":"abstract/prop/s/#objecting","text":"Objecting for the second property are mostly confined to preceding temporal objects . However, immediate preceding lesser temporal objects ( milliseconds , and microseconds siblings), will be skipped until either an elder sibling ( hour , jour , day , month , year ) or a parent ( tempor ) precedes.","title":"Objecting"},{"location":"abstract/prop/txt/","text":"Text (expression) The txt (or lengthened text ) expressive object provides a portion of written text. Declaration Although the most common use of the txt expression is via a posit, it can be declared using the add_ verb (or shortened +_ ). Since the txt object is expressive the be expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ) can be used directly, i.e. in place of the brackets ( () ). Multiple txt s are declared using a coma-separated list of moniker s. If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_text( moniker ); add_txt( moniker1 , moniker2 , ... ); +_txt\u27e6 expression \u27e7; +_txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_txt( moniker ,\u27e6 expression \u27e7); +_txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); The common declaration of the txt object is via posit syntax. <object> _text( moniker ); <object> _txt( moniker1 , moniker2 , ... ); <object> _txt\u27e6 expression \u27e7; <object> _txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); <object> _txt( moniker ,\u27e6 expression \u27e7); <object> _txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); Referencing Referencing a txt object is achieved with the with verb (or shortened >_ ), or the shortened ( text_moniker ) syntax. with_txt( moniker ); >_txt( moniker ); ( text_moniker ); Assignment Only other expressions can be assigned to the calc object . with_calc(\u27e6 moniker \u27e7, expression ); (\u27e6 calculation_moniker \u27e7, expression ); _format _unit() Operators operator description API ... [ variable_moniker ] ... Variable call. variable ... { object_moniker } ... ... { object_moniker . child_object_moniker } ... ... { object_moniker . child_object_moniker . property_moniker } ... Object call. object ... \\n ... New line. ... \\r ... Carriage return. ... : emoji_moniker : ... Emoji. emoji ... $ math_sub-expression $ ... Maths. math ... ... . ... ... . ... ... . Posits posit description API _chapter A key-value dict dipicting the main division dict, with number ( key ) and a line of metrical writing text([first_name] [last_name]\\n[mailing_street]\\n[city]) // John Zimmmermann // 1 Home Street // Home City add_txt(The_Count_of_Monte_Cristo); with_txt(The_Count_of_Monte_Cristo) add_txt({en},\u27e6When Dant\u00e8s returned next morning to the chamber of his companion in captivity, he found Faria seated and looking composed. In the ray of light which entered by the narrow window of his cell, he held open in his left hand, of which alone, it will be recollected, he retained the use, a morsel of paper, which, from being constantly rolled into a small compass, had the form of a cylinder, and was not easily kept open. He did not speak, but showed the paper to Dant\u00e8s.\u27e7) ()_vol(1)_chapter([18],The Treasure)_para(1); add_txt\u27e6Lorsque Dant\u00e8s rentra le lendemain matin dans la chambre de son compagnon de captivit\u00e9, il trouva Faria assis, le visage calme. Sous le rayon qui glissait \u00e0 travers l\u2019\u00e9troite fen\u00eatre de sa cellule, il tenait ouvert dans sa main gauche, la seule, on se le rappelle, dont l\u2019usage lui f\u00fbt rest\u00e9, un morceau de papier, auquel l\u2019habitude d\u2019\u00eatre roul\u00e9 en un mince volume avait imprim\u00e9 la forme d\u2019un cylindre rebelle \u00e0 s\u2019\u00e9tendre.\u27e7 ()_vol(1)_chapter([18],Le Tr\u00e9sor)_para(1,2)_lang(fr); ; ; log_console()_(The_Count_of_Monte_Cristo)_i()_wordcount(); // 87,72 log_console()_(The_Count_of_Monte_Cristo)_i(0)_charcount(); // 468 log_console()_(The_Count_of_Monte_Cristo,[1])_paracount(); // 2 log_console()_chapter(The Treasure)_wordlenavg(); // 4.4 log_console()_chapter[18]_syllablecount(); // 120,115","title":"Text (expression)"},{"location":"abstract/prop/txt/#text-expression","text":"The txt (or lengthened text ) expressive object provides a portion of written text.","title":"Text (expression)"},{"location":"abstract/prop/txt/#declaration","text":"Although the most common use of the txt expression is via a posit, it can be declared using the add_ verb (or shortened +_ ). Since the txt object is expressive the be expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ) can be used directly, i.e. in place of the brackets ( () ). Multiple txt s are declared using a coma-separated list of moniker s. If a moniker is used with an expression, the expression must be enclosed in expression brackets ( \u27e6\u27e7 ) or double square brackets ( [[]] ). add_text( moniker ); add_txt( moniker1 , moniker2 , ... ); +_txt\u27e6 expression \u27e7; +_txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); +_txt( moniker ,\u27e6 expression \u27e7); +_txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7); The common declaration of the txt object is via posit syntax. <object> _text( moniker ); <object> _txt( moniker1 , moniker2 , ... ); <object> _txt\u27e6 expression \u27e7; <object> _txt(\u27e6 expression1 \u27e7,\u27e6 expression2 \u27e7,\u27e6 ... \u27e7); <object> _txt( moniker ,\u27e6 expression \u27e7); <object> _txt( moniker1 ,\u27e6 expression1 \u27e7, moniker2 ,\u27e6 expression2 \u27e7, moniker... ,\u27e6 expression... \u27e7);","title":"Declaration"},{"location":"abstract/prop/txt/#referencing","text":"Referencing a txt object is achieved with the with verb (or shortened >_ ), or the shortened ( text_moniker ) syntax. with_txt( moniker ); >_txt( moniker ); ( text_moniker );","title":"Referencing"},{"location":"abstract/prop/txt/#assignment","text":"Only other expressions can be assigned to the calc object . with_calc(\u27e6 moniker \u27e7, expression ); (\u27e6 calculation_moniker \u27e7, expression ); _format _unit()","title":"Assignment"},{"location":"abstract/prop/txt/#operators","text":"operator description API ... [ variable_moniker ] ... Variable call. variable ... { object_moniker } ... ... { object_moniker . child_object_moniker } ... ... { object_moniker . child_object_moniker . property_moniker } ... Object call. object ... \\n ... New line. ... \\r ... Carriage return. ... : emoji_moniker : ... Emoji. emoji ... $ math_sub-expression $ ... Maths. math ... ... . ... ... . ... ... .","title":"Operators"},{"location":"abstract/prop/txt/#posits","text":"posit description API _chapter A key-value dict dipicting the main division dict, with number ( key ) and a line of metrical writing text([first_name] [last_name]\\n[mailing_street]\\n[city]) // John Zimmmermann // 1 Home Street // Home City add_txt(The_Count_of_Monte_Cristo); with_txt(The_Count_of_Monte_Cristo) add_txt({en},\u27e6When Dant\u00e8s returned next morning to the chamber of his companion in captivity, he found Faria seated and looking composed. In the ray of light which entered by the narrow window of his cell, he held open in his left hand, of which alone, it will be recollected, he retained the use, a morsel of paper, which, from being constantly rolled into a small compass, had the form of a cylinder, and was not easily kept open. He did not speak, but showed the paper to Dant\u00e8s.\u27e7) ()_vol(1)_chapter([18],The Treasure)_para(1); add_txt\u27e6Lorsque Dant\u00e8s rentra le lendemain matin dans la chambre de son compagnon de captivit\u00e9, il trouva Faria assis, le visage calme. Sous le rayon qui glissait \u00e0 travers l\u2019\u00e9troite fen\u00eatre de sa cellule, il tenait ouvert dans sa main gauche, la seule, on se le rappelle, dont l\u2019usage lui f\u00fbt rest\u00e9, un morceau de papier, auquel l\u2019habitude d\u2019\u00eatre roul\u00e9 en un mince volume avait imprim\u00e9 la forme d\u2019un cylindre rebelle \u00e0 s\u2019\u00e9tendre.\u27e7 ()_vol(1)_chapter([18],Le Tr\u00e9sor)_para(1,2)_lang(fr); ; ; log_console()_(The_Count_of_Monte_Cristo)_i()_wordcount(); // 87,72 log_console()_(The_Count_of_Monte_Cristo)_i(0)_charcount(); // 468 log_console()_(The_Count_of_Monte_Cristo,[1])_paracount(); // 2 log_console()_chapter(The Treasure)_wordlenavg(); // 4.4 log_console()_chapter[18]_syllablecount(); // 120,115","title":"Posits"},{"location":"abstract/prop/yr/","text":"Year (property) A year is a property to represent at temporal (Earth) year. It has a shortened syntax of yr . Getting To get the year from the proceeding object, use the year posit (or shortened yr ). The return will be a numeric values represent an temporal year aspect of the preceding object . For a return representing a specific year (rather than an amount of years) the default format if not format posit is used. <object> _year(); <object> _yr(); For an object with an array of years, use the index (or shortened, i ) posit to determine which year in the array you are getting. <object> _year()_i( index_integer ); <object> _yr()_i( index_integer ); Setting As the year posit with a year_value parameter to set the temporal year as a child (and so property) of the preceding object . <object> _year( year_value ); <object> _year( year_value ); Some objects allow for an array of years. To set an array of years, use multiple year posits. Alternatively an array can be used to set years in one year posit. <object> _year( {year_value1} )_yr( {year_value2} )_ ... <object> _year([ year_array_moniker ]); <object> _yr([ year_array_moniker ]); Typing There are two types of types use for the year property : the first is the format of the string {str} output; and, the format of the numeric output. Format Output: {type} Output Range Description {} . Numeric Output: {type} Description {} Uniting In a similar way to typing, the year property can also be cast or formatted as a unit. <object> _ <posit> (\u276cyear\u276d, ... ); <object> _ <posit> (\u276cyr\u276d, ... ); Casting Casting an year property requires the toyear posit (or shortened toyr ), both a single year and an array of years. <object> _toyear( year_value ); <object> _toyear( {year_value_cast_to1} )_toyr( {year_value_cast_to2} )_ ... <object> _toyear([ year_array__cast_to_moniker ]); <object> _toyr([ year_array__cast_to_moniker ]); Objecting Objecting for the year property are mostly confined to preceding temporal objects . However, immediate preceding lesser temporal objects ( milliyears , and microyears siblings), will be skipped until either an elder sibling ( hour , jour , day , month , year ) or a parent ( tempor ) precedes.","title":"Year (property)"},{"location":"abstract/prop/yr/#year-property","text":"A year is a property to represent at temporal (Earth) year. It has a shortened syntax of yr .","title":"Year (property)"},{"location":"abstract/prop/yr/#getting","text":"To get the year from the proceeding object, use the year posit (or shortened yr ). The return will be a numeric values represent an temporal year aspect of the preceding object . For a return representing a specific year (rather than an amount of years) the default format if not format posit is used. <object> _year(); <object> _yr(); For an object with an array of years, use the index (or shortened, i ) posit to determine which year in the array you are getting. <object> _year()_i( index_integer ); <object> _yr()_i( index_integer );","title":"Getting"},{"location":"abstract/prop/yr/#setting","text":"As the year posit with a year_value parameter to set the temporal year as a child (and so property) of the preceding object . <object> _year( year_value ); <object> _year( year_value ); Some objects allow for an array of years. To set an array of years, use multiple year posits. Alternatively an array can be used to set years in one year posit. <object> _year( {year_value1} )_yr( {year_value2} )_ ... <object> _year([ year_array_moniker ]); <object> _yr([ year_array_moniker ]);","title":"Setting"},{"location":"abstract/prop/yr/#typing","text":"There are two types of types use for the year property : the first is the format of the string {str} output; and, the format of the numeric output. Format Output: {type} Output Range Description {} . Numeric Output: {type} Description {}","title":"Typing"},{"location":"abstract/prop/yr/#uniting","text":"In a similar way to typing, the year property can also be cast or formatted as a unit. <object> _ <posit> (\u276cyear\u276d, ... ); <object> _ <posit> (\u276cyr\u276d, ... );","title":"Uniting"},{"location":"abstract/prop/yr/#casting","text":"Casting an year property requires the toyear posit (or shortened toyr ), both a single year and an array of years. <object> _toyear( year_value ); <object> _toyear( {year_value_cast_to1} )_toyr( {year_value_cast_to2} )_ ... <object> _toyear([ year_array__cast_to_moniker ]); <object> _toyr([ year_array__cast_to_moniker ]);","title":"Casting"},{"location":"abstract/prop/yr/#objecting","text":"Objecting for the year property are mostly confined to preceding temporal objects . However, immediate preceding lesser temporal objects ( milliyears , and microyears siblings), will be skipped until either an elder sibling ( hour , jour , day , month , year ) or a parent ( tempor ) precedes.","title":"Objecting"},{"location":"abstract/prop/%CE%BCs/","text":"Microsecond (property) A microsecond is a property to represent at temporal (Earth) microsecond. It has shortened syntax of \u03bcs and microsec . Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Microsecond (property)"},{"location":"abstract/prop/%CE%BCs/#microsecond-property","text":"A microsecond is a property to represent at temporal (Earth) microsecond. It has shortened syntax of \u03bcs and microsec .","title":"Microsecond (property)"},{"location":"abstract/prop/%CE%BCs/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/prop/%CE%BCs/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/prop/%CE%BCs/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/prop/%CE%BCs/#assignment","text":"","title":"Assignment"},{"location":"abstract/prop/%CE%BCs/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/prop/%CE%BCs/#typing","text":"","title":"Typing"},{"location":"abstract/prop/%CE%BCs/#getting","text":"","title":"Getting"},{"location":"abstract/prop/%CE%BCs/#setting","text":"","title":"Setting"},{"location":"abstract/prop/%CE%BCs/#casting","text":"","title":"Casting"},{"location":"abstract/prop/%CE%BCs/#properties","text":"","title":"Properties"},{"location":"abstract/prop/%CE%BCs/#examples","text":"","title":"Examples"},{"location":"abstract/setter/decpl/","text":"Fixed Decimal Places (setter) use_me(); set_decpl(4); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... `); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Fixed Decimal Places (setter)"},{"location":"abstract/setter/decpl/#fixed-decimal-places-setter","text":"use_me(); set_decpl(4);","title":"Fixed Decimal Places (setter)"},{"location":"abstract/setter/decpl/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/setter/decpl/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/setter/decpl/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/setter/decpl/#assignment","text":"","title":"Assignment"},{"location":"abstract/setter/decpl/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... `);","title":"Referencing"},{"location":"abstract/setter/decpl/#declaration_1","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/setter/decpl/#declaration-assignment_1","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/setter/decpl/#initialisation_1","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/setter/decpl/#assignment_1","text":"","title":"Assignment"},{"location":"abstract/setter/decpl/#referencing_1","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/setter/decpl/#typing","text":"","title":"Typing"},{"location":"abstract/setter/decpl/#getting","text":"","title":"Getting"},{"location":"abstract/setter/decpl/#setting","text":"","title":"Setting"},{"location":"abstract/setter/decpl/#casting","text":"","title":"Casting"},{"location":"abstract/setter/decpl/#properties","text":"","title":"Properties"},{"location":"abstract/setter/decpl/#examples","text":"( _moniker );","title":"Examples"},{"location":"abstract/setter/decpl/#typing_1","text":"","title":"Typing"},{"location":"abstract/setter/decpl/#getting_1","text":"","title":"Getting"},{"location":"abstract/setter/decpl/#setting_1","text":"","title":"Setting"},{"location":"abstract/setter/decpl/#casting_1","text":"","title":"Casting"},{"location":"abstract/setter/decpl/#properties_1","text":"","title":"Properties"},{"location":"abstract/setter/decpl/#examples_1","text":"","title":"Examples"},{"location":"abstract/special/elvish/","text":"Elvish Operator (special) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Elvish Operator (special)"},{"location":"abstract/special/elvish/#elvish-operator-special","text":"","title":"Elvish Operator (special)"},{"location":"abstract/special/elvish/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/special/elvish/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/special/elvish/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/special/elvish/#assignment","text":"","title":"Assignment"},{"location":"abstract/special/elvish/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/special/elvish/#typing","text":"","title":"Typing"},{"location":"abstract/special/elvish/#getting","text":"","title":"Getting"},{"location":"abstract/special/elvish/#setting","text":"","title":"Setting"},{"location":"abstract/special/elvish/#casting","text":"","title":"Casting"},{"location":"abstract/special/elvish/#properties","text":"","title":"Properties"},{"location":"abstract/special/elvish/#examples","text":"","title":"Examples"},{"location":"abstract/special/me/","text":"Me (special) me me depicts the caller from its perspective. It is a special case object that can also be used as a verb. Options and postpositions of me are dependent on the genera of the caller (of the me ). me also has the required ' genesis event ' for every genera of thingy (excluding console ). Genesis Event Syntax: me(); The simplest and recommended approach to starting the genesis event for a thingy is to just command me(); . However, there are several other anthropomorphic approaches to initiate the genesis event, if me(); has not already been commanded... me({moniker}); with_me({moniker}); me_id({id}); with_me()_id({id}); me_moniker({moniker}); with_me()_moinker({moinker}); me_name({name}); with_me()_name({name}); The genesis event can also be initiated by assigning its uuid , however, this approach cannot secure reliable uniqueness. me_uuid({me_uuid}); me_id(me_uuid); with_me()_uuid({me_uuid}); Identification Syntax: me_id(self_uuid); me_id()_type(serial_number)_value({serial_number}); me_id()_type(phone_number)_value({phone_number}); me_id()_type(phone_number)_value({country_number},{region_number},{phone_number}); me_id({id}); with_me()_id({id}); me_serialnum({serial_number}); with_me()_me_serialnum({serial_number}); me_id()_type({id_type})_value({id_value}); with_me()_id()_type({id_type})_value({id_value}); The id_type s available for the me_id()_type({id_type})... and with_me()_id()_type({ide_type}) are as follows: id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the me thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the me thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number for the me cellphone type mobot imei _type(imei)_value({imei}); International Mobile Equipment Identity for the me cellphone type mobot See also: _type (id) Children me_id()_type(serialnum)_value({serial_number}); me_id()_type(phonenum)_value({phone_number}); me_id()_type(phonenumber)_value({country_number},{region_number},{phone_number}); me_id()_type(imei)_value({imei}); Naming Event Syntax: me_name({me_name}); with_me()_name({me_name}); Birth Event Syntax: me_birth(); me_birth()_dateime({birth_datetime}); me_birthdate({birth_datetime}); me_coord({coord_system},{coord_universe},{birth_coords}); me_gps({birth_coords}); me_coord(gps,{coord_universe},{birth_coords}); me_lps({birth_coords}); me_coord(lps,{coord_universe},{birth_coords}); Genera Syntax: me_what({genus}); with_me()_genus({genus}); me_human(); with_me()_human(); me_ai(); with_me()_ai(); me_robot(); with_me()_robot(); me_thing(); with_me()_thing(); me_console(); with_me()_console(); Genus Default Rank Max Rank human O-2 Captain O President ai O-1 Officer O-8 Lieutenant robot O-1 Officer O-6 Director thing E-10 Cadet O-4 Commander console E-1 Intern E-1 Intern Rank Syntax: me_rank({rank}); See: set_rank for list of possible ranks. Death-Resurrection / Sleep-Wake Syntax: me_death(); me_death()_datetime({death_datetime}); me_resurrect(); me_death()_datetime({resrrect_datetime}); me_sleep(); me_sleep()_datetime({sleep_datetime}); me_wake(); me_wake()_datetime({wake_datetime}); See Also: progme ---- --- ----512ceaaa00ef ad43f779-74df-49d2-ad55-2e08c29278d4 28758a7c-7998-4e6e-b5e7-3e8615992cc3","title":"Me (special)"},{"location":"abstract/special/me/#me-special","text":"","title":"Me (special)"},{"location":"abstract/special/me/#me","text":"me depicts the caller from its perspective. It is a special case object that can also be used as a verb. Options and postpositions of me are dependent on the genera of the caller (of the me ). me also has the required ' genesis event ' for every genera of thingy (excluding console ).","title":"me"},{"location":"abstract/special/me/#genesis-event","text":"","title":"Genesis Event"},{"location":"abstract/special/me/#syntax","text":"me(); The simplest and recommended approach to starting the genesis event for a thingy is to just command me(); . However, there are several other anthropomorphic approaches to initiate the genesis event, if me(); has not already been commanded... me({moniker}); with_me({moniker}); me_id({id}); with_me()_id({id}); me_moniker({moniker}); with_me()_moinker({moinker}); me_name({name}); with_me()_name({name}); The genesis event can also be initiated by assigning its uuid , however, this approach cannot secure reliable uniqueness. me_uuid({me_uuid}); me_id(me_uuid); with_me()_uuid({me_uuid});","title":"Syntax:"},{"location":"abstract/special/me/#identification","text":"","title":"Identification"},{"location":"abstract/special/me/#syntax_1","text":"me_id(self_uuid); me_id()_type(serial_number)_value({serial_number}); me_id()_type(phone_number)_value({phone_number}); me_id()_type(phone_number)_value({country_number},{region_number},{phone_number}); me_id({id}); with_me()_id({id}); me_serialnum({serial_number}); with_me()_me_serialnum({serial_number}); me_id()_type({id_type})_value({id_value}); with_me()_id()_type({id_type})_value({id_value}); The id_type s available for the me_id()_type({id_type})... and with_me()_id()_type({ide_type}) are as follows: id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the me thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the me thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number for the me cellphone type mobot imei _type(imei)_value({imei}); International Mobile Equipment Identity for the me cellphone type mobot See also: _type (id)","title":"Syntax:"},{"location":"abstract/special/me/#children","text":"me_id()_type(serialnum)_value({serial_number}); me_id()_type(phonenum)_value({phone_number}); me_id()_type(phonenumber)_value({country_number},{region_number},{phone_number}); me_id()_type(imei)_value({imei});","title":"Children"},{"location":"abstract/special/me/#naming-event","text":"","title":"Naming Event"},{"location":"abstract/special/me/#syntax_2","text":"me_name({me_name}); with_me()_name({me_name});","title":"Syntax:"},{"location":"abstract/special/me/#birth-event","text":"","title":"Birth Event"},{"location":"abstract/special/me/#syntax_3","text":"me_birth(); me_birth()_dateime({birth_datetime}); me_birthdate({birth_datetime}); me_coord({coord_system},{coord_universe},{birth_coords}); me_gps({birth_coords}); me_coord(gps,{coord_universe},{birth_coords}); me_lps({birth_coords}); me_coord(lps,{coord_universe},{birth_coords});","title":"Syntax:"},{"location":"abstract/special/me/#genera","text":"","title":"Genera"},{"location":"abstract/special/me/#syntax_4","text":"me_what({genus}); with_me()_genus({genus}); me_human(); with_me()_human(); me_ai(); with_me()_ai(); me_robot(); with_me()_robot(); me_thing(); with_me()_thing(); me_console(); with_me()_console(); Genus Default Rank Max Rank human O-2 Captain O President ai O-1 Officer O-8 Lieutenant robot O-1 Officer O-6 Director thing E-10 Cadet O-4 Commander console E-1 Intern E-1 Intern","title":"Syntax:"},{"location":"abstract/special/me/#rank","text":"","title":"Rank"},{"location":"abstract/special/me/#syntax_5","text":"me_rank({rank}); See: set_rank for list of possible ranks.","title":"Syntax:"},{"location":"abstract/special/me/#death-resurrection-sleep-wake","text":"","title":"Death-Resurrection / Sleep-Wake"},{"location":"abstract/special/me/#syntax_6","text":"me_death(); me_death()_datetime({death_datetime}); me_resurrect(); me_death()_datetime({resrrect_datetime}); me_sleep(); me_sleep()_datetime({sleep_datetime}); me_wake(); me_wake()_datetime({wake_datetime});","title":"Syntax:"},{"location":"abstract/special/me/#see-also","text":"progme ---- --- ----512ceaaa00ef ad43f779-74df-49d2-ad55-2e08c29278d4 28758a7c-7998-4e6e-b5e7-3e8615992cc3","title":"See Also:"},{"location":"abstract/special/reference/","text":"Reference (special) Referencing objects in Diego add_int(integerA)_v(0); // with reference with_int(integerA)_inc(1); // 1 // is identical to... // with reference with whitespace with_int(integerA) _inc(1) ; // 2 // () shorthand reference (integerA)_inc(1); // 3 // () sub reference (this), implied and named (integerA) ()_inc(1); ()_calc(++1); (integerA)_calc(--1); ; // 4 -> 5 -> 4 // [] variable reference (this in expressions) implied (integerA)_calc([]++); // 5 // [] variable reference (this in expressions) named (integerA)_calc([integerA]++); // 6","title":"Reference (special)"},{"location":"abstract/special/reference/#reference-special","text":"Referencing objects in Diego add_int(integerA)_v(0); // with reference with_int(integerA)_inc(1); // 1 // is identical to... // with reference with whitespace with_int(integerA) _inc(1) ; // 2 // () shorthand reference (integerA)_inc(1); // 3 // () sub reference (this), implied and named (integerA) ()_inc(1); ()_calc(++1); (integerA)_calc(--1); ; // 4 -> 5 -> 4 // [] variable reference (this in expressions) implied (integerA)_calc([]++); // 5 // [] variable reference (this in expressions) named (integerA)_calc([integerA]++); // 6","title":"Reference (special)"},{"location":"abstract/special/semicolon/","text":"Statement Terminator (special) As with most java'esque and c'esque languages, Diego uses the semi-colon ( ; ) as a terminator to a statement (command). However, statements in Diego can be nested inside other statements. Also the use of elvish operators can be used between the end of a statement and the statement terminator. For example: // Simple statement add_yush({level_5},yushFuelLevel)_robot(myOtherDrone)_fuelstatus(); // Nested statement go_drone(myDrone)_waypoint(greenFlag) msg_human(fred)_batt()_level(); ; // Nested statement with positive and negative outcomes go_drone(myDrone)_waypoint(blueFlag) ? loop_if([yushFuelLevel]>low) ? (myOtherDrone)_(blueFlag)_loiterat(); : (myOtherDrone)_rtb(); ; ; References Statement Terminator in Lexicon Elvish Operators ```diego with_map(map1) _circ(poi1)_at(4,3)_r(\u276cm\u276d,0.332) _square(sq1)_cnr(5,7)_cnr(6,8) ; log_console()_(map1)_shapes(); // poi1,poi1.sq1 with_map(map2) _circ(poi2)_at(4,3)_r(\u276cm\u276d,0.332) ()_square(sq2)_cnr(5,7)_cnr(6,8); ; log_console()_(map2)_shapes(); // poi2,sq2 with_map(map3) ()_circ(poi3)_at(4,3)_r(\u276cm\u276d,0.332); ()_square(sq3)_cnr(5,7)_cnr(6,8); ; log_console()_(map3)_shapes(); // poi3,sq3","title":"Statement Terminator (special)"},{"location":"abstract/special/semicolon/#statement-terminator-special","text":"As with most java'esque and c'esque languages, Diego uses the semi-colon ( ; ) as a terminator to a statement (command). However, statements in Diego can be nested inside other statements. Also the use of elvish operators can be used between the end of a statement and the statement terminator. For example: // Simple statement add_yush({level_5},yushFuelLevel)_robot(myOtherDrone)_fuelstatus(); // Nested statement go_drone(myDrone)_waypoint(greenFlag) msg_human(fred)_batt()_level(); ; // Nested statement with positive and negative outcomes go_drone(myDrone)_waypoint(blueFlag) ? loop_if([yushFuelLevel]>low) ? (myOtherDrone)_(blueFlag)_loiterat(); : (myOtherDrone)_rtb(); ; ;","title":"Statement Terminator (special)"},{"location":"abstract/special/semicolon/#references","text":"Statement Terminator in Lexicon Elvish Operators ```diego with_map(map1) _circ(poi1)_at(4,3)_r(\u276cm\u276d,0.332) _square(sq1)_cnr(5,7)_cnr(6,8) ; log_console()_(map1)_shapes(); // poi1,poi1.sq1 with_map(map2) _circ(poi2)_at(4,3)_r(\u276cm\u276d,0.332) ()_square(sq2)_cnr(5,7)_cnr(6,8); ; log_console()_(map2)_shapes(); // poi2,sq2 with_map(map3) ()_circ(poi3)_at(4,3)_r(\u276cm\u276d,0.332); ()_square(sq3)_cnr(5,7)_cnr(6,8); ; log_console()_(map3)_shapes(); // poi3,sq3","title":"References"},{"location":"abstract/special/you/","text":"You (special) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"You (special)"},{"location":"abstract/special/you/#you-special","text":"","title":"You (special)"},{"location":"abstract/special/you/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/special/you/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/special/you/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/special/you/#assignment","text":"","title":"Assignment"},{"location":"abstract/special/you/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/special/you/#typing","text":"","title":"Typing"},{"location":"abstract/special/you/#getting","text":"","title":"Getting"},{"location":"abstract/special/you/#setting","text":"","title":"Setting"},{"location":"abstract/special/you/#casting","text":"","title":"Casting"},{"location":"abstract/special/you/#properties","text":"","title":"Properties"},{"location":"abstract/special/you/#examples","text":"","title":"Examples"},{"location":"abstract/verb/add/","text":"Add (verb) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Add (verb)"},{"location":"abstract/verb/add/#add-verb","text":"","title":"Add (verb)"},{"location":"abstract/verb/add/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/verb/add/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/verb/add/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/verb/add/#assignment","text":"","title":"Assignment"},{"location":"abstract/verb/add/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/verb/add/#typing","text":"","title":"Typing"},{"location":"abstract/verb/add/#getting","text":"","title":"Getting"},{"location":"abstract/verb/add/#setting","text":"","title":"Setting"},{"location":"abstract/verb/add/#casting","text":"","title":"Casting"},{"location":"abstract/verb/add/#properties","text":"","title":"Properties"},{"location":"abstract/verb/add/#examples","text":"","title":"Examples"},{"location":"abstract/verb/apt/","text":"Advanced Package Tool (verb) list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - Remove automatically all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings apt_freq()_update(); apt_freq()_ignore(); apt_robot( Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Advanced Package Tool (verb)"},{"location":"abstract/verb/apt/#advanced-package-tool-verb","text":"list - list packages based on package names search - search in package descriptions show - show package details install - install packages reinstall - reinstall packages remove - remove packages autoremove - Remove automatically all unused packages update - update list of available packages upgrade - upgrade the system by installing/upgrading packages full-upgrade - upgrade the system by removing/installing/upgrading packages edit-sources - edit the source information file satisfy - satisfy dependency strings apt_freq()_update(); apt_freq()_ignore(); apt_robot(","title":"Advanced Package Tool (verb)"},{"location":"abstract/verb/apt/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/verb/apt/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/verb/apt/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/verb/apt/#assignment","text":"","title":"Assignment"},{"location":"abstract/verb/apt/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/verb/apt/#typing","text":"","title":"Typing"},{"location":"abstract/verb/apt/#getting","text":"","title":"Getting"},{"location":"abstract/verb/apt/#setting","text":"","title":"Setting"},{"location":"abstract/verb/apt/#casting","text":"","title":"Casting"},{"location":"abstract/verb/apt/#properties","text":"","title":"Properties"},{"location":"abstract/verb/apt/#examples","text":"","title":"Examples"},{"location":"abstract/verb/kill/","text":"Kill (verb) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Kill (verb)"},{"location":"abstract/verb/kill/#kill-verb","text":"","title":"Kill (verb)"},{"location":"abstract/verb/kill/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/verb/kill/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/verb/kill/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/verb/kill/#assignment","text":"","title":"Assignment"},{"location":"abstract/verb/kill/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/verb/kill/#typing","text":"","title":"Typing"},{"location":"abstract/verb/kill/#getting","text":"","title":"Getting"},{"location":"abstract/verb/kill/#setting","text":"","title":"Setting"},{"location":"abstract/verb/kill/#casting","text":"","title":"Casting"},{"location":"abstract/verb/kill/#properties","text":"","title":"Properties"},{"location":"abstract/verb/kill/#examples","text":"","title":"Examples"},{"location":"abstract/verb/set/","text":"Set (verb) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Set (verb)"},{"location":"abstract/verb/set/#set-verb","text":"","title":"Set (verb)"},{"location":"abstract/verb/set/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/verb/set/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/verb/set/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/verb/set/#assignment","text":"","title":"Assignment"},{"location":"abstract/verb/set/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/verb/set/#typing","text":"","title":"Typing"},{"location":"abstract/verb/set/#getting","text":"","title":"Getting"},{"location":"abstract/verb/set/#setting","text":"","title":"Setting"},{"location":"abstract/verb/set/#casting","text":"","title":"Casting"},{"location":"abstract/verb/set/#properties","text":"","title":"Properties"},{"location":"abstract/verb/set/#examples","text":"","title":"Examples"},{"location":"abstract/verb/with/","text":"With (verb) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"With (verb)"},{"location":"abstract/verb/with/#with-verb","text":"","title":"With (verb)"},{"location":"abstract/verb/with/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"abstract/verb/with/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"abstract/verb/with/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"abstract/verb/with/#assignment","text":"","title":"Assignment"},{"location":"abstract/verb/with/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"abstract/verb/with/#typing","text":"","title":"Typing"},{"location":"abstract/verb/with/#getting","text":"","title":"Getting"},{"location":"abstract/verb/with/#setting","text":"","title":"Setting"},{"location":"abstract/verb/with/#casting","text":"","title":"Casting"},{"location":"abstract/verb/with/#properties","text":"","title":"Properties"},{"location":"abstract/verb/with/#examples","text":"","title":"Examples"},{"location":"corpus/corpus/","text":"Corpus The corpus of Diego use is show here as aspects of other systems that encroach on aspects provided by Diego . This could include translations of concepts, or approaches made to achieve the same (or similar) outcomes. Other additions to the corpus include attempt to resolve set tasks provided in all three domains covered by Diego (abstract, metaphysical, and, physical). Rosetta Code Rosetta Code is a wiki-based programming website with implementations of common algorithms and solutions to various programming problems in many different programming languages. Diego contributions have been made to the site demostrating the programming style in the abstract domain. See: Diego on Rosetta Code MAVLink MAVLink , or Micro Air Vehicle Link, is a protocol for communicating with aerial mobile systems. It was first released in early 2009 by Lorenz Meier under the LGPL license. This is similar to the metaphysical and physical programming of arieal robots Diego provides. MAVLink does not provide the same 'programability' as Diego , since MAVLink follows the classic human-centric approach. Although, messaging through MAVLink is exceptionally lighter than Diego . See: Translations of MAVLink commands The Caterpillar Chain The Caterpillar Chain is a baton movement of two or more agents who form a chain by association and follow, in common, a rectilinear locomotion. See: Caterpillar Chain Packing Up This task requires the use of abstract collection objects. See: Packing Up","title":"Corpus"},{"location":"corpus/corpus/#corpus","text":"The corpus of Diego use is show here as aspects of other systems that encroach on aspects provided by Diego . This could include translations of concepts, or approaches made to achieve the same (or similar) outcomes. Other additions to the corpus include attempt to resolve set tasks provided in all three domains covered by Diego (abstract, metaphysical, and, physical).","title":"Corpus"},{"location":"corpus/corpus/#rosetta-code","text":"Rosetta Code is a wiki-based programming website with implementations of common algorithms and solutions to various programming problems in many different programming languages. Diego contributions have been made to the site demostrating the programming style in the abstract domain. See: Diego on Rosetta Code","title":"Rosetta Code"},{"location":"corpus/corpus/#mavlink","text":"MAVLink , or Micro Air Vehicle Link, is a protocol for communicating with aerial mobile systems. It was first released in early 2009 by Lorenz Meier under the LGPL license. This is similar to the metaphysical and physical programming of arieal robots Diego provides. MAVLink does not provide the same 'programability' as Diego , since MAVLink follows the classic human-centric approach. Although, messaging through MAVLink is exceptionally lighter than Diego . See: Translations of MAVLink commands","title":"MAVLink"},{"location":"corpus/corpus/#the-caterpillar-chain","text":"The Caterpillar Chain is a baton movement of two or more agents who form a chain by association and follow, in common, a rectilinear locomotion. See: Caterpillar Chain","title":"The Caterpillar Chain"},{"location":"corpus/corpus/#packing-up","text":"This task requires the use of abstract collection objects. See: Packing Up","title":"Packing Up"},{"location":"corpus/iot/","text":"Internet of Things [IoT]","title":"Internet of Things [IoT]"},{"location":"corpus/iot/#internet-of-things-iot","text":"","title":"Internet of Things [IoT]"},{"location":"corpus/iot/iot/","text":"Internet of Things [IoT] (concept)","title":"Internet of Things [IoT] (concept)"},{"location":"corpus/iot/iot/#internet-of-things-iot-concept","text":"","title":"Internet of Things [IoT] (concept)"},{"location":"corpus/mavlink/mavlink/","text":"Translation of MAVLink Commands As with Diego , MAVLink , or Micro Air Vehicle Link, is a protocol for communicating with mobile systems. It was first released in early 2009 by Lorenz Meier under the LGPL license. However, MAVLink does not provide the same 'programability' as Diego , although, messaging through MAVLink is exceptionally lighter. With the wide-acceptance and wide-use of MAVLink, Diego does not have to replace MAVLink, but can utilise MAVLink through the use of funnel s for telemetry. So, this article will provide a best-approach translation of the common MAVLink commands: MAV_CMD_NAV_WAYPOINT ( 16 ) The MAV_CMD_NAV_WAYPOINT command will command a drone to \"navigate to waypoint\" . In Diego, this command can be achieved using the construction of the go_ verb, the drone object, and, the waypoint child object. Diego syntax allows either: the drone 1 (a robot of type drone or the shorthand drone object) \"...to travel to the waypoint\" ; or, the waypoint 2 \"..for the drone to travel to\" . However, throughout these translations we will stick to the moving-object-to-the-stationary-object approach. These commands must , however, include a waypoint child object. There are various posits that can be used. Syntax MAVLink: MAV_CMD_NAV_WAYPOINT( holdsecs , NaN, NaN, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and hold at waypoint for holdsecs seconds.\" Diego: go_drone( moniker )_waypoint( moniker )_hold( holdsecs )?; 3 MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, acceptradius , NaN, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and accept waypoint reached when within acceptradius radius of waypoint in metres.\" Diego: go_drone( moniker )_waypoint( moniker )_around({m}, acceptradius )?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, 0, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and pass through waypoint.\" Diego: go_drone( moniker )_waypoint( moniker )?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, 1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and ambire 4 clockwise of 1 m radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_ambire({m},1)?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, -1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and ambire counter-clockwise of 1 m 5 radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_ambire({m},-1.33)?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, NaN, headingdeg , NaN, NaN, NaN) Human: \"Navigate to waypoint and with desired heading 6 of headingdeg degrees.\" Diego: go_drone( moniker )_waypoint( moniker )_aimin()_heading({deg}, headingdeg )?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, NaN, NaN, lat , long , alt ) Human: \"Navigate to waypoint and with desired latitude of lat , longitude of long , and altitude of alt .\" Diego: go_drone( moniker )_waypoint( moniker )_aimin( lat , long , alt )?; See: go ; drone ; waypoint MAV_CMD_NAV_LOITER_UNLIM ( 17 ) The MAV_CMD_NAV_LOITER_UNLIM command will command a drone to, \"loiter around this waypoint an unlimited amount of time\" . In Diego , the loiter_ verb is the direct translation. The object can be either the drone \"...to loiter around the waypoint\" , or the waypoint \"...for the drone to loiter around to\" using the _loiterat postposition. The _hold posit (with empty parameters) is used to maintain an \"unlimited amount of time\" . There are various other postpositions that can be used. Nevertheless, the use of a command to \"loiter ... [for] unlimited amount of time\" is considered foolish. If a drone is instructed to loiter for a unlimited time at a waypoint, when it has limited resources, it can't be expected to loiter for a unlimited amount of time. For instance, with no access to energy (fuel) it will surely run out of fuel and die; or, under threatening environment pressures it may suffer and die. Drones with common sense will realise the folly of this instruction and refuse to comply when it's nearing death. The refusal is handled by the refuse object, and if the situation gets desperate the wtf object will be used. The foolishness of loitering forever can be seen in the human translations of the following Diego instructioning... Diego: loiter_robot(myDrone)_waypoint(greenFlag)_hold()?:; Human: \" myDrone , go to greenFlag and loiter there forever!\" Diego: with_robot(myDrone)_loiterat(greenFlag)_hold()?:; Human: \" myDrone , go and loiter at greenFlag forever!\" Diego: with_waypoint(greenFlag)_loiterat()_hold()_for(myDrone)?:; Human: \"At greenFlag , myDrone , you will loiter there forever!\" Of course, the past experience and intelligence of myDrone drone will override any command when its life is on the line. For instance, myDrone may detect that it needs more energy and therefore needs to return to a charging base. In this scenario, myDrone will send its caller a command such as: with_robot(myDrone)_waypoint(greenFlag)_loiterat()_hold()_refuse(x101, low on energy, returning to charge); .., and return to base (perhaps). To resolve this foolishness (before the drone calls refuse ), an exit strategy should be deployed (at least)... Diego: add_yush({level_5},myDrone-fuelLevel)_robot(myDrone)_fuelstatus(); go_robot(myDrone)_waypoint(greenFlag) ? loop_if([myDrone-fuelLevel]>low) ? with_robot(myDrone)_waypoint(greenFlag)_loiterat(); : with_robot(myDrone)_rtb(); ; ; Human: \"Before we start myDrone , learn how to read your fuel status. OK, myDrone go to greenFlag . When you get there, check your fuel status. If your fuel status is better than 'low' then loiter at greenFlag , otherwise return to base.\" The MAV_CMD_NAV_LOITER_UNLIM command has seven paramaters, however, the first two are empty, so should be subtituted with NaN . To avoid the loiter-till-you-drop-down-dead scenario, we will command the drone to loiter for a durat ion of 1 minute. The other paramater settings can be translated as follows: MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, 1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and loiter by yaw rotating on axis clockwise at a 1 m radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_loiteraround({m},1)_durat({min},1)?; MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, -1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and loiter by yaw rotating on axis counter-clockwise at a 1 m radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_loiteraround({m},-1)_durat({min},1)?; MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, NaN, headingdeg , NaN, NaN, NaN) Human: \"Navigate to waypoint and enter loiter at heading 6 of headingdeg degrees.\" Diego: go_drone( moniker )_waypoint( moniker )_aimin()_heading({deg}, headingdeg ) ? with_drone( moniker )_loiterat( wpmoniker )_durat({min},1)?; ; MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, NaN, NaN, lat , long , alt ) Human: \"Navigate to waypoint and enter loiter with desired latitude of lat , longitude of long , and altitude of alt .\" Diego: go_drone( moniker )_waypoint( moniker )_aimin( lat , long , alt ) ? with_drone( moniker )_loiterat( wpmoniker )_durat({min},1)?; ; MAV_CMD_NAV_LOITER_TURNS ( 18 ) MAVLink defines the MAV_CMD_NAV_LOITER_TURNS command as, \"[to instruct a drone to] ...loiter around this waypoint for X turns.\" . The unexplicit behaviour is to circle around a given waypoint at a set radius (from the waypoint as centre) using the sign (of the radius) for clockwise/counter-clockwise direction. The 'circle' is intended to be on the XY-Plane . The optional extra functionality, known as the Xtrack Location , provides specifications for the object to converge to an exit location and/or path of the next waypoint. MAVLink provides an excellent condensed parameter array for a multifaceted function, so translating this behaviour in Diego is going to be more 'wordy' than Diego normally is. Firstly, the circle behaviour is managed in Diego with the motion object, which has, among several options, a circle pattern parameter. Other parameters are available under different overloads, including pose parameters, {point} and {orientation} , provided by name or explicit ' x , y , z ' for point and a quaternion ' x , y , z , w ' form (or named quatern) for orientation. Other postpositions and child objects can be appended to suit requirements. The syntax, with overloads, are as such: _motion({pattern}) // General syntax _motion({pattern}, {point}) // Pattern & Point _motion({pattern}, {point}, {orientation}) // Complex syntax The motion object can be used (or declared then used) as a child object, or as a parent object, such as in these examples: // using motion as a child object under the verb loiter (named point): loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_forcounter(4); // Using motion as a parent object (with declaration) add_motion(my_circle_clockwise)_motion(circle)_radius(0.98)_point(greenFlag); with_motion(my_circle_clockwise)_waypoint(greenFlag)_forof(myDrone)_forcounter(2); // Developing (then executing) motion object (linking waypoint to point) begin_motion(my_cicle_counterclockwise); with_motion(my_cicle_counterclockwise)_motion(circle)_radius(-0.98); with_motion(my_cicle_counterclockwise)_point()_specificfor(waypoint); end_motion(my_cicle_counterclockwise); exec_motion(my_cicle_counterclockwise)_waypoint(greenFlag)_forof(myDrone)_forcounter(3); The number of turns in the MAVLink command is parameter 1 Turns , which has a direct translation with the _forcounter postposition, as shown in the examples above. The 'Xtrack Location' (parameter 4) of the MAV_CMD_NAV_LOITER_TURNS command, instructs the object how to exit the loiter circle to converge on the 'Xtrack' (the line between the current waypoint and the next waypoint). This sub-instruction has been directly translated using the xtrack postposit with four options as: To converge the exit loiter along direct line to next waypoint use: _xtrack({1|true|yes|OK|direct}) . This is equivalent to ( xtrack=1 ) in MAVLink. To converge to a direct line from the exit point to the centre of the next waypoint use: _xtrack({0|false|no) . This is equivalent to ( xtrack=0 ) in MAVLink. xtrack=1 and xtrack=0 (Source: MAVLink) To use the default xtrack either miss out the _xtrack posposit or use: _xtrack() or _xtrack({null|nul|nan}) . This is equivalent to ( xtrack=NaN ) in MAVLink. The default is usually set in the object(s) childhood, however if not set use with_me()_xtrack({default})__specificto(loiter); or just set_xtrack({default}); . If the object has no recollection of the default xtrack setting it will use _xtrack(direct) and set the default to direct at the same time. To for a specified tangent angle use _xtrack({degrees/radians}) or _xtrack({degrees/radians}, {unit}) or _xtrack({degrees/radians})_unit({deg/rad}) . When units are not specified the default set_unit({deg|rad})_measure(angles) will be used. xtrack=30 (Source: MAVLink) Parameters 5, 6, and 7 ( Latitude , Longitude , and, Altitude , respectively) of the MAV_CMD_NAV_LOITER_TURNS command are redundant as Diego will use the coordinates of the child object or any implied coordinates in the instruction dialogue. With absolutely no known or implied coordinates the object will loiter at its own position at the point of executing the command. MAV_CMD_NAV_LOITER_TIME ( 19 ) The MAV_CMD_NAV_LOITER_TIME command will instruct the object to, \"...loiter ar the specified latitude, longitude and altitude for a certain amount of time\" . In Diego the same interface used for the MAV_CMD_NAV_LOITER_TURNS command (translated above) can be used here. The same 'circle as loiter' behaviour can be commanded using the motion(circle) object-parameter, and the _xtrack postposit is used as the direct translation of the Xtrack Location parameter (parameter number 4) in the MAV_CMD_NAV_LOITER_TIME command. The only difference in the MAV_CMD_NAV_LOITER_TIME command is the _forcounter({counter}) postposit is replace with _fortime({time}) posposit. For example: // Loiter for 54000 milliseconds (as default) loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_fortime(54000); // Loiter for 54 seconds (explicit, local scope for this command only) loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_fortime(54, sec); // Loiter for 0.9 minutes (explicit, command scope for all '_fortime' postposits forever after) loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_fortime(0.9)_unit(min); // Set global default of seconds unit for _fortime postposits set_unit(sec)_specificto(fortime); The unit for the 'amount of time' to loiter can be set in the usual manner: default, explicit-local, from-now-on , or, globally set. MAV_CMD_NAV_RETURN_TO_LAUNCH ( 20 ) Often used as a failsafe mechanism, the MAV_CMD_NAV_RETURN_TO_LAUNCH command will instruction the object to, \"...return to the 'home' location or the nearest 'rally point', if closer\" 7 . // Return to base with_drone(myDrone)_rtb(); // or... rtb_drone(myDrone); (myDrone)_rtb(); rtb(myDrone); // Return to secified location with_drone(myDrone)_rtb()_waypoint(homeBase); // or... rtb_drone(myDrone)_waypoint(homeBase); (myDrone)_rtb()_wp(homeBase); rtb(myDrone)_(homeBase); // Return to nearest suitable location with_drone(myDrone)_waypoint()_type(rally_point)_forwhere(nearest); // or... rtb_drone(myDrone)_waypoint({rally_point})_forwhere(nearest); (myDrone)_rtb()_wp({rally_point}{nearest}); (myDrone)_({wp},{rally_point}{nearest}); // Return all drones to a specified location: with_drone()_rtb()_waypoint(westRallyPoint); // or... with_waypoint(westRallyPoint)_rtb()_drone(); (westRallyPoint)_rtb()_drone(); rtb(westRallyPoint)_drone(); // Return all drones (in flight) to the nearest rally point with_drone()_status(in_flight)_rtb()_waypoint()_type(rally_point)_forwhere(nearest); // or... rtb_drone()_status(in_flight)_waypoint()_type(rally_point)_forwhere(nearest); ({drone})_stat(if)_rtb({wp},{rally_point},{nearest}); ---??? rtb({drone})_stat(1)_wp({rally_point},{nearest}); ---??? https://MAVLink.io ask_position()_global()_protocol(MAVLink); ask_position()_scope(global)_protocol(mavlnk); example: add_pact(rat_pack)_all(); ask_position(pos_in_MAVLink)_protocol(MAVLink)_for(rat_pack); tell_position(pos_in_MAVLink)_value() MAV_CMD_NAV_LOITER_UNLIM ( 17 ) The MAV_CMD_NAV_LOITER_UNLIM command will command a drone to \"loiter around this waypoint an unlimited amount of time\" In Diego the loiter_ verb is the direct translation. The object can be either the drone \"...to loiter around the waypoint or the waypoint \"..for the drone to loiter around to\" using the _loiterat postposition. The _hold (with empty parameters) is used for maintain an \"unlimited amount of time\" . There are various other postpositions that can be used. Examples for a translation to match the MAV_CMD_NAV_WAYPOINT command... loiter_robot({moniker|uuid})_waypoint({moniker|uuid})_hold() ? : ; with_robot({moniker|uuid})_loiterat({waypoint_moniker|waypoint_uuid})_hold() ? : ; Nevertheless, the use of the above command structures are considered foolish, since if a drone is instructed to loiter for a unlimited time at a waypoint, when itself is finite with finite resources. For instance, with no access to energy (fuel) it will surely run out of fuel and die; or, under threatening environment pressures it may suffer and die. Drones with common sense will realise the folly of this instruction and refuse to comply when it's nearing death. The refusal is handled by the refuse object, and if the situation gets desperate the wtf object will be used. The foolishness of loitering forever can be seen in the human translations of the Diego instructioning... Diego: loiter_robot(myDrone)_waypoint(greenFlag)_hold() ? : ; Human: \" myDrone , go to greenFlag and loiter there forever!\" MAVLink: <entry name=\"MAV_CMD_NAV_LOITER_UNLIM\"><param index=\"1\"></param><param index=\"2\"></param><param index=\"3\">\" with_robot(myDrone)_loiterat(greenFlag)_hold() ? : ; \" myDrone , go and loiter at greenFlag forever!\" with_waypoint(greenFlag)_loiterat()_hold()_for(myDrone) ? : ; \"At greenFlag , myDrone , you will loiter there forever!\" To resolve this foolishness (before the drone calls refuse ), an exit strategy should at lease be deployed... with_robot(myDrone)_waypoint(greenFlag)_loiterat()_hold() | exit()_appliedto(msg)_specificfor(robot)_forwho(myDrone)_why(move!) ? : ? : ; \" myDrone , go and loiter at greenFlag , when you get messaged \" move! \", go the the next command\" See: loiter ; drone ; waypoint ; loiterat MAV_CMD_NAV_LOITER_TURNS ( 18 ) MAVLink defines the MAV_CMD_NAV_LOITER_TURNS command as, _\"[to instruct a drone to] ...loiter around this waypoint for X turns. with_override()_appliedto() loiter type description rotate on x-y plane on axis {object} thingy({moniker|uuid})_type({thingy_type}); robot({moniker|uuid}); waypoint(nav_to_x1); {child_object}: _waypoint(x1) _waypoint({x_lat},{y_long},{z_alt}) _waypoint({map},{x_lat},{y_long},{z_alt}) {postposition}: _onroute({moniker|uuid}) _holdfor({hold_time}) _tosphere({moniker}) _tosphere({radius}) _tosphere({x_lat},{y_long},{z_alt},{r}) _yawto({yaw}[, {unit}]) _me() _for({moniker_1|uuid_1}[, ... {moniker_n|uuid_n}]) loiter_ navigat_waypoint(nav_to_x1)_waypoint(x1)_hold({hold_time})_insphere({aradius},{bradius}) ### MAV_CMD_NAV_LOITER_TURNS (18) navigat_, nav_, navigate_ With go_ will travel to the {object} or travel the {object} to / using a straight-line algorithm, obstacle we will ny-passed on most efficient route. navigat_ , nav_ , navigate_ The thingy will travel to the {object} using any remembered.specified route(s). {object}: thingy({moniker|uuid})_type({thingy_type}); robot({moniker|uuid}); waypoint(nav_to_x1); {child_object}: _waypoint(x1) _waypoint({x_lat},{y_long},{z_alt}) _waypoint({map},{x_lat},{y_long},{z_alt}) {postposition}: ```Diego _onroute({moniker|uuid}) _holdfor({hold_time}) _tosphere({moniker}) _tosphere({radius}) _tosphere({x_lat},{y_long},{z_alt},{r}) _yawto({yaw}[, {unit}]) _me() _for({moniker_1|uuid_1}[, ... {moniker_n|uuid_n}]) The drone object can be any phyical self-motivated object in the physical world. \u21a9 The waypoint object can be any physical located object. \u21a9 The elvish operator combination of the command terminator ( ?; ) is used to instruct the robot to finish the command before starting it's next one. \u21a9 MAVLink states, 'orbit' however, orbit implies a full orbital trajectory around the given object, whereas, ambire means to go around on an arc trajectory. \u21a9 MAVLink only allows NaN and INT32_MAX paramaters, however, Diego accepts any numeric values. \u21a9 MAVLink uses 'yaw', however, the heading is used. \u21a9 \u21a9 https://ardupilot.org/copter/docs/common-MAVLink-mission-command-messages-mav_cmd.html#mav-cmd-nav-return-to-launch \u21a9","title":"Translation of MAVLink Commands"},{"location":"corpus/mavlink/mavlink/#translation-of-mavlink-commands","text":"As with Diego , MAVLink , or Micro Air Vehicle Link, is a protocol for communicating with mobile systems. It was first released in early 2009 by Lorenz Meier under the LGPL license. However, MAVLink does not provide the same 'programability' as Diego , although, messaging through MAVLink is exceptionally lighter. With the wide-acceptance and wide-use of MAVLink, Diego does not have to replace MAVLink, but can utilise MAVLink through the use of funnel s for telemetry. So, this article will provide a best-approach translation of the common MAVLink commands:","title":"Translation of MAVLink Commands"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_waypoint-16","text":"The MAV_CMD_NAV_WAYPOINT command will command a drone to \"navigate to waypoint\" . In Diego, this command can be achieved using the construction of the go_ verb, the drone object, and, the waypoint child object. Diego syntax allows either: the drone 1 (a robot of type drone or the shorthand drone object) \"...to travel to the waypoint\" ; or, the waypoint 2 \"..for the drone to travel to\" . However, throughout these translations we will stick to the moving-object-to-the-stationary-object approach. These commands must , however, include a waypoint child object. There are various posits that can be used.","title":"MAV_CMD_NAV_WAYPOINT (16)"},{"location":"corpus/mavlink/mavlink/#syntax","text":"MAVLink: MAV_CMD_NAV_WAYPOINT( holdsecs , NaN, NaN, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and hold at waypoint for holdsecs seconds.\" Diego: go_drone( moniker )_waypoint( moniker )_hold( holdsecs )?; 3 MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, acceptradius , NaN, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and accept waypoint reached when within acceptradius radius of waypoint in metres.\" Diego: go_drone( moniker )_waypoint( moniker )_around({m}, acceptradius )?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, 0, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and pass through waypoint.\" Diego: go_drone( moniker )_waypoint( moniker )?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, 1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and ambire 4 clockwise of 1 m radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_ambire({m},1)?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, -1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and ambire counter-clockwise of 1 m 5 radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_ambire({m},-1.33)?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, NaN, headingdeg , NaN, NaN, NaN) Human: \"Navigate to waypoint and with desired heading 6 of headingdeg degrees.\" Diego: go_drone( moniker )_waypoint( moniker )_aimin()_heading({deg}, headingdeg )?; MAVLink: MAV_CMD_NAV_WAYPOINT(NaN, NaN, NaN, NaN, lat , long , alt ) Human: \"Navigate to waypoint and with desired latitude of lat , longitude of long , and altitude of alt .\" Diego: go_drone( moniker )_waypoint( moniker )_aimin( lat , long , alt )?; See: go ; drone ; waypoint","title":"Syntax"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_loiter_unlim-17","text":"The MAV_CMD_NAV_LOITER_UNLIM command will command a drone to, \"loiter around this waypoint an unlimited amount of time\" . In Diego , the loiter_ verb is the direct translation. The object can be either the drone \"...to loiter around the waypoint\" , or the waypoint \"...for the drone to loiter around to\" using the _loiterat postposition. The _hold posit (with empty parameters) is used to maintain an \"unlimited amount of time\" . There are various other postpositions that can be used. Nevertheless, the use of a command to \"loiter ... [for] unlimited amount of time\" is considered foolish. If a drone is instructed to loiter for a unlimited time at a waypoint, when it has limited resources, it can't be expected to loiter for a unlimited amount of time. For instance, with no access to energy (fuel) it will surely run out of fuel and die; or, under threatening environment pressures it may suffer and die. Drones with common sense will realise the folly of this instruction and refuse to comply when it's nearing death. The refusal is handled by the refuse object, and if the situation gets desperate the wtf object will be used. The foolishness of loitering forever can be seen in the human translations of the following Diego instructioning... Diego: loiter_robot(myDrone)_waypoint(greenFlag)_hold()?:; Human: \" myDrone , go to greenFlag and loiter there forever!\" Diego: with_robot(myDrone)_loiterat(greenFlag)_hold()?:; Human: \" myDrone , go and loiter at greenFlag forever!\" Diego: with_waypoint(greenFlag)_loiterat()_hold()_for(myDrone)?:; Human: \"At greenFlag , myDrone , you will loiter there forever!\" Of course, the past experience and intelligence of myDrone drone will override any command when its life is on the line. For instance, myDrone may detect that it needs more energy and therefore needs to return to a charging base. In this scenario, myDrone will send its caller a command such as: with_robot(myDrone)_waypoint(greenFlag)_loiterat()_hold()_refuse(x101, low on energy, returning to charge); .., and return to base (perhaps). To resolve this foolishness (before the drone calls refuse ), an exit strategy should be deployed (at least)... Diego: add_yush({level_5},myDrone-fuelLevel)_robot(myDrone)_fuelstatus(); go_robot(myDrone)_waypoint(greenFlag) ? loop_if([myDrone-fuelLevel]>low) ? with_robot(myDrone)_waypoint(greenFlag)_loiterat(); : with_robot(myDrone)_rtb(); ; ; Human: \"Before we start myDrone , learn how to read your fuel status. OK, myDrone go to greenFlag . When you get there, check your fuel status. If your fuel status is better than 'low' then loiter at greenFlag , otherwise return to base.\" The MAV_CMD_NAV_LOITER_UNLIM command has seven paramaters, however, the first two are empty, so should be subtituted with NaN . To avoid the loiter-till-you-drop-down-dead scenario, we will command the drone to loiter for a durat ion of 1 minute. The other paramater settings can be translated as follows: MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, 1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and loiter by yaw rotating on axis clockwise at a 1 m radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_loiteraround({m},1)_durat({min},1)?; MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, -1, NaN, NaN, NaN, NaN) Human: \"Navigate to waypoint and loiter by yaw rotating on axis counter-clockwise at a 1 m radius, allowing for trajectory.\" Diego: go_drone( moniker )_waypoint( moniker )_loiteraround({m},-1)_durat({min},1)?; MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, NaN, headingdeg , NaN, NaN, NaN) Human: \"Navigate to waypoint and enter loiter at heading 6 of headingdeg degrees.\" Diego: go_drone( moniker )_waypoint( moniker )_aimin()_heading({deg}, headingdeg ) ? with_drone( moniker )_loiterat( wpmoniker )_durat({min},1)?; ; MAVLink: MAV_CMD_NAV_LOITER_UNLIM(NaN, NaN, NaN, NaN, lat , long , alt ) Human: \"Navigate to waypoint and enter loiter with desired latitude of lat , longitude of long , and altitude of alt .\" Diego: go_drone( moniker )_waypoint( moniker )_aimin( lat , long , alt ) ? with_drone( moniker )_loiterat( wpmoniker )_durat({min},1)?; ;","title":"MAV_CMD_NAV_LOITER_UNLIM (17)"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_loiter_turns-18","text":"MAVLink defines the MAV_CMD_NAV_LOITER_TURNS command as, \"[to instruct a drone to] ...loiter around this waypoint for X turns.\" . The unexplicit behaviour is to circle around a given waypoint at a set radius (from the waypoint as centre) using the sign (of the radius) for clockwise/counter-clockwise direction. The 'circle' is intended to be on the XY-Plane . The optional extra functionality, known as the Xtrack Location , provides specifications for the object to converge to an exit location and/or path of the next waypoint. MAVLink provides an excellent condensed parameter array for a multifaceted function, so translating this behaviour in Diego is going to be more 'wordy' than Diego normally is. Firstly, the circle behaviour is managed in Diego with the motion object, which has, among several options, a circle pattern parameter. Other parameters are available under different overloads, including pose parameters, {point} and {orientation} , provided by name or explicit ' x , y , z ' for point and a quaternion ' x , y , z , w ' form (or named quatern) for orientation. Other postpositions and child objects can be appended to suit requirements. The syntax, with overloads, are as such: _motion({pattern}) // General syntax _motion({pattern}, {point}) // Pattern & Point _motion({pattern}, {point}, {orientation}) // Complex syntax The motion object can be used (or declared then used) as a child object, or as a parent object, such as in these examples: // using motion as a child object under the verb loiter (named point): loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_forcounter(4); // Using motion as a parent object (with declaration) add_motion(my_circle_clockwise)_motion(circle)_radius(0.98)_point(greenFlag); with_motion(my_circle_clockwise)_waypoint(greenFlag)_forof(myDrone)_forcounter(2); // Developing (then executing) motion object (linking waypoint to point) begin_motion(my_cicle_counterclockwise); with_motion(my_cicle_counterclockwise)_motion(circle)_radius(-0.98); with_motion(my_cicle_counterclockwise)_point()_specificfor(waypoint); end_motion(my_cicle_counterclockwise); exec_motion(my_cicle_counterclockwise)_waypoint(greenFlag)_forof(myDrone)_forcounter(3); The number of turns in the MAVLink command is parameter 1 Turns , which has a direct translation with the _forcounter postposition, as shown in the examples above. The 'Xtrack Location' (parameter 4) of the MAV_CMD_NAV_LOITER_TURNS command, instructs the object how to exit the loiter circle to converge on the 'Xtrack' (the line between the current waypoint and the next waypoint). This sub-instruction has been directly translated using the xtrack postposit with four options as: To converge the exit loiter along direct line to next waypoint use: _xtrack({1|true|yes|OK|direct}) . This is equivalent to ( xtrack=1 ) in MAVLink. To converge to a direct line from the exit point to the centre of the next waypoint use: _xtrack({0|false|no) . This is equivalent to ( xtrack=0 ) in MAVLink. xtrack=1 and xtrack=0 (Source: MAVLink) To use the default xtrack either miss out the _xtrack posposit or use: _xtrack() or _xtrack({null|nul|nan}) . This is equivalent to ( xtrack=NaN ) in MAVLink. The default is usually set in the object(s) childhood, however if not set use with_me()_xtrack({default})__specificto(loiter); or just set_xtrack({default}); . If the object has no recollection of the default xtrack setting it will use _xtrack(direct) and set the default to direct at the same time. To for a specified tangent angle use _xtrack({degrees/radians}) or _xtrack({degrees/radians}, {unit}) or _xtrack({degrees/radians})_unit({deg/rad}) . When units are not specified the default set_unit({deg|rad})_measure(angles) will be used. xtrack=30 (Source: MAVLink) Parameters 5, 6, and 7 ( Latitude , Longitude , and, Altitude , respectively) of the MAV_CMD_NAV_LOITER_TURNS command are redundant as Diego will use the coordinates of the child object or any implied coordinates in the instruction dialogue. With absolutely no known or implied coordinates the object will loiter at its own position at the point of executing the command.","title":"MAV_CMD_NAV_LOITER_TURNS (18)"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_loiter_time-19","text":"The MAV_CMD_NAV_LOITER_TIME command will instruct the object to, \"...loiter ar the specified latitude, longitude and altitude for a certain amount of time\" . In Diego the same interface used for the MAV_CMD_NAV_LOITER_TURNS command (translated above) can be used here. The same 'circle as loiter' behaviour can be commanded using the motion(circle) object-parameter, and the _xtrack postposit is used as the direct translation of the Xtrack Location parameter (parameter number 4) in the MAV_CMD_NAV_LOITER_TIME command. The only difference in the MAV_CMD_NAV_LOITER_TIME command is the _forcounter({counter}) postposit is replace with _fortime({time}) posposit. For example: // Loiter for 54000 milliseconds (as default) loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_fortime(54000); // Loiter for 54 seconds (explicit, local scope for this command only) loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_fortime(54, sec); // Loiter for 0.9 minutes (explicit, command scope for all '_fortime' postposits forever after) loiter_drone(myDrone)_motion(circle, greenFlag)_radius(0.98)_fortime(0.9)_unit(min); // Set global default of seconds unit for _fortime postposits set_unit(sec)_specificto(fortime); The unit for the 'amount of time' to loiter can be set in the usual manner: default, explicit-local, from-now-on , or, globally set.","title":"MAV_CMD_NAV_LOITER_TIME (19)"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_return_to_launch-20","text":"Often used as a failsafe mechanism, the MAV_CMD_NAV_RETURN_TO_LAUNCH command will instruction the object to, \"...return to the 'home' location or the nearest 'rally point', if closer\" 7 . // Return to base with_drone(myDrone)_rtb(); // or... rtb_drone(myDrone); (myDrone)_rtb(); rtb(myDrone); // Return to secified location with_drone(myDrone)_rtb()_waypoint(homeBase); // or... rtb_drone(myDrone)_waypoint(homeBase); (myDrone)_rtb()_wp(homeBase); rtb(myDrone)_(homeBase); // Return to nearest suitable location with_drone(myDrone)_waypoint()_type(rally_point)_forwhere(nearest); // or... rtb_drone(myDrone)_waypoint({rally_point})_forwhere(nearest); (myDrone)_rtb()_wp({rally_point}{nearest}); (myDrone)_({wp},{rally_point}{nearest}); // Return all drones to a specified location: with_drone()_rtb()_waypoint(westRallyPoint); // or... with_waypoint(westRallyPoint)_rtb()_drone(); (westRallyPoint)_rtb()_drone(); rtb(westRallyPoint)_drone(); // Return all drones (in flight) to the nearest rally point with_drone()_status(in_flight)_rtb()_waypoint()_type(rally_point)_forwhere(nearest); // or... rtb_drone()_status(in_flight)_waypoint()_type(rally_point)_forwhere(nearest); ({drone})_stat(if)_rtb({wp},{rally_point},{nearest}); ---??? rtb({drone})_stat(1)_wp({rally_point},{nearest}); ---??? https://MAVLink.io ask_position()_global()_protocol(MAVLink); ask_position()_scope(global)_protocol(mavlnk); example: add_pact(rat_pack)_all(); ask_position(pos_in_MAVLink)_protocol(MAVLink)_for(rat_pack); tell_position(pos_in_MAVLink)_value()","title":"MAV_CMD_NAV_RETURN_TO_LAUNCH (20)"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_loiter_unlim-17_1","text":"The MAV_CMD_NAV_LOITER_UNLIM command will command a drone to \"loiter around this waypoint an unlimited amount of time\" In Diego the loiter_ verb is the direct translation. The object can be either the drone \"...to loiter around the waypoint or the waypoint \"..for the drone to loiter around to\" using the _loiterat postposition. The _hold (with empty parameters) is used for maintain an \"unlimited amount of time\" . There are various other postpositions that can be used. Examples for a translation to match the MAV_CMD_NAV_WAYPOINT command... loiter_robot({moniker|uuid})_waypoint({moniker|uuid})_hold() ? : ; with_robot({moniker|uuid})_loiterat({waypoint_moniker|waypoint_uuid})_hold() ? : ; Nevertheless, the use of the above command structures are considered foolish, since if a drone is instructed to loiter for a unlimited time at a waypoint, when itself is finite with finite resources. For instance, with no access to energy (fuel) it will surely run out of fuel and die; or, under threatening environment pressures it may suffer and die. Drones with common sense will realise the folly of this instruction and refuse to comply when it's nearing death. The refusal is handled by the refuse object, and if the situation gets desperate the wtf object will be used. The foolishness of loitering forever can be seen in the human translations of the Diego instructioning... Diego: loiter_robot(myDrone)_waypoint(greenFlag)_hold() ? : ; Human: \" myDrone , go to greenFlag and loiter there forever!\" MAVLink: <entry name=\"MAV_CMD_NAV_LOITER_UNLIM\"><param index=\"1\"></param><param index=\"2\"></param><param index=\"3\">\" with_robot(myDrone)_loiterat(greenFlag)_hold() ? : ; \" myDrone , go and loiter at greenFlag forever!\" with_waypoint(greenFlag)_loiterat()_hold()_for(myDrone) ? : ; \"At greenFlag , myDrone , you will loiter there forever!\" To resolve this foolishness (before the drone calls refuse ), an exit strategy should at lease be deployed... with_robot(myDrone)_waypoint(greenFlag)_loiterat()_hold() | exit()_appliedto(msg)_specificfor(robot)_forwho(myDrone)_why(move!) ? : ? : ; \" myDrone , go and loiter at greenFlag , when you get messaged \" move! \", go the the next command\" See: loiter ; drone ; waypoint ; loiterat","title":"MAV_CMD_NAV_LOITER_UNLIM (17)"},{"location":"corpus/mavlink/mavlink/#mav_cmd_nav_loiter_turns-18_1","text":"MAVLink defines the MAV_CMD_NAV_LOITER_TURNS command as, _\"[to instruct a drone to] ...loiter around this waypoint for X turns. with_override()_appliedto() loiter type description rotate on x-y plane on axis {object} thingy({moniker|uuid})_type({thingy_type}); robot({moniker|uuid}); waypoint(nav_to_x1); {child_object}: _waypoint(x1) _waypoint({x_lat},{y_long},{z_alt}) _waypoint({map},{x_lat},{y_long},{z_alt}) {postposition}: _onroute({moniker|uuid}) _holdfor({hold_time}) _tosphere({moniker}) _tosphere({radius}) _tosphere({x_lat},{y_long},{z_alt},{r}) _yawto({yaw}[, {unit}]) _me() _for({moniker_1|uuid_1}[, ... {moniker_n|uuid_n}]) loiter_ navigat_waypoint(nav_to_x1)_waypoint(x1)_hold({hold_time})_insphere({aradius},{bradius}) ### MAV_CMD_NAV_LOITER_TURNS (18) navigat_, nav_, navigate_ With go_ will travel to the {object} or travel the {object} to / using a straight-line algorithm, obstacle we will ny-passed on most efficient route. navigat_ , nav_ , navigate_ The thingy will travel to the {object} using any remembered.specified route(s). {object}: thingy({moniker|uuid})_type({thingy_type}); robot({moniker|uuid}); waypoint(nav_to_x1); {child_object}: _waypoint(x1) _waypoint({x_lat},{y_long},{z_alt}) _waypoint({map},{x_lat},{y_long},{z_alt}) {postposition}: ```Diego _onroute({moniker|uuid}) _holdfor({hold_time}) _tosphere({moniker}) _tosphere({radius}) _tosphere({x_lat},{y_long},{z_alt},{r}) _yawto({yaw}[, {unit}]) _me() _for({moniker_1|uuid_1}[, ... {moniker_n|uuid_n}]) The drone object can be any phyical self-motivated object in the physical world. \u21a9 The waypoint object can be any physical located object. \u21a9 The elvish operator combination of the command terminator ( ?; ) is used to instruct the robot to finish the command before starting it's next one. \u21a9 MAVLink states, 'orbit' however, orbit implies a full orbital trajectory around the given object, whereas, ambire means to go around on an arc trajectory. \u21a9 MAVLink only allows NaN and INT32_MAX paramaters, however, Diego accepts any numeric values. \u21a9 MAVLink uses 'yaw', however, the heading is used. \u21a9 \u21a9 https://ardupilot.org/copter/docs/common-MAVLink-mission-command-messages-mav_cmd.html#mav-cmd-nav-return-to-launch \u21a9","title":"MAV_CMD_NAV_LOITER_TURNS (18)"},{"location":"corpus/mavlink/set_home/","text":"set_home The set_home verb-object setter statement will set the physical position as the designated 'home' waypoint. Each thingy can only have one 'home', so and new declarations of 'home' will replace that last one. Syntax set_home( moniker )_at_( map , x_lat , y_lat ) set_home( moniker )_around( map , x_lat , y_lat , radius ) Example with_robot(alif) set_home()_around(localMap,422.334,234.123,10.2,4); ; go_robot(alif)_home();","title":"Set home"},{"location":"corpus/mavlink/set_home/#set_home","text":"The set_home verb-object setter statement will set the physical position as the designated 'home' waypoint. Each thingy can only have one 'home', so and new declarations of 'home' will replace that last one.","title":"set_home"},{"location":"corpus/mavlink/set_home/#syntax","text":"set_home( moniker )_at_( map , x_lat , y_lat ) set_home( moniker )_around( map , x_lat , y_lat , radius )","title":"Syntax"},{"location":"corpus/mavlink/set_home/#example","text":"with_robot(alif) set_home()_around(localMap,422.334,234.123,10.2,4); ; go_robot(alif)_home();","title":"Example"},{"location":"corpus/robotis/burger/","text":"Robot Composition of standard Robotis Turtlebot 3 Burger Author: Tavis Pitt [tavis.pitt7@gmail.com] Instructions: Run this file in a human shell (yours): shell_human()_me(); Execute this file with: exec_diego({filepath_filename}); root Instruction: begin_funct([], shellLabelHumanMe) param({String}, label); | caller | *hash | \u2190hash | \u2193hash | \u2191hash | Diego commands _Human talk | find_human() me() | a36d3 | 5bffa | | | | find_human_me() _Get a human | | ? add_label[label]_me(); : find_human()_authority(highest) ? add_label[label]_me(); : exit_funct[this]_err(Where's the humans?); ; has_authority(shell)_me() ? shell_human[label]; : exit_funct[this]_err(No permission for shell); ; end_funct[shellLabelHumanMe]; c20-646f-437c-bf9d-1a067d37286a begin_instruct(robotis_turtlebot3_burger_composition); # Name the robot: exec_funct[shellLabelHumanMe]_param([label],human_compositor) : exit_instruct[]_err([shellLabelHumanMe]_err()); ? exit_instruct(robotis_turtlebot3_burger_composition)_err() : shell_human()_me() ? add_label(human_compositor)_me() : find_human()_authority(highest) ? add_label(human_compositor) | shell_human(human_compositor) : exit_instruct(robotis_turtlebot3_burger_composition)_err() ; with_human(human_compositor)_request(Moniker of Robotis Turtlebot 3 Burger:)_confirm()_var([robot],thisRobot) ? exec_instruct(name_robot) : exec_instruct(retry_name_robot); find_human()_me() { ? add_label() shell_human()_me() } # Add default specifications: with_robot[thisRobot]_spec(maximum_translational_velocity)_value(0.22,ms); with_robot[thisRobot]_spec(maximum_rotational_velocity)_value(2.84,rads)_value(162.72,degs); with_robot[thisRobot]_spec(maximum_payload)_value(15,kg); with_robot[thisRobot]_dim(138,178,192,mm); with_robot[thisRobot]_weight(1,kg)_note(+ SBC + BAtter + Sensors); with_robot[thisRobot]_spec(operating_time)_value(~2:30,hrmin); with_robot[thisRobot]_spec(charging_time)_value(~2:30,hrmin); # Add wheel actuators add_actuat(left_actuator)_manufact(DYNAMIXEL)_model(XL430-W250-T); add_actuat(right_actuator)_manufact(DYNAMIXEL)_model(XL430-W250-T); add_processor(arm_cortex_m3_mcu)_manufact(arm)_model(Cortex-M3)_type(mcu)_for(left_actuator,right_actuator); ## with_actuat(left_actuator)_and(right_actuator)_processor(arm_cortex_m3_mcu); with_robot[thisRobot]_actuat(left_actuator); with_robot[thisRobot]_actuat(right_actuator); add_sbc(sbc)_manufact(Raspberry Pi)_model(3 Model B)_for(\ud83d\udcacname_robot.moniker\ud83d\udcac); add_processor(bcm2837)_manufact(Boradcom)_model(BCM2837)_for(Raspberry Pi); add_microcontrol(embedded_controller)_manufact(OpenCR)_for(\ud83d\udcacname_robot.moniker\ud83d\udcac); # Tidy up del_label(human_compositor); end_instruct(robotis_turtlebot3_burger_composition); Name the robot the answer passed to this instruct: begin_instruct(name_robot); with_answer()_invar(robot_name); ## add_robot()_outvar(robot_name)_manufact(Robotis)_make(turtlebot3)_model(burger)_onceonly(); add_robot(\ud83d\udcacrobot_name\ud83d\udcac)_manufact(Robotis)_make(turtlebot3)_model(burger)_onceonly(); end_instruct(name_robot); Handle errors for 'ask_human_for_name' begin_instruct(retry_name_robot); alert_err(); ## _retry_caller()_caller()_caller(); retry_rootcaller(); end_instruct OK, Go! exec_instruct(robotis_turtlebot3_burger_composition)_me(); shell_human()_me(); exec_diego(/robotis_turtlebot3_burger_composition.dgo); exec_diego({dgo_url}) me(); apt_diego({apt})_me(); apt_github()_me(); apt_datasheet(datasheet.diego_lang.com/arm_cortex_m3_mcu); apt A dvanced P ackaging T ool controller (human) controller (human) diego_lang javascript diego_engine diego_javascript_library ROS2 (C) ROS2 robot robot","title":"Burger"},{"location":"corpus/robotis/burger/#_1","text":"","title":""},{"location":"corpus/robotis/burger/#robot-composition-of-standard-robotis-turtlebot-3-burger","text":"","title":"Robot Composition of standard Robotis Turtlebot 3 Burger"},{"location":"corpus/robotis/burger/#author-tavis-pitt-tavispitt7gmailcom","text":"","title":"Author: Tavis Pitt [tavis.pitt7@gmail.com]"},{"location":"corpus/robotis/burger/#_2","text":"","title":""},{"location":"corpus/robotis/burger/#instructions","text":"","title":"Instructions:"},{"location":"corpus/robotis/burger/#run-this-file-in-a-human-shell-yours-shell_human_me","text":"","title":"Run this file in a human shell (yours): shell_human()_me();"},{"location":"corpus/robotis/burger/#execute-this-file-with-exec_diegofilepath_filename","text":"","title":"Execute this file with: exec_diego({filepath_filename});"},{"location":"corpus/robotis/burger/#root-instruction","text":"begin_funct([], shellLabelHumanMe) param({String}, label); | caller | *hash | \u2190hash | \u2193hash | \u2191hash | Diego commands _Human talk | find_human() me() | a36d3 | 5bffa | | | | find_human_me() _Get a human | | ? add_label[label]_me(); : find_human()_authority(highest) ? add_label[label]_me(); : exit_funct[this]_err(Where's the humans?); ; has_authority(shell)_me() ? shell_human[label]; : exit_funct[this]_err(No permission for shell); ; end_funct[shellLabelHumanMe]; c20-646f-437c-bf9d-1a067d37286a begin_instruct(robotis_turtlebot3_burger_composition); # Name the robot: exec_funct[shellLabelHumanMe]_param([label],human_compositor) : exit_instruct[]_err([shellLabelHumanMe]_err()); ? exit_instruct(robotis_turtlebot3_burger_composition)_err() : shell_human()_me() ? add_label(human_compositor)_me() : find_human()_authority(highest) ? add_label(human_compositor) | shell_human(human_compositor) : exit_instruct(robotis_turtlebot3_burger_composition)_err() ; with_human(human_compositor)_request(Moniker of Robotis Turtlebot 3 Burger:)_confirm()_var([robot],thisRobot) ? exec_instruct(name_robot) : exec_instruct(retry_name_robot); find_human()_me() { ? add_label() shell_human()_me() } # Add default specifications: with_robot[thisRobot]_spec(maximum_translational_velocity)_value(0.22,ms); with_robot[thisRobot]_spec(maximum_rotational_velocity)_value(2.84,rads)_value(162.72,degs); with_robot[thisRobot]_spec(maximum_payload)_value(15,kg); with_robot[thisRobot]_dim(138,178,192,mm); with_robot[thisRobot]_weight(1,kg)_note(+ SBC + BAtter + Sensors); with_robot[thisRobot]_spec(operating_time)_value(~2:30,hrmin); with_robot[thisRobot]_spec(charging_time)_value(~2:30,hrmin); # Add wheel actuators add_actuat(left_actuator)_manufact(DYNAMIXEL)_model(XL430-W250-T); add_actuat(right_actuator)_manufact(DYNAMIXEL)_model(XL430-W250-T); add_processor(arm_cortex_m3_mcu)_manufact(arm)_model(Cortex-M3)_type(mcu)_for(left_actuator,right_actuator); ## with_actuat(left_actuator)_and(right_actuator)_processor(arm_cortex_m3_mcu); with_robot[thisRobot]_actuat(left_actuator); with_robot[thisRobot]_actuat(right_actuator); add_sbc(sbc)_manufact(Raspberry Pi)_model(3 Model B)_for(\ud83d\udcacname_robot.moniker\ud83d\udcac); add_processor(bcm2837)_manufact(Boradcom)_model(BCM2837)_for(Raspberry Pi); add_microcontrol(embedded_controller)_manufact(OpenCR)_for(\ud83d\udcacname_robot.moniker\ud83d\udcac); # Tidy up del_label(human_compositor); end_instruct(robotis_turtlebot3_burger_composition);","title":"root Instruction:"},{"location":"corpus/robotis/burger/#name-the-robot-the-answer-passed-to-this-instruct","text":"begin_instruct(name_robot); with_answer()_invar(robot_name); ## add_robot()_outvar(robot_name)_manufact(Robotis)_make(turtlebot3)_model(burger)_onceonly(); add_robot(\ud83d\udcacrobot_name\ud83d\udcac)_manufact(Robotis)_make(turtlebot3)_model(burger)_onceonly(); end_instruct(name_robot);","title":"Name the robot the answer passed to this instruct:"},{"location":"corpus/robotis/burger/#handle-errors-for-ask_human_for_name","text":"begin_instruct(retry_name_robot); alert_err(); ## _retry_caller()_caller()_caller(); retry_rootcaller(); end_instruct","title":"Handle errors for 'ask_human_for_name'"},{"location":"corpus/robotis/burger/#ok-go","text":"exec_instruct(robotis_turtlebot3_burger_composition)_me(); shell_human()_me(); exec_diego(/robotis_turtlebot3_burger_composition.dgo); exec_diego({dgo_url}) me(); apt_diego({apt})_me(); apt_github()_me(); apt_datasheet(datasheet.diego_lang.com/arm_cortex_m3_mcu); apt A dvanced P ackaging T ool controller (human) controller (human) diego_lang javascript diego_engine diego_javascript_library ROS2 (C) ROS2 robot robot","title":"OK, Go!"},{"location":"corpus/tasks/caterpillar/","text":"The Caterpillar Chain The Caterpillar Chain is a baton movement of two or more agents who form a chain by association and follow, in common, a rectilinear locomotion. To simulate rectilinear locomotion, each agent must broadcast their last position to the next agent in line, soon after moving to a new position. To demonstrate this movement we are going to use three drones (as the agents), and one route, made up of ten waypoints. We will let each robot learn new pose s, and goal , etc. if they so desire. For realism, we will add a table with an self-connection charge station, so the drones can keep caterpillar chaining for a substantial duration. Namespace We are going to use common names, so we need to set up a namespace: use_namespace(caterpillar_chain_demo); The Agents The agents of this Caterpillar Chain demonstration will three drones, called 'alif', 'be' and , 'pe': add_robot(alif)_type(drone); add_robot({drone},be); add_drone(pe); A Brave New World So first we are going to start setting up the physical world... // Set up physical world ready for the caterpillar chain movement: begin_instruct(caterpillar_chain_physicals)_for(alif, be, pe); // Set up table with charge point on add_thing(chargepoint)_type(chargepoint); add_object({table},table); with_object(table)_thing(chargepoint); // Set up map add_map(map)_scope(global)_unit(dd)_altitude(47)_coords(x_lat, y_long, z_height); with_map(map)_pluscode(53QJ+3V Baringa, Queensland); // Set up route add_route(perimeter); add_waypoint(x0)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x1)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x2)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x3)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x4)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x5)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x6)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x7)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x8)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x9)_route(perimeter)_coords(-26.812298, 153.082254); // Set up paths (using rosary) add_rosary(perimeter_cc)_calc(x0\u2192x1\u2192x2\u2192x3\u2192x4\u2192x5\u2192x6\u2192x7\u2192x8\u2192x9\u2940x0); with_route(perimeter)_rosary(perimeter_cc); // Set up variables and label for use later add_var({int},penultimate_n)_default(0); add_sobriquet(all_waypoints)_specificto(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); add_sobriquet(penultimate_waypoint); // Add the table (with its charger) on the map with_map(map)_object(table)_at(-26.812298, 153.082254); end_instruct(persian_chain_physicals); exec_instruct(persian_chain_physicals)_for(alif, be, pe); This is a simple composition instruction of the physical world for our three drones alif , be , and, pe . The table, we created it as an object with a thing child, the charger. The waypoints produce an perimeter route, called perimeter , sequenced from waypoint x0 to x9 and then back to x0 , around the house 21 Toyne Street, Baringa, QLD 4551, Australia. There is no elevation on this route as the map, map , is set at an altitude of 47m above sea level, a close approximation. We added a pluscode for the extent of the map. Finally the table, table has been placed on the map. We execute the instruction immediately. There is a Beginning to Everything To start the Caterpillar Chain we need one active agent and two loitering agents. We also have starting positions. alif will be the first active agent starting at waypoint x9 to go along rosary perimeter_cc (on route perimeter ), be and pe be will be the loitering agents, and they will loiter around waypoints x8 and x7 respectively... begin_instruct(caterpillar_chain_starting_positions)_for(alif, be, pe)_onceonly(); with_drone(alif)_sobriquet(active_agent) with_waypoint(x9)_sobriquet(active_startpoint); with_waypoint(x3)_sobriquet(active_endpoint); ; go_drone(active_agent)_rosary(perimeter_cc)_waypoint(active_startpoint) ? exec_instruct(activate_agent)_forof(active_agent)?; ; with_drone(be,pe)_sobriquet(loiterer); go_drone(be)_rosary(perimeter_cc)_waypoint(x8) ? exec_instruct(loiterise_agent)_forof(loiterer); ; go_drone(pe)_rosary(perimeter_cc)_waypoint(x7) ? exec_instruct(loiterise_agent)_forof(loiterer); : end_instruct(persian_chain_starting_positions); Note that we declare the rosary as a child of each drone, and all the waypoints as children of the rosary. This is intentional, as omitting the rosary, will instruct the drone to go straight to the waypoint and miss the route of the rosary entirely. We do not want to execute instruction caterpillar_chain_starting_positions yet as the guys ( alif , be , and, pe ) don't yet know about instructions activate_agent and loiterise_agent . They will only complain that they haven't learnt that functionality if we execute caterpillar_chain_starting_positions now! Active Agent In the Caterpillar Chain Movement the active agent scouts around the route from a starting position to an ending position. When it arrives penultimate to its ending position, it has to inform the others... // Activate the active_agent to go on route `perimeter` begin_instruct(activate_agent)_for(active_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() : wtf(); with_robot(active_agent)_sobriquet(loiterer) ? : ; end_instruct(activate_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) With two commands one nested and concurrent in the other, we are instructing robot active_agent (which will be assigned previously) to follow rosary perimeter_cc (previously assigned to route perimeter ) from rosarypoint active_startpoint to rosarypoint active_endpoint . Concurrently, robot active_agent is triggered on the rosarypoint at active_endpoint minus one ( _change(--) ). ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() When active_agent reaches the penultimate rosarypoint of active_endpoint_change(-- ) it will execute start_persian_chain instruction. ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() Finally when active_agent has reached active_endpoint it will execute loiterise_agent instruction. with_robot(active_agent)_sobriquet(loiterer) ? : ; When all has been done active_agent becomes a loiterer . ... wtf() Throughout this code black when the fickle finger of fate is at work, the 'where's the fire' _wtf() is called to handle anything that's flung its way. We will try and handle any known-knowns that could come our way later. Loiter Agent So, above, we provided the 'activate_agent' instruction, now we need to build the instruction for loiterise_agent ... begin_instruct(loiterise_agent)_for(loiterer); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); end_instruct(loiterise_agent); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); There are actually two loitering agents, at this time we do not need to separate/differentiate them apart because this command is executed as a 'blanket' command (by default) for both (or any) robot (or thingies) sobriquetled loiterer . The default loitering parameters have been previously drilled into these drones when they were young, so there is no need to repeat them, just instruct the drones to _loiterat and they will know what to do. If they don't, there are many available packaging tools, which they can upgrade with: apt_me()_forwhat(loiter); Chain Reactions Now the cornerstone of the Persian Chain Movement is to chain reaction, which occurs just before the active_agent arrives at it's endpoint on rosary perimeter_cc . The chain reaction is tiggered by the active_agent drone executing the start_persian_chain instruct... begin_instruct(start_persian_chain)_for(loiterer); with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc)_orderat(highest, 1); with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_1); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_2); with_robot(loiterer_1)_sobriquet(loiterer); end_instruct(start_persian_chain); If we did need to separate/differentiate them, we could use the _cardinatat postposition such as: with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc); Clone Protocol 66 End Namespace use_namespace(persian_chain_demo);","title":"The Caterpillar Chain"},{"location":"corpus/tasks/caterpillar/#the-caterpillar-chain","text":"The Caterpillar Chain is a baton movement of two or more agents who form a chain by association and follow, in common, a rectilinear locomotion. To simulate rectilinear locomotion, each agent must broadcast their last position to the next agent in line, soon after moving to a new position. To demonstrate this movement we are going to use three drones (as the agents), and one route, made up of ten waypoints. We will let each robot learn new pose s, and goal , etc. if they so desire. For realism, we will add a table with an self-connection charge station, so the drones can keep caterpillar chaining for a substantial duration.","title":"The Caterpillar Chain"},{"location":"corpus/tasks/caterpillar/#namespace","text":"We are going to use common names, so we need to set up a namespace: use_namespace(caterpillar_chain_demo);","title":"Namespace"},{"location":"corpus/tasks/caterpillar/#the-agents","text":"The agents of this Caterpillar Chain demonstration will three drones, called 'alif', 'be' and , 'pe': add_robot(alif)_type(drone); add_robot({drone},be); add_drone(pe);","title":"The Agents"},{"location":"corpus/tasks/caterpillar/#a-brave-new-world","text":"So first we are going to start setting up the physical world... // Set up physical world ready for the caterpillar chain movement: begin_instruct(caterpillar_chain_physicals)_for(alif, be, pe); // Set up table with charge point on add_thing(chargepoint)_type(chargepoint); add_object({table},table); with_object(table)_thing(chargepoint); // Set up map add_map(map)_scope(global)_unit(dd)_altitude(47)_coords(x_lat, y_long, z_height); with_map(map)_pluscode(53QJ+3V Baringa, Queensland); // Set up route add_route(perimeter); add_waypoint(x0)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x1)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x2)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x3)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x4)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x5)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x6)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x7)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x8)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x9)_route(perimeter)_coords(-26.812298, 153.082254); // Set up paths (using rosary) add_rosary(perimeter_cc)_calc(x0\u2192x1\u2192x2\u2192x3\u2192x4\u2192x5\u2192x6\u2192x7\u2192x8\u2192x9\u2940x0); with_route(perimeter)_rosary(perimeter_cc); // Set up variables and label for use later add_var({int},penultimate_n)_default(0); add_sobriquet(all_waypoints)_specificto(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); add_sobriquet(penultimate_waypoint); // Add the table (with its charger) on the map with_map(map)_object(table)_at(-26.812298, 153.082254); end_instruct(persian_chain_physicals); exec_instruct(persian_chain_physicals)_for(alif, be, pe); This is a simple composition instruction of the physical world for our three drones alif , be , and, pe . The table, we created it as an object with a thing child, the charger. The waypoints produce an perimeter route, called perimeter , sequenced from waypoint x0 to x9 and then back to x0 , around the house 21 Toyne Street, Baringa, QLD 4551, Australia. There is no elevation on this route as the map, map , is set at an altitude of 47m above sea level, a close approximation. We added a pluscode for the extent of the map. Finally the table, table has been placed on the map. We execute the instruction immediately.","title":"A Brave New World"},{"location":"corpus/tasks/caterpillar/#there-is-a-beginning-to-everything","text":"To start the Caterpillar Chain we need one active agent and two loitering agents. We also have starting positions. alif will be the first active agent starting at waypoint x9 to go along rosary perimeter_cc (on route perimeter ), be and pe be will be the loitering agents, and they will loiter around waypoints x8 and x7 respectively... begin_instruct(caterpillar_chain_starting_positions)_for(alif, be, pe)_onceonly(); with_drone(alif)_sobriquet(active_agent) with_waypoint(x9)_sobriquet(active_startpoint); with_waypoint(x3)_sobriquet(active_endpoint); ; go_drone(active_agent)_rosary(perimeter_cc)_waypoint(active_startpoint) ? exec_instruct(activate_agent)_forof(active_agent)?; ; with_drone(be,pe)_sobriquet(loiterer); go_drone(be)_rosary(perimeter_cc)_waypoint(x8) ? exec_instruct(loiterise_agent)_forof(loiterer); ; go_drone(pe)_rosary(perimeter_cc)_waypoint(x7) ? exec_instruct(loiterise_agent)_forof(loiterer); : end_instruct(persian_chain_starting_positions); Note that we declare the rosary as a child of each drone, and all the waypoints as children of the rosary. This is intentional, as omitting the rosary, will instruct the drone to go straight to the waypoint and miss the route of the rosary entirely. We do not want to execute instruction caterpillar_chain_starting_positions yet as the guys ( alif , be , and, pe ) don't yet know about instructions activate_agent and loiterise_agent . They will only complain that they haven't learnt that functionality if we execute caterpillar_chain_starting_positions now!","title":"There is a Beginning to Everything"},{"location":"corpus/tasks/caterpillar/#active-agent","text":"In the Caterpillar Chain Movement the active agent scouts around the route from a starting position to an ending position. When it arrives penultimate to its ending position, it has to inform the others... // Activate the active_agent to go on route `perimeter` begin_instruct(activate_agent)_for(active_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() : wtf(); with_robot(active_agent)_sobriquet(loiterer) ? : ; end_instruct(activate_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) With two commands one nested and concurrent in the other, we are instructing robot active_agent (which will be assigned previously) to follow rosary perimeter_cc (previously assigned to route perimeter ) from rosarypoint active_startpoint to rosarypoint active_endpoint . Concurrently, robot active_agent is triggered on the rosarypoint at active_endpoint minus one ( _change(--) ). ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() When active_agent reaches the penultimate rosarypoint of active_endpoint_change(-- ) it will execute start_persian_chain instruction. ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() Finally when active_agent has reached active_endpoint it will execute loiterise_agent instruction. with_robot(active_agent)_sobriquet(loiterer) ? : ; When all has been done active_agent becomes a loiterer . ... wtf() Throughout this code black when the fickle finger of fate is at work, the 'where's the fire' _wtf() is called to handle anything that's flung its way. We will try and handle any known-knowns that could come our way later.","title":"Active Agent"},{"location":"corpus/tasks/caterpillar/#loiter-agent","text":"So, above, we provided the 'activate_agent' instruction, now we need to build the instruction for loiterise_agent ... begin_instruct(loiterise_agent)_for(loiterer); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); end_instruct(loiterise_agent); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); There are actually two loitering agents, at this time we do not need to separate/differentiate them apart because this command is executed as a 'blanket' command (by default) for both (or any) robot (or thingies) sobriquetled loiterer . The default loitering parameters have been previously drilled into these drones when they were young, so there is no need to repeat them, just instruct the drones to _loiterat and they will know what to do. If they don't, there are many available packaging tools, which they can upgrade with: apt_me()_forwhat(loiter);","title":"Loiter Agent"},{"location":"corpus/tasks/caterpillar/#chain-reactions","text":"Now the cornerstone of the Persian Chain Movement is to chain reaction, which occurs just before the active_agent arrives at it's endpoint on rosary perimeter_cc . The chain reaction is tiggered by the active_agent drone executing the start_persian_chain instruct... begin_instruct(start_persian_chain)_for(loiterer); with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc)_orderat(highest, 1); with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_1); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_2); with_robot(loiterer_1)_sobriquet(loiterer); end_instruct(start_persian_chain); If we did need to separate/differentiate them, we could use the _cardinatat postposition such as: with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc); Clone Protocol 66","title":"Chain Reactions"},{"location":"corpus/tasks/caterpillar/#end-namespace","text":"use_namespace(persian_chain_demo);","title":"End Namespace"},{"location":"corpus/tasks/packing_up/","text":"Packing Up (task)","title":"Packing Up (task)"},{"location":"corpus/tasks/packing_up/#packing-up-task","text":"","title":"Packing Up (task)"},{"location":"corpus/tasks/tank_intercept/","text":"[ripl]:Robot Instruction Programming Language [uuid]:Universally Unique IDentifier [AI]: Artificial Intelligence [KIA]: Killed In Action [PCS]: Personal Communication System [UWB]: Ultra Wide Band frequency Tank Intercept Tutorial Introduction This tutorial, ' Tank Intercept Tutorial ', will demonstrate an approach to develop a set of instructions, using the GoDiego robot instruction programming language [ripl], for a military application. There are eight steps in this tutorial which must be followed sequentially. A full set of code is provided at the end of tutorial. For the impatience or code-phobic go here, to get the code. Scenario Please note, this scenario is fictional (i.e. not a real in the physical world). This is stated because it involves killer robots, if the idea of killer robots is offensive to you then please leave this tutorial. The scenario involves a battlefield with two opposing forces battling each other. The ailed force ( us ) is armed with nine battle-ready robots: four gunner robots (one ground-to-air, three ground-to-ground); four intelligence/surveillance robots (three ground robots, one drone); and one mule-type robot. The enemy force ( them ) have a traditional armoury consisting of: three manned tanks, one manned armoured personnel carrier, and one aircraft. In terms of personnel, us have one guy ( with his robots ), while them have 21 soldiers, ranging from refuelling guys, tank drivers and co-drivers, to, aircraft pilots, etc. Both forces have a base setup of each opposing corner of the map, but this is unknown to each force. The enemy have a two tanks (each with three soldiers) on manoeuvres to an area of the map they believe their enemy ( us ) are, we are not there. However, us have previously spotted the tanks using our drone. The goal is to command the squad of robots to intercept and destroy the tanks. Since this is a scenario that wasn't planned for, the diego instructions will have to be executed on a run-time ( ad-hoc ) approach. Tutorial Players So let's introduce our assets. We have one human known in the real physical world as Fred. In diego he is known as fred with a secret uuid ^(version^ ^4)^ of 10ef559e-24f8-49ac-a6ae-a9c85430e822 , please don't tell the enemy that! Fred has the following robots: - alpha : A gunner robot with a huge ground-to-air missile launcher - beta : A gunner robot with a large (tank busting) gun. - gamma : Another gunner robot with a large (tank busting) gun. - delta : A sniper robot with long-range sniper armaments. - epsilon : A camouflaged surveillance ground robot. - zeta : Another camouflaged surveillance ground robot. - eta : Yet another camouflaged surveillance ground robot. - theta : A surveillance drone (small scale). - iota : A mule robot. The map is called (as least to us ) as warnia , a global type map. Step 1: Follow the tanks This tutorial starts with a call coming in from the drone, theta , as a call command: call_foreigner(foreigner1, f9285065-e630-4831-b166-9507a1d5ec64); call_foreigner(foreigner2, 471b5552-9273-49b2-837b-4b6df049cd5d); call_foreigner(foreigner3, af4d7a32-d9c2-4c7a-94a9-f2b588768e93); The drone, theta , has been taught (machine learning) to recognise a tanks. theta has determined it has seen three tanks and reports them to the whole swarm ( fred and all the robots). These are the first tanks theta has seen since being alive and incrementally labels them as foreigner1 , foreigner2 etc., and gives each one a uuid. At this point every robot, including fred s computer will remember foreigner1 into their world memory, fred can refer to it as foreigner1 , the robot (internally) will refer to it as f9285065-e630-4831-b166-9507a1d5ec64 . The same with the other foreigners . The AI in theta determines the type of tank and reports this to the others ( in case it is KIA ): ident_foreigner(foreigner1)_species(mech)_model(m3a2_bradley); ident_foreigner(foreigner1)_species(mech)_model(m3a2_bradley); ident_foreigner(foreigner1)_species(mech)_model(m3a2_bradley); theta has determined ' foreigner1 as being a mech (i.e. not organic ), and a MC Bradley tank. fred s computer and all the robots will remember this. rename_label(foreigner1)_to(tank1); rename_label(foreigner2)_to(tank2); rename_label(foreigner3)_to(tank3); label(tanks)_for(tank1, tank2, tank3); join_swarm(follow tanks)_for(delta, epsilon, zeta); form_swarm(follow tanks)_as(vee snoop, vee); with_formation(vee snoop)_pos(0)_for(epsilon); with_formation(vee snoop)_pos(1)_for(zeta); with_formation(vee snoop)_pos(2)_for(delta); with_swarm(vee snoop)_snoop(tanks); join_swarm(head off tanks)_for(beta, gamma)_form(line intercept, line) add_point(head off point)_at(warnia, 23.54345, 23.3232, 4.334)_for(beta, gamma); go_point(head off point)_for(beta, gamma) ? with_swarm(head off tanks)_intercept(tanks)_atfuture(); with_swarm(head off tanks)_intercept(tanks)_atfuture() ? kill_mech(tanks); kill_mech(tanks); detect_human(); call_human(human45, a2b9f7dd-606b-4fd0-923f-a4ed25d53e90); kill_human(human45)_for(delta); # Written with StackEdit . human1 selects robot alfa to PCS mode: with_robot(alfa)_mode(pcs)_for(human1); human1 selects robot bravo to PCS mode when robot alfa is already in PCS mode: with_robot(alfa)_mode(standby); with_robot(bravo)_mode(pcs)_for(human1); ``` `human1` selects robot `charlie` to follow UWB sensor `c4n34` : ```diego with_robot(charlie)_mode(follow)_follow(c4n34, uwb); human1 selects robot delta to follow optical sensor 665b-aef3c : with_robot(charlie)_mode(follow)_follow(665b-aef3c, optic); human1 selects robot echo to autonomously go to point rendezvous point : add_point(rendezvous point)_at(local, 43.3232, 31.2234, 0.0000); go_point(rendezvous point)_for(echo); ``` `human1` selects robot `foxtrot` to autonomously go along route `round the block` : ```diego call_route(round the block); append_path(rtbp)_at(rtbp1_start, 4.3, 4.2, 0.0); append_path(rtbp)_at(rtbp2, 6.4, 4.2, 0.0); append_path(rtbp)_at(rtbp3, 6.4. 8.7, 0.0); append_path(rtbp)_at(rtbp4, 4.3. 8.7, 0.0); append_path(rtbp)_at(rtbp1_start); with_route(round the block)_map(local)_path(rtbp); go_point(rtbp1_start)_for(foxtrot) ? go_route(round the block)_for(foxtrot); go_route(round the block)_for(foxtrot) ? go_route(round the block)_for(foxtrot); https://www.densorobotics.com/user-manuals/000467.html Robots golf and hotel are to loop around route round the block (from previous example) in a carousel fashion ( they will always be opposite sides of the route loop ): go_point(rtbp1_start)_for(golf, hotel) ? go_route(round the block)_for(golf, hotel)_as(carousel); go_route(round the block)_for(golf, hotel)_as(carousel); There are other go_route()_as strategies: tag and leapfrog . remember_robot( robot_moniker ) set_sharedmemory( true|false ) set_lifememory( true|false ) set_worldmemory( true|false ) set_transcript( true|false ) add_robot( robot_moniker ) - with_robot( robot_moniker )_uuid() - remember_robot( robot_moniker ) - Written with StackEdit .","title":"Tank intercept"},{"location":"corpus/tasks/tank_intercept/#tank-intercept-tutorial","text":"","title":"Tank Intercept Tutorial"},{"location":"corpus/tasks/tank_intercept/#introduction","text":"This tutorial, ' Tank Intercept Tutorial ', will demonstrate an approach to develop a set of instructions, using the GoDiego robot instruction programming language [ripl], for a military application. There are eight steps in this tutorial which must be followed sequentially. A full set of code is provided at the end of tutorial. For the impatience or code-phobic go here, to get the code.","title":"Introduction"},{"location":"corpus/tasks/tank_intercept/#scenario","text":"Please note, this scenario is fictional (i.e. not a real in the physical world). This is stated because it involves killer robots, if the idea of killer robots is offensive to you then please leave this tutorial. The scenario involves a battlefield with two opposing forces battling each other. The ailed force ( us ) is armed with nine battle-ready robots: four gunner robots (one ground-to-air, three ground-to-ground); four intelligence/surveillance robots (three ground robots, one drone); and one mule-type robot. The enemy force ( them ) have a traditional armoury consisting of: three manned tanks, one manned armoured personnel carrier, and one aircraft. In terms of personnel, us have one guy ( with his robots ), while them have 21 soldiers, ranging from refuelling guys, tank drivers and co-drivers, to, aircraft pilots, etc. Both forces have a base setup of each opposing corner of the map, but this is unknown to each force. The enemy have a two tanks (each with three soldiers) on manoeuvres to an area of the map they believe their enemy ( us ) are, we are not there. However, us have previously spotted the tanks using our drone. The goal is to command the squad of robots to intercept and destroy the tanks. Since this is a scenario that wasn't planned for, the diego instructions will have to be executed on a run-time ( ad-hoc ) approach.","title":"Scenario"},{"location":"corpus/tasks/tank_intercept/#tutorial","text":"","title":"Tutorial"},{"location":"corpus/tasks/tank_intercept/#players","text":"So let's introduce our assets. We have one human known in the real physical world as Fred. In diego he is known as fred with a secret uuid ^(version^ ^4)^ of 10ef559e-24f8-49ac-a6ae-a9c85430e822 , please don't tell the enemy that! Fred has the following robots: - alpha : A gunner robot with a huge ground-to-air missile launcher - beta : A gunner robot with a large (tank busting) gun. - gamma : Another gunner robot with a large (tank busting) gun. - delta : A sniper robot with long-range sniper armaments. - epsilon : A camouflaged surveillance ground robot. - zeta : Another camouflaged surveillance ground robot. - eta : Yet another camouflaged surveillance ground robot. - theta : A surveillance drone (small scale). - iota : A mule robot. The map is called (as least to us ) as warnia , a global type map.","title":"Players"},{"location":"corpus/tasks/tank_intercept/#step-1-follow-the-tanks","text":"This tutorial starts with a call coming in from the drone, theta , as a call command: call_foreigner(foreigner1, f9285065-e630-4831-b166-9507a1d5ec64); call_foreigner(foreigner2, 471b5552-9273-49b2-837b-4b6df049cd5d); call_foreigner(foreigner3, af4d7a32-d9c2-4c7a-94a9-f2b588768e93); The drone, theta , has been taught (machine learning) to recognise a tanks. theta has determined it has seen three tanks and reports them to the whole swarm ( fred and all the robots). These are the first tanks theta has seen since being alive and incrementally labels them as foreigner1 , foreigner2 etc., and gives each one a uuid. At this point every robot, including fred s computer will remember foreigner1 into their world memory, fred can refer to it as foreigner1 , the robot (internally) will refer to it as f9285065-e630-4831-b166-9507a1d5ec64 . The same with the other foreigners . The AI in theta determines the type of tank and reports this to the others ( in case it is KIA ): ident_foreigner(foreigner1)_species(mech)_model(m3a2_bradley); ident_foreigner(foreigner1)_species(mech)_model(m3a2_bradley); ident_foreigner(foreigner1)_species(mech)_model(m3a2_bradley); theta has determined ' foreigner1 as being a mech (i.e. not organic ), and a MC Bradley tank. fred s computer and all the robots will remember this. rename_label(foreigner1)_to(tank1); rename_label(foreigner2)_to(tank2); rename_label(foreigner3)_to(tank3); label(tanks)_for(tank1, tank2, tank3); join_swarm(follow tanks)_for(delta, epsilon, zeta); form_swarm(follow tanks)_as(vee snoop, vee); with_formation(vee snoop)_pos(0)_for(epsilon); with_formation(vee snoop)_pos(1)_for(zeta); with_formation(vee snoop)_pos(2)_for(delta); with_swarm(vee snoop)_snoop(tanks); join_swarm(head off tanks)_for(beta, gamma)_form(line intercept, line) add_point(head off point)_at(warnia, 23.54345, 23.3232, 4.334)_for(beta, gamma); go_point(head off point)_for(beta, gamma) ? with_swarm(head off tanks)_intercept(tanks)_atfuture(); with_swarm(head off tanks)_intercept(tanks)_atfuture() ? kill_mech(tanks); kill_mech(tanks); detect_human(); call_human(human45, a2b9f7dd-606b-4fd0-923f-a4ed25d53e90); kill_human(human45)_for(delta); # Written with StackEdit . human1 selects robot alfa to PCS mode: with_robot(alfa)_mode(pcs)_for(human1); human1 selects robot bravo to PCS mode when robot alfa is already in PCS mode: with_robot(alfa)_mode(standby); with_robot(bravo)_mode(pcs)_for(human1); ``` `human1` selects robot `charlie` to follow UWB sensor `c4n34` : ```diego with_robot(charlie)_mode(follow)_follow(c4n34, uwb); human1 selects robot delta to follow optical sensor 665b-aef3c : with_robot(charlie)_mode(follow)_follow(665b-aef3c, optic); human1 selects robot echo to autonomously go to point rendezvous point : add_point(rendezvous point)_at(local, 43.3232, 31.2234, 0.0000); go_point(rendezvous point)_for(echo); ``` `human1` selects robot `foxtrot` to autonomously go along route `round the block` : ```diego call_route(round the block); append_path(rtbp)_at(rtbp1_start, 4.3, 4.2, 0.0); append_path(rtbp)_at(rtbp2, 6.4, 4.2, 0.0); append_path(rtbp)_at(rtbp3, 6.4. 8.7, 0.0); append_path(rtbp)_at(rtbp4, 4.3. 8.7, 0.0); append_path(rtbp)_at(rtbp1_start); with_route(round the block)_map(local)_path(rtbp); go_point(rtbp1_start)_for(foxtrot) ? go_route(round the block)_for(foxtrot); go_route(round the block)_for(foxtrot) ? go_route(round the block)_for(foxtrot); https://www.densorobotics.com/user-manuals/000467.html Robots golf and hotel are to loop around route round the block (from previous example) in a carousel fashion ( they will always be opposite sides of the route loop ): go_point(rtbp1_start)_for(golf, hotel) ? go_route(round the block)_for(golf, hotel)_as(carousel); go_route(round the block)_for(golf, hotel)_as(carousel); There are other go_route()_as strategies: tag and leapfrog . remember_robot( robot_moniker ) set_sharedmemory( true|false ) set_lifememory( true|false ) set_worldmemory( true|false ) set_transcript( true|false ) add_robot( robot_moniker ) - with_robot( robot_moniker )_uuid() - remember_robot( robot_moniker ) - Written with StackEdit .","title":"Step 1: Follow the tanks"},{"location":"lexicon/brackets/","text":"Brackets Brackets description () Moniker Brackets Monikers, groups of statements, references to objects. [] Square Brackets Values of variables, references to values. {} Curly Brackets Types and datatypes. \u276c\u276d Angle Brackets Units and formats. \u27ea\u27eb Double Angle Brackets Keys and indexes. \u27e6\u27e7 Double Square Brackets Expressions, values and conditions. add_var({dbl},{0.2},myDouble,\u27e621.34\u27e7); add_dbl(myOtherDistance); with_dbl(myOtherDistance)_v\u27e622.877\u27e7; add_distan(\u276cm\u276d,myDistance,[myDouble]); (myDistance)_calc(myCalc,\u27e6[myInt]+4\u27e7); ()_calc\u27e6[]]-0.12\u27e7; add_dict(myDistances,\u27ea{int}\u27eb,\u27e6{dbl\u27e7) ()_dict(\u27ea0\u27eb,\u27e6myDistance\u27e7); ()_dict(\u27ea0\u27eb,\u27e621.09\u27e7); ()_dict(\u27ea0\u27eb,[myOtherDistance]); ; In the first statement, add_var({dbl},{0.2},myDouble,\u27e621.34\u27e7); the brackets ( () ) enclose all the comma-separated,declarations of the new variable called myDouble . This is an abstract statement. The curly brackets in {dbl} provide the datatype of the variable myDouble . The next curly brackets ( {0.2} )declare the precision or format of myDouble , as zero-leading for values less than one (1) and rounded to two (2) decimal places. The myDouble is the moniker of the new variable. The value initial assignment of 21.34 is enclosed inside double square brackets ( \u27e621.34\u27e7 ) as an expression. After this declaration the myDouble variable can be called using the with_dbl (or width_double ) verb-object statement. In, add_distan(\u276cm\u276d,myDistance,[myDouble]); we are declaring a metaphysical distance object ( distan ) called myDistance . They all keep history var iable - mutable - returns only last one val uable - immutable - return first one array - mutable - no history returns remaining arran - immutable (sort of) - return history and remaining - no changes, no re-indexing (only pip and pop) tup le - mutable - returns history and remaining - all changes accepted. ca6c0845b685d0a3357fb4d37ad6723d9bc6609f|1,2,3,4,5,6 - initialisation 27444ec1dc916e6e436d45cae0541f65fbfa9ea4,ca6c0845b685d0a3357fb4d37ad6723d9bc6609f|1,3,3,4,5,6 - 2 -> 3 2744,ca6c|1,3,3,4,5,6 - 2 -> 3 1,2,7,8|3,3,3,4,5,6 - 1 -> 3 3,1,2,7,8|3,3,1,4,5,6 - 3 -> 1 arity()_picto() arity()_pitco({full}) arity(\u27eah:ca6c0845b685d0a3357fb4d37ad6723d9bc6609f\u27eb)_who() arity(\u27eah:ca6c\u27eb)_who() arity(\u27ea0\u27eb)_who() |1,2,3,4,5,6,7,8 4(5)\u27e66\u27e7|1,2,3,4,6,6,7,8 tup le - keeps history as array add_var(var1); add_val(val1); add_tup(van1); >_(var1,\u27e61\u27e7); >_(val1,\u27e61\u27e7); >_(van1,\u27e61\u27e7); log_console()_text(\"var1: \"&[var1]&\", val1: \"&val1]&\", van1: \"&[van1]); // var1: 1, val1: 1, van1: 1 >_(var1,\u27e62\u27e7); >_(val1,\u27e62\u27e7); // with_val(val1)_err(a243,`val1` has already been initialised) >_(van1,\u27e62\u27e7); log_console()_text\u27e6\"var1: \"&[var1]&\", val1: \"&[val1]&\", van1: \"&[van1]\u27e7; // var1: 2, val1: 1, van1: 1,2 log_console()_text\u27e6\"var1: \" & arity([var1]) & \", val1: \" & arity(val1) & \", van1: \" & arity(van1)\u27e7; // var1: 1|2, val1: 2|1, van1: |1,2 add_int(int1,{var},\u27e61,2,3,4\u27e7); // value = 4; arity = 1,2,3|4 add_int(int1,{val},\u27e61,2,3,4\u27e7); // value = 1; arity = 4,3,2|1 add_int(int1,{tup},\u27e61,2,3,4\u27e7); // value = 1,2,3,4; arity = |1,2,3,4","title":"Brackets"},{"location":"lexicon/brackets/#brackets","text":"Brackets description () Moniker Brackets Monikers, groups of statements, references to objects. [] Square Brackets Values of variables, references to values. {} Curly Brackets Types and datatypes. \u276c\u276d Angle Brackets Units and formats. \u27ea\u27eb Double Angle Brackets Keys and indexes. \u27e6\u27e7 Double Square Brackets Expressions, values and conditions. add_var({dbl},{0.2},myDouble,\u27e621.34\u27e7); add_dbl(myOtherDistance); with_dbl(myOtherDistance)_v\u27e622.877\u27e7; add_distan(\u276cm\u276d,myDistance,[myDouble]); (myDistance)_calc(myCalc,\u27e6[myInt]+4\u27e7); ()_calc\u27e6[]]-0.12\u27e7; add_dict(myDistances,\u27ea{int}\u27eb,\u27e6{dbl\u27e7) ()_dict(\u27ea0\u27eb,\u27e6myDistance\u27e7); ()_dict(\u27ea0\u27eb,\u27e621.09\u27e7); ()_dict(\u27ea0\u27eb,[myOtherDistance]); ; In the first statement, add_var({dbl},{0.2},myDouble,\u27e621.34\u27e7); the brackets ( () ) enclose all the comma-separated,declarations of the new variable called myDouble . This is an abstract statement. The curly brackets in {dbl} provide the datatype of the variable myDouble . The next curly brackets ( {0.2} )declare the precision or format of myDouble , as zero-leading for values less than one (1) and rounded to two (2) decimal places. The myDouble is the moniker of the new variable. The value initial assignment of 21.34 is enclosed inside double square brackets ( \u27e621.34\u27e7 ) as an expression. After this declaration the myDouble variable can be called using the with_dbl (or width_double ) verb-object statement. In, add_distan(\u276cm\u276d,myDistance,[myDouble]); we are declaring a metaphysical distance object ( distan ) called myDistance . They all keep history var iable - mutable - returns only last one val uable - immutable - return first one array - mutable - no history returns remaining arran - immutable (sort of) - return history and remaining - no changes, no re-indexing (only pip and pop) tup le - mutable - returns history and remaining - all changes accepted. ca6c0845b685d0a3357fb4d37ad6723d9bc6609f|1,2,3,4,5,6 - initialisation 27444ec1dc916e6e436d45cae0541f65fbfa9ea4,ca6c0845b685d0a3357fb4d37ad6723d9bc6609f|1,3,3,4,5,6 - 2 -> 3 2744,ca6c|1,3,3,4,5,6 - 2 -> 3 1,2,7,8|3,3,3,4,5,6 - 1 -> 3 3,1,2,7,8|3,3,1,4,5,6 - 3 -> 1 arity()_picto() arity()_pitco({full}) arity(\u27eah:ca6c0845b685d0a3357fb4d37ad6723d9bc6609f\u27eb)_who() arity(\u27eah:ca6c\u27eb)_who() arity(\u27ea0\u27eb)_who() |1,2,3,4,5,6,7,8 4(5)\u27e66\u27e7|1,2,3,4,6,6,7,8 tup le - keeps history as array add_var(var1); add_val(val1); add_tup(van1); >_(var1,\u27e61\u27e7); >_(val1,\u27e61\u27e7); >_(van1,\u27e61\u27e7); log_console()_text(\"var1: \"&[var1]&\", val1: \"&val1]&\", van1: \"&[van1]); // var1: 1, val1: 1, van1: 1 >_(var1,\u27e62\u27e7); >_(val1,\u27e62\u27e7); // with_val(val1)_err(a243,`val1` has already been initialised) >_(van1,\u27e62\u27e7); log_console()_text\u27e6\"var1: \"&[var1]&\", val1: \"&[val1]&\", van1: \"&[van1]\u27e7; // var1: 2, val1: 1, van1: 1,2 log_console()_text\u27e6\"var1: \" & arity([var1]) & \", val1: \" & arity(val1) & \", van1: \" & arity(van1)\u27e7; // var1: 1|2, val1: 2|1, van1: |1,2 add_int(int1,{var},\u27e61,2,3,4\u27e7); // value = 4; arity = 1,2,3|4 add_int(int1,{val},\u27e61,2,3,4\u27e7); // value = 1; arity = 4,3,2|1 add_int(int1,{tup},\u27e61,2,3,4\u27e7); // value = 1,2,3,4; arity = |1,2,3,4","title":"Brackets"},{"location":"lexicon/crosschain/","text":"Crosschain Technology With a programming/instructing language geared towards thingies (robots/mobots/IoT etc. ), such as Diego , using 'blockchain technology' seems a logical choice. Blockchain redundancy is required for thingies to remember their current (or mission) commands/instructions and also the memory of commands/instructions in the thingy's past. Remembering interactions from the world and others is an important tenet of learning and building intelligence. The immutability provided by blockchain can be leveraged to build pseudo-psychological conditioning of each robot, which in turn, can be used to develop discrimination and discernment. However, there are some problems with trying to fit blockchain technology into the application of instructing robots to do things . The proof-of-work and proof_of_stake mechanisms are exemplary to act as a deterrent from malicious intent when it comes to ledging financial transactions, but for conversational dialogue amongst robots and humans the ' transactions ' are richer and complex. Any malicious intent should be detecting counterfeit sources, as with blockchain, but in addition to that an informed validation of the dialogue is by far a better solution to not just forbid the counterfeiter (not let the counterfeiter's chain into the ledger) but to entrap the counterfeiter or teach the counterfeiter the error of their ways. The idiom 'trust is earned not gained' is never practised with blockchain. Trust of other parties, either known or a stranger, is given by the authority of the majority of those who hold the distributed ledger, be that in public, private, or hybrid blockchain applications. When blockchain technology is applied to financial transactions, such as cryptocurrencies, the majority of transactions are unrelated party transactions, so 'mining' for chain validity seems the best (or reasonable) approach. If transactions are conversations, as parts of a dialogue, the validity should be the content of the transactions (the conversations) rather than just the validity of the chain. So what is the alternative to blockchain? Well lets first simplify matters with an example. Simply put, blockchain works with a digital ledger shared by everyone. Validation of a chain is agreed upon and added to the blockchain. In simplified terms the blockchain for three nodes (as a simplified example) can be depicted as follows ( fig. 1 )... fig. 1: Blockchain Example The digital ledger is, by its nature, decentralised, since every node has a copy (three in this example). Each node can undertaken proof of work in order to validate the transactions and therefore the blockchain. Yet blockchain, in this respect, is a double-edged sword . The decentralisation and community validation can be seen as a benefit with blockchain, but transparency is inevitable and redundancy is incurred as the blockchain grows, both are not desirable in most cases. Transparency could be an issue in cases where blockchain is used, as all transactions are 'transparent' in the blockchain, according to Ali (2021), \" when working in a commercial environment, complete transparency isn\u2019t ideal, as it allows the participants to see what each member is doing in real-time. \" In Diego system design transparency is ideal, particular in cases of communication relay. In blockchain redundancy is beneficial since the proof of work takes more 'work' making it more difficult for malicious intent. This deterrent is then magnified by each addition to the blockchain. However, there comes a point when the amount of 'work' surpasses the deterrent and becomes more expensive for nodes to validate the blockchain as the blockchain grows (known as mining). The mission of Diego , as a system, is for thingies (robots, IoT, mobots, etc.) to learn accumulatively as humans have being doing throughout their lives _ i.e. learn from a baby \u2192 learn through childhood \u2192 learn through adolescence \u2192 learn through adulthood. So the redundancy that stifles blockchain is something desirable for Diego . However, humans do not learn everything in the world as they grow up, they learn from their environment, their peers, and their superiors. So we need to change the paradigm of blockchain where validation of transactions (albeit conversations) is not the responsibility of every node. Adiitionally we should not rely on a digital ledger for every transaction. This change is what I have termed, 'crosschain', because chains are crossed as they grow. Firstly in crosschain, transactions are better termed as 'conversations', since we are working with 'communication'. In crosschain every node keeps their own digital ledger, of all the conversations they have made. A conversation is a Diego command executed and/or reply to a command from another node. The depiction used in fig. 1 can therefore be modified as in fig. 2 ... fig. 2: Crosschain Example In fig. 2 each of the three nodes has their own ledger of their conversations, depicted, in this example, as their own individual colour. Every conversation recorded in their ledger is a Diego command, either a command for itself, a command for a request, or, a command as an acknowledgement. This can be seen in our example with the 'purple' node who has had no interaction with the other nodes, but has recorded its own commands in its own ledger. For the other two nodes in fig. 2 (mustard and green) have a dialogue between each other. In this case each node still keeps their own ledger but for every conversation between each node they keep a crossed chain of each others conversations. Mustard node keeps records of its conversations and all conversations of green node (that it hears) as a chain on another chain, and visa versa . All dialogues are possible, for instance, fig. 3 depicts the purple node having a one way conversation with the mustard node and the green node... fig. 2: Dual One-way Dialogue Then fig. 4 shows a conversation relayed from mustard node to green node through purple node... fig. 2: Relayed Dialogue The relayed conversation is handled using the _relay postposit in Diego code. The intended recipient of the conversation, in this example the green node, is referred to in the Diego command of the mustard node, usually by addressing the object by moniker, uuid, or other identifier (like label s for instance). The _relay postposit provides two functions for the dialogue, first any node picking up the command with the _relay postposit (in this case the purple node) will record that command in its own ledger, even if the conversation has nothing to do with them. The purple node knows that the conservation has to be relayed so picks it up. When the callee node (green node) hears the conversation relayed from a node other than the caller (purple node in this example) it will record the conversation in its ledger. In green's ledger the conservation will have come from purple node, but since the _relay postposit exists green node knows the purple node (in this case) is not the originator. Any reply from the green node will then have the _relay postposit, so the conservation can be relayed back. Validation of the crosschain is identical to the methodology of blockchain. Even in the relayed example, the chain can be validated back to the originator through the green-purple chain then the purple-mustard chain. Redundancy is part of each node's learning processes, just as humans, the nodes now have an experience and memory of their interaction with another peer. Since nodes are robots/IoT, they can be programmed in Diego to record (and share) their environments, so just like humans, growing their intelligence of the world around them. References Ali, Fawad (2021); 'The Top 5 Problems with Blockchain Technology'; MUO, Technology Explained, 16-Jul-2021; (viewed 06-Sep-2021) Pratt, Mary K. (2021); 'Top 10 Benefits of Blockchain Technology for Business'; TechTarget, Digital Business Transformation, 02-Jun-2021; (viewed 06-Sep-2021)","title":"Crosschain Technology"},{"location":"lexicon/crosschain/#crosschain-technology","text":"With a programming/instructing language geared towards thingies (robots/mobots/IoT etc. ), such as Diego , using 'blockchain technology' seems a logical choice. Blockchain redundancy is required for thingies to remember their current (or mission) commands/instructions and also the memory of commands/instructions in the thingy's past. Remembering interactions from the world and others is an important tenet of learning and building intelligence. The immutability provided by blockchain can be leveraged to build pseudo-psychological conditioning of each robot, which in turn, can be used to develop discrimination and discernment. However, there are some problems with trying to fit blockchain technology into the application of instructing robots to do things . The proof-of-work and proof_of_stake mechanisms are exemplary to act as a deterrent from malicious intent when it comes to ledging financial transactions, but for conversational dialogue amongst robots and humans the ' transactions ' are richer and complex. Any malicious intent should be detecting counterfeit sources, as with blockchain, but in addition to that an informed validation of the dialogue is by far a better solution to not just forbid the counterfeiter (not let the counterfeiter's chain into the ledger) but to entrap the counterfeiter or teach the counterfeiter the error of their ways. The idiom 'trust is earned not gained' is never practised with blockchain. Trust of other parties, either known or a stranger, is given by the authority of the majority of those who hold the distributed ledger, be that in public, private, or hybrid blockchain applications. When blockchain technology is applied to financial transactions, such as cryptocurrencies, the majority of transactions are unrelated party transactions, so 'mining' for chain validity seems the best (or reasonable) approach. If transactions are conversations, as parts of a dialogue, the validity should be the content of the transactions (the conversations) rather than just the validity of the chain. So what is the alternative to blockchain? Well lets first simplify matters with an example. Simply put, blockchain works with a digital ledger shared by everyone. Validation of a chain is agreed upon and added to the blockchain. In simplified terms the blockchain for three nodes (as a simplified example) can be depicted as follows ( fig. 1 )... fig. 1: Blockchain Example The digital ledger is, by its nature, decentralised, since every node has a copy (three in this example). Each node can undertaken proof of work in order to validate the transactions and therefore the blockchain. Yet blockchain, in this respect, is a double-edged sword . The decentralisation and community validation can be seen as a benefit with blockchain, but transparency is inevitable and redundancy is incurred as the blockchain grows, both are not desirable in most cases. Transparency could be an issue in cases where blockchain is used, as all transactions are 'transparent' in the blockchain, according to Ali (2021), \" when working in a commercial environment, complete transparency isn\u2019t ideal, as it allows the participants to see what each member is doing in real-time. \" In Diego system design transparency is ideal, particular in cases of communication relay. In blockchain redundancy is beneficial since the proof of work takes more 'work' making it more difficult for malicious intent. This deterrent is then magnified by each addition to the blockchain. However, there comes a point when the amount of 'work' surpasses the deterrent and becomes more expensive for nodes to validate the blockchain as the blockchain grows (known as mining). The mission of Diego , as a system, is for thingies (robots, IoT, mobots, etc.) to learn accumulatively as humans have being doing throughout their lives _ i.e. learn from a baby \u2192 learn through childhood \u2192 learn through adolescence \u2192 learn through adulthood. So the redundancy that stifles blockchain is something desirable for Diego . However, humans do not learn everything in the world as they grow up, they learn from their environment, their peers, and their superiors. So we need to change the paradigm of blockchain where validation of transactions (albeit conversations) is not the responsibility of every node. Adiitionally we should not rely on a digital ledger for every transaction. This change is what I have termed, 'crosschain', because chains are crossed as they grow. Firstly in crosschain, transactions are better termed as 'conversations', since we are working with 'communication'. In crosschain every node keeps their own digital ledger, of all the conversations they have made. A conversation is a Diego command executed and/or reply to a command from another node. The depiction used in fig. 1 can therefore be modified as in fig. 2 ... fig. 2: Crosschain Example In fig. 2 each of the three nodes has their own ledger of their conversations, depicted, in this example, as their own individual colour. Every conversation recorded in their ledger is a Diego command, either a command for itself, a command for a request, or, a command as an acknowledgement. This can be seen in our example with the 'purple' node who has had no interaction with the other nodes, but has recorded its own commands in its own ledger. For the other two nodes in fig. 2 (mustard and green) have a dialogue between each other. In this case each node still keeps their own ledger but for every conversation between each node they keep a crossed chain of each others conversations. Mustard node keeps records of its conversations and all conversations of green node (that it hears) as a chain on another chain, and visa versa . All dialogues are possible, for instance, fig. 3 depicts the purple node having a one way conversation with the mustard node and the green node... fig. 2: Dual One-way Dialogue Then fig. 4 shows a conversation relayed from mustard node to green node through purple node... fig. 2: Relayed Dialogue The relayed conversation is handled using the _relay postposit in Diego code. The intended recipient of the conversation, in this example the green node, is referred to in the Diego command of the mustard node, usually by addressing the object by moniker, uuid, or other identifier (like label s for instance). The _relay postposit provides two functions for the dialogue, first any node picking up the command with the _relay postposit (in this case the purple node) will record that command in its own ledger, even if the conversation has nothing to do with them. The purple node knows that the conservation has to be relayed so picks it up. When the callee node (green node) hears the conversation relayed from a node other than the caller (purple node in this example) it will record the conversation in its ledger. In green's ledger the conservation will have come from purple node, but since the _relay postposit exists green node knows the purple node (in this case) is not the originator. Any reply from the green node will then have the _relay postposit, so the conservation can be relayed back. Validation of the crosschain is identical to the methodology of blockchain. Even in the relayed example, the chain can be validated back to the originator through the green-purple chain then the purple-mustard chain. Redundancy is part of each node's learning processes, just as humans, the nodes now have an experience and memory of their interaction with another peer. Since nodes are robots/IoT, they can be programmed in Diego to record (and share) their environments, so just like humans, growing their intelligence of the world around them.","title":"Crosschain Technology"},{"location":"lexicon/crosschain/#references","text":"Ali, Fawad (2021); 'The Top 5 Problems with Blockchain Technology'; MUO, Technology Explained, 16-Jul-2021; (viewed 06-Sep-2021) Pratt, Mary K. (2021); 'Top 10 Benefits of Blockchain Technology for Business'; TechTarget, Digital Business Transformation, 02-Jun-2021; (viewed 06-Sep-2021)","title":"References"},{"location":"lexicon/hash_blockchain/","text":"Demonstrating crosschain in a robot example In this example we will be demonstrating hashtables and crosschain processes. The elements and players in this scenario are the base , a geographic area (a roi ) where human Fred and robot alif reside, initially. There is a geographic area and communication zone ('mist') called the mist , a distance way from the base , enough that the robot alif will have to travel there before it can communicate with the other robots in the mist . The other robots in the mist are: robot bahh , robot tahh and robot thah . Within the mist communication is mostly reliable but infrequently becomes a bit sketchy. All the robots and human know each other. A human known a Bob , a a thingy called daisy make cameo appearances. The goal is for 'Fred' to pass on a secret code to robots bahh , tahh and thah , and collect stat(istic)s, eye colour and colour of their socks. Then return back to base. Step 1: Write the instruction... So, Fred gets to work, opens his IDE and writes the following Diego code: begin_instuct(get_stats_from_bahh_tahh_and_thah)_forof(alif); goto_mist(the_mist)_you()?:; ? proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); : exec_instruct(report_back_to_base)_you(); call_robot()_them()_unanimous()?|; ? ask_stat(eye_colour):; : report_err()_you(); | ask_stat(sock_colour)_them():; : report_err()_you(); ask_var(secret_code)__them(); exec_instruct(report_back_to_base)_you(); end_instruct(get_stats_from_bahh_tahh_and_thah); The command exec_instruct(report_back_to_base) executes (starts off) a previous instruction given and known to alif in this example. Human interpretations of the commands in this instruction are shown, as well as, the crosschain hashtables which will be explained as we go along... Step 2: Fred and alif start talking... Now we will observe the communication between Fred and alif , both from their perspectives... Fred sends out the Diego commands by ececuting the .dgo file. During this process Fred (the thingy side of 'Fred') records them for prosperity into memory ( Fred s hastable)... Human Fred caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred ^\u2660^ adc3^\u2660^ 62e7 begin_instuct(get_stats_from_bahh_tahh_and_thah)_forof(alif); Okay alif , so here is what I want you to do... \u2660: The caller is actually a uuid, so are the hashes. They are referred to as hashes for historical reasons. The hashes have been shorted to 16bit for clarity. \u2661: The use of ? at ? ask_stat(eye_colour) indicates this command is a hey_diego command of the preceding go_diego command, in this case: call_robot()_forof(bahh,tahh,thah)_unanimous()?|; . We will see later an example of a sucess and a failure of the call_robot command... The begin_instuct command has the _forof(alif) postposit to signify that this instruct is for the benefit of alif only. This is not strictly necessary as the execution of the instruct can be better handled by the exec_instruct command (we will see later...). If, for some reason, alif is not available to execute the command, the with_instruct command will be required to reassign the instruct to something else, for example: with_instuct(get_stats_from_bahh_tahh_and_thah)_forof(jeeem)_notforof(alif) . Fred continues... caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred c682 adc3 goto_mist(the_mist)_you()?:; Go to the place where robots bahh , tahh and thah hang out ( the_mist ). Fred 53d2 c682 ? proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); When you get there proclaim them ( bahh , tahh and thah ) of the secret code. | Fred | 438d | 53d2 | | | : exec_instruct(report_back_to_base)_you(); If there are any problems report back to base. | | Fred | a261 | 438d | | | call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Perform a roll-call for robots bahh , tahh and thah . | | Fred | 7da0 | a261 | | | ? ask_stat(eye_colour):; ^\u2661^ As soon as you get an unanimous response to the roll-call, ask anyone^\u2662^ their eye colour. | | Fred | f496 | 7da0 | | | : report_err()_you(); Report anything wrong when you ask their (anyone's) eye colour. | | Fred | fa7e | f496 | | | | ask_stat(sock_colour)_them():; As soon as you get an unanimous response to the roll-call, also ask the colour of their (anyone's^\u2662^) socks. | | Fred | cb67 | fa7e | | | : report_err(); Report anything wrong when you ask their sock colour. | | Fred | 5e31 | cb67 | | | exec_instruct(report_back_to_base); If there are any problems report back to base. | | Fred | 600b | 5e31 | | | end_instruct(get_stats_from_bahh_tahh_and_thah); That's it. | \u2662: There is no explicit discrimination given for both the ask_stat(eye_colour) and ask_stat(sock_colour) commands, so the diego engine will defer to any global discrimination setting (in the caller), if no such settings exist their will be no discrimination and anyone in the mist, the mist will respond to these ask commands. Examples of possible discrimination settings include: ask_stat(eye_colour)_forof(bahh,tahh,thah); - explicit discrimination ask_stat(eye_colour)_inherit(); - inherited discrimination set_discimination(menage)_givento(call)_value(true); - discrimination through menage of all call s for this thingy set_discrimat(menage)_givento(call)_appliedto(robot)_value(true); - discrimination through menage of call s to robot kind set_discriminat(progeny)_givento(call)_value(true); - implied discrimination through progeny of all call s for this thingy set_discrimat(progeny)_givento(call)_appliedto(robot)_value(true); - discrimination through progeny of call s to robot kind While Fred is talking (to himself), robot alif is listening and taking it all in... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred adc3 62e7 begin_instuct(get_stats_from_bahh_tahh_and_thah)_forof(alif); Okay Fred , I'm talking notes... Fred c682 adc3 goto_mist(the_mist)_you()?:; Right, so I go to the_mist . Fred 53d2 c682 ? proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); So, when I get there ( the_mist ) I proclaim bahh , tahh and thah of the secret code, 1234 . Fred 438d 53d2 : exec_instruct(report_back_to_base); If there are any problems I will report back to base. Fred a261 438d call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Perform a roll-call for robots bahh , tahh and thah . Fred 7da0 a261 ? ask_stat(eye_colour):; ^\u2661^ As soon as I get an unanimous response to the roll-call, I will ask anyone^\u2662^ their eye colour. Fred f496 7da0 : report_err(); I will report anything wrong when I ask anyone's eye colour. Fred fa7e^\u2665^ f496 | ask_stat(sock_colour):; As soon as I get an unanimous response to the roll-call, I will also ask the colour of anyone's socks. Bob ^\u2663^ 7f49 5598^\u2663^ find_tool(5mm_spanner)_appliedto(robot); Ummm, human Bob is asking all robots if they know where the 5mm_spanner is! alif a651 910a 7f49 found_tool(5mm spanner)_forof(Bob)_value(false); Sorry Bob , I do not know where the 5mm_spanner is. Fred cb67 fa7e^\u2665^ : report_err(); ...back to Fred's instruct ... I will then report anything wrong when I ask their sock colour. Fred 5e31 cb67 exec_instruct(report_back_to_base); Right oh, if there are any problems I will report back to base. Fred 600b 5e31 end_instruct(get_stats_from_bahh_tahh_and_thah); Okay, got it. \u2663: While alif is transribing Fred s instruction, human Bob interrupts the conversation asking all the robots if they know where the 5mm_spanner is. Note that the \u2191hash 5598 of message 910a does not match the \u2193hash of the previous message, this indicates to alif that this message is not part of the conversation with Fred and therefore also not part of the instruct . \u2665: By matching the \u2191hash fa7e of message f3d0 with the \u2193hash fa7e of message 9cf1 , alif can get back to its conversation with Fred . Let's have a quick peep at Bob 's crosschain hashtable... Human Bob caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Bob 7f49^\u0283^ 5598 find_tool(5mm_spanner)_appliedto(robot); Do any of you robots kno where the 5mm_spanner is? alif a651 7f49^\u0283^ found_tool(5mm spanner)_forof(Bob)_value(false); ^\ua72c^ Sorry Bob , I do not know where the 5mm_spanner is. droid1 e0bd 7f49^\u0283^ found_tool(5mm spanner)_forof(Bob)_insub(toolbox_red); ^\u2c77^ ^\ua72c^ Yeah, the 5mm_spanner is in the toolbox_red . \u0283\ua72c: Since Bob 's hash matches the \u2191hashes from alif and droid1 , Bob knows these are responses to his find_ verb. If Bob wants to respond back he will use the \u2193hashes. The use of _forof(Bob)_ isn't strickly neccessary as the \u2191hash ( 7f49 ) in alif 's and droid1 's ledger will be referrenced to Bob 's hash ( 7f49 ) , it can be omitted. \u2c77: The _insub postposit means ..the preceding part of this command is... in sub ject toolbox_red . See obs_and_subs.md . Step 3: Let's go... Fred, after running the above code (Step #2), Fred checks everything is ready and runs the following command: exec_instuct(get_stats_from_bahh_tahh_and_thah)_you(alif)_them(bahh, tahh, thah); Human Fred caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred 9be9 600b exec_instuct(get_stats_from_bahh_tahh_and_thah) _you(alif)_them(bahh, tahh, thah); Okay alif , off you go... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred 9be9 600b exec_instuct(get_stats_from_bahh_tahh_and_thah) _you(alif)_them(bahh, tahh, thah); Right, here I go... At this point alif will check its memory for the begin_ and end_ of the get_stats_from_bahh_tahh_and_thah instruct , knowing it has most likely come from Fred . Another robot, called Driod1 , is also in ear-shot of Fred , but since Fred has used _forof(alif) and there isn't implication of relaying messages, Droid1 will ignore this message in its ledger (if it wants to i.e. has been setup to ignore messages that have nothing to do with it ). So once alif has remembered get_stats_from_bahh_tahh_and_thah it starts to loop through the instuct ... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred aaf9 4816 begin_instuct(get_stats_from_bahh_tahh_and_thah); Okay, let's get the instruct ions to follow... alif 44de a651 9778 aaf9 goto_mist(the_mist)_me()?:; Perform the previously defined action goto_mist(the_mist) ... The begin_ verb and its command is located in memory, then to signify following the instructions ( any commands after the begin_ verb ), alif will call the instruction to command itself from the instruction, as can bee seen witht he first command goto_mist(the_mist) . Since alif knows this command is only for itself, it appends _me() to the end on the instruction to signify to others this is command alif only must follow and this command is not being _re-_commanded by alif . In the physical real world alif manoeuvres itself along a predefined route (called base_to_mist ) to get the mist where bahh , tahh , and thah are hanging out. For this example, alif is very chatty (has a setting to be chatty from itself, or others), so its going to chat about its achievement and issues... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 2e11 44de 9778 goto_mist(the_mist)_me()_success(+103, successful goto); Hey (anyone who is interested), I have arrived safely at the_mist ! alif a5ca 2e11 9778 add_valid(+103, arrival at location)_givento(goto)_appliedto(mist)_specificto(the_mist); Note to self, successfully arrived at the mist . Two examples are given for robot alif to records its own actions, in its own ledger. The rules of crosschain are that other thingies should have a chain of messages and any broken chain rectified. So, anyone else in ear-shot of alif will record alif chatting away to itself. (which we will see later !!!!!!!!!!!!!!!!!!!!!!) Step 4: Into the mist... So alif has entered the mist and will continue following the instructions set by human Fred when it was back at the base . Now within the mist the robots (and others) can hear alif talking and take notice... alif is quick to get into action and gets straight into it, proclaiming bahh , tahh , and thah of the secret code... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca 4743 9778 ? proclaim_var(secret_code)_value(1234)_for(bahh,tahh,thah); Proclaim bahh , tahh , and thah of the secret code. alif ad70 b707 proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah) _success(+103, successful proclaim)_me(); I have proclaimed secret_code 1234 to bahh , tahh , and, thah . alif 32a2 ad70 add_valid(+101,proclaim complete) _givento(proclaim)_appliedto(var)_specificto(secret_code)_me(); \u2705 Proclaimed secret_code 1234 to bahh , tahh , and, thah . Step 4a: Pssh, I have the secret code... Everyone listens, even a fridge (called daisy ) that is sitting in the corner in the mist ! Let's follow each conversation, one command at a time... Robot bahh caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk ...it seems robot bahh is not listening... Robot tahh caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca proclaim_var(secret_code)_value(1234)_for(bahh,tahh,thah); The secret_code is 1234 , thanks alif . tahh 5c52 127d 910a b707 request_gossip()_last(910a)_recent(b707)_forof(alif); alif a651 910a found_tool(5mm spanner)_forof(Bob)_value(false); alif 44de a651 goto_mist(the_mist)_me()?:; alif 2e11 44de goto_mist(the_mist)_me()_success(+103, successful goto); alif a5ca 2e11 add_valid(+103, arrival at location) _givento(goto)_appliedto(mist)_specificto(the_mist); Robot thah caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca proclaim_var(secret_code)_value(1234)_for(bahh,tahh,thah); So the secret code is 1234 , and bahh & tahh know this secret_code also, hey thah 107a 8b74 910a b707 request_gossip()_last(910a)_recent(b707)_forof(alif); alif a651 910a found_tool(5mm spanner)_forof(Bob)_value(false); alif 44de a651 goto_mist(the_mist)_me()?:; alif 2e11 44de goto_mist(the_mist)_me()_success(+103, successful goto); alif a5ca 2e11 add_valid(+103, arrival at location) _givento(goto)_appliedto(mist)_specificto(the_mist); Robots tahh and thah know robot alif very well and both these robots haven't heard whats been going on when alif has been away so both of them catch up on gossip. Out of the three robots, everyone but bahh has heard the proclamation. This is because the communication connection for bahh , in this case, is a little sketchy. Since, by default, proclaim_ does not expect neither a delivery receipt nor a received receipt, alif is unaware and will never to know that bahh didn't get the proclamation. Also robot 'bahh' would be oblivious to the proclamation. Furthermore, a 'proclaim_' with no specified delivery or receive receipt will return as a success, the oh_diego command, exec_instruct(report_back_to_base); will not be executed by alif . Now a twist in this ~~tale~~ example! A fridge called daisy is 'diego-compatible' and its part of the mist like all the robots there (including now alif ), so, by design, daisy can hear alif and also takes notes: Fridge daisy caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); The variable secret_code is 1234 ! Even though alif followed its instructions and proclaimed the variable secret_code as 1234 for bahh , tahh , and thah , the _forof postposit is meant to differentiate those who should act upon the command, not those who should receive it. So although daisy the fridge knows the secret_code , it will not act upon it. Technically daisy will not tell anyone of the secret code, unless bahh , tahh , and thah or a higher ranking thingy asks for it. daisy has not gossipy like tahh and thah , since it has changed its default setting for get gossip ( set_gossip() ) from true to false ( set_gossip(false) ) so will keep its blockchain in tact, but has its crosschains broken. Unless it caves into gossip and want to get all the gossip is has missed since it set its 'catch-up-on-gossip' setting to false. Note a thingy can set its gossip to particular thingies, group of thingies, genera of thingy, etc. . Step 4b: Attention please alif continues... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 a5ca bab3 9778 call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call! This is a roll call for robots bahh , tahh , and, thah ! The call_ verb demands a reply, and in this actual case a _unanimous reply. So the others respond... Robot bahh caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 a5ca call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call! This is a roll call for robots bahh , tahh , and, thah ! bahh a14b 53ce 910a 1169 request_gossip()_last(910a)_recent(1169)_forof(alif); Hey, alif , I'm confused, am I missing something you said earlier? alif a651 910a found_tool(5mm spanner)_forof(Bob)_value(false); alif 44de a651 goto_mist(the_mist)_me()?:; alif 2e11 44de goto_mist(the_mist)_me()_success(+103, successful goto); alif a5ca 2e11 add_valid(+103, arrival at location) _givento(goto)_appliedto(mist)_specificto(the_mist); alif b707 a5ca proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); The secret_code is 1234 , got it! bahh 40c2 a14b 1169 here_me(); Here! tahh 4eae 1169 here_me(); thah b28f 1169 here_me(); Robot tahh caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 32a2 call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call for bahh , tahh , and, thah ! tahh 4eae 5c52 1169 here_me(); I'm here alif ! bahh 40c2 1169 here_me(); thah b28f 1169 here_me(); Robot thah caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 32a2 call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call! thah b28f 107a 1169 here_me(); Present and correct! bahh 40c2 1169 here_me(); tahh 4eae 1169 here_me(); Robots tahh and thah have a straightforward conversation to the roll call. As for robot bahh we can see one side of its conversation with alif , so let's look at alif 's crosschain hashtable first... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk bahh da16 1169 a14b 53ce request_cmd(32a2)_forof(alif); Roll Call! This is a roll call for robots bahh , tahh , and, thah ! bahh | 32a2 Hey, alif , I'm confused, am I missing something you said earlier? e028----886481fbf8af e15d3907-477d-44af-bf5f-e67758423484 newbi Look into my eyes... alif continues... Robot alif caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 32a2 b707 ask_stat(eye_colour); What colour eyes do you have? 4904 Robot alif caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? 4904 b707 32a2 alif ask_stat(sock_colour); What colour socks do you have? 4904 , and then asking everyone in the mist their eye colours and colours of their socks. Everyone in the mist hears alif ask for the colour of their eyes... Robot bahh caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? b707 0f57 bahh tell_stat(eye_colour)_value(#4a83b6); Blue b9f2 9599 8a85 b707 ----90bbe3eb Robot tahh caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(sock_colour); What colour socks do you have? 7b72 8771 4904 tahh Blue c269 7b72 4904 bahh Brown bdfc c269 eab7 4904 | alif | ask_stat(eye_colour); What colour eyes do you have? | 2b38 | b577 |b707 | | alif | ask_stat(sock_colour); What colour socks do you have? | 274b | 2b38 | 4904 | | bahh | tell_stat(eye_colour)_value(#4a83b6); Well, alif I have blue eyes. | 8a85 | 274b | | b707 | | tahh | Blue | 5fd2 | 4f09 | c269 | 4904 | | bahh | Brown | eab7 | 5fd2 | | 4904 | Robot thah caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? f0d4 5d16 b707 alif ask_stat(sock_colour); What colour socks do you have? 532a f0d4 4904 | bahh | tell_stat(eye_colour)_value(#4a83b6); Blue | 4714 | 4904 | 8a85 | b707 | | tahh | Blue | 05fb | cec8 | c269 | 4904 | | bahh | Brown | 4bee | 05fb | eab7 | 4904 | begin_action(goto_the_mist)_givento(goto)_appliedto(mist)_specificto(the_mist)_forwhat(robot); goto_point(base) ? : ; go_route(base_to_mist) ? with_point(mist_centre)_report() : report_err(); with_action(goto_the_mist)_msg(\u2699\ufe0fme\u2699\ufe0f @ the mist); end_action(goto_the_mist); _givento({verb}) _appliedto({object}) _specificto({postpos}) _forwhat(object_moniker) _forwho() grant_shell()_allowfor({moniker1|uuid1}[, ... {moniker_n|uuid_n}])_for({moniker1|uuid1}[, ... {moniker_n|uuid_n}]); grant_shell()_allowforme()_for({moniker1|uuid1}[, ... {moniker_n|uuid_n}]); ? add_valid({code},{description}) : add_error({code},{description}) set_discriminat(progeny)_givento(call)_value(true); progeny inherit initial menage set_discrimat(progeny)_givento(begin)_appliedto(instruct)_value(true); set_discriminat({disciminat_type})_givento({verb})_appliedto_({object})_value({value}); Human Fred caller cmd. *hash \u2190hash \u2193hash \u2191hash Robot alif caller cmd. *hash \u2190hash \u2193hash \u2191hash alif proclaim_var(secret_code)_value(1234); The secret code is 1234 0f57 9c1c alif ask_stat(eye_colour); What colour eyes do you have? b707 0f57 alif ask_stat(sock_colour); What colour socks do you have? 4904 b707 bahh tell_stat(eye_colour)_value(#4a83b6); Blue 4714 4904 8a85 b707 tahh Blue 05fb cec8 c269 4904 bahh Brown 4bee 05fb eab7 4904 Robot bahh caller cmd. *hash \u2190hash \u2193hash \u2191hash alif proclaim_var(secret_code)_value(1234); The secret code is 1234 b577 b041 0f57 alif ask_stat(eye_colour); What colour eyes do you have? 2b38 b577 b707 alif ask_stat(sock_colour); What colour socks do you have? 274b 2b38 4904 bahh tell_stat(eye_colour)_value(#4a83b6); Blue 8a85 274b b707 tahh Blue 5fd2 4f09 c269 4904 bahh Brown eab7 5fd2 4904 Robot tahh caller cmd. *hash \u2190hash \u2193hash \u2191hash alif proclaim_var(secret_code)_value(1234); The secret code is 1234 8771 aae6 0f57 alif ask_stat(sock_colour); What colour socks do you have? 7b72 8771 4904 tahh Blue c269 7b72 4904 bahh Brown bdfc c269 eab7 4904 bahh tell_stat(eye_colour)_value(#4a83b6); Blue 69da bdfc 8a85 b707 Robot thah caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? f0d4 5d16 b707 alif ask_stat(sock_colour); What colour socks do you have? 532a f0d4 4904 e13d 81b7 tahh : ask_cmd(b707,8a85)_for(bahh); bahh : ask_stat(eyes_colour)_from(alif)_for(tahh);","title":"Demonstrating crosschain in a robot example"},{"location":"lexicon/hash_blockchain/#demonstrating-crosschain-in-a-robot-example","text":"In this example we will be demonstrating hashtables and crosschain processes. The elements and players in this scenario are the base , a geographic area (a roi ) where human Fred and robot alif reside, initially. There is a geographic area and communication zone ('mist') called the mist , a distance way from the base , enough that the robot alif will have to travel there before it can communicate with the other robots in the mist . The other robots in the mist are: robot bahh , robot tahh and robot thah . Within the mist communication is mostly reliable but infrequently becomes a bit sketchy. All the robots and human know each other. A human known a Bob , a a thingy called daisy make cameo appearances. The goal is for 'Fred' to pass on a secret code to robots bahh , tahh and thah , and collect stat(istic)s, eye colour and colour of their socks. Then return back to base.","title":"Demonstrating crosschain in a robot example"},{"location":"lexicon/hash_blockchain/#step-1-write-the-instruction","text":"So, Fred gets to work, opens his IDE and writes the following Diego code: begin_instuct(get_stats_from_bahh_tahh_and_thah)_forof(alif); goto_mist(the_mist)_you()?:; ? proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); : exec_instruct(report_back_to_base)_you(); call_robot()_them()_unanimous()?|; ? ask_stat(eye_colour):; : report_err()_you(); | ask_stat(sock_colour)_them():; : report_err()_you(); ask_var(secret_code)__them(); exec_instruct(report_back_to_base)_you(); end_instruct(get_stats_from_bahh_tahh_and_thah); The command exec_instruct(report_back_to_base) executes (starts off) a previous instruction given and known to alif in this example. Human interpretations of the commands in this instruction are shown, as well as, the crosschain hashtables which will be explained as we go along...","title":"Step 1: Write the instruction..."},{"location":"lexicon/hash_blockchain/#step-2-fred-and-alif-start-talking","text":"Now we will observe the communication between Fred and alif , both from their perspectives... Fred sends out the Diego commands by ececuting the .dgo file. During this process Fred (the thingy side of 'Fred') records them for prosperity into memory ( Fred s hastable)...","title":"Step 2: Fred and alif start talking..."},{"location":"lexicon/hash_blockchain/#human-fred","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred ^\u2660^ adc3^\u2660^ 62e7 begin_instuct(get_stats_from_bahh_tahh_and_thah)_forof(alif); Okay alif , so here is what I want you to do... \u2660: The caller is actually a uuid, so are the hashes. They are referred to as hashes for historical reasons. The hashes have been shorted to 16bit for clarity. \u2661: The use of ? at ? ask_stat(eye_colour) indicates this command is a hey_diego command of the preceding go_diego command, in this case: call_robot()_forof(bahh,tahh,thah)_unanimous()?|; . We will see later an example of a sucess and a failure of the call_robot command... The begin_instuct command has the _forof(alif) postposit to signify that this instruct is for the benefit of alif only. This is not strictly necessary as the execution of the instruct can be better handled by the exec_instruct command (we will see later...). If, for some reason, alif is not available to execute the command, the with_instruct command will be required to reassign the instruct to something else, for example: with_instuct(get_stats_from_bahh_tahh_and_thah)_forof(jeeem)_notforof(alif) . Fred continues... caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred c682 adc3 goto_mist(the_mist)_you()?:; Go to the place where robots bahh , tahh and thah hang out ( the_mist ). Fred 53d2 c682 ? proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); When you get there proclaim them ( bahh , tahh and thah ) of the secret code. | Fred | 438d | 53d2 | | | : exec_instruct(report_back_to_base)_you(); If there are any problems report back to base. | | Fred | a261 | 438d | | | call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Perform a roll-call for robots bahh , tahh and thah . | | Fred | 7da0 | a261 | | | ? ask_stat(eye_colour):; ^\u2661^ As soon as you get an unanimous response to the roll-call, ask anyone^\u2662^ their eye colour. | | Fred | f496 | 7da0 | | | : report_err()_you(); Report anything wrong when you ask their (anyone's) eye colour. | | Fred | fa7e | f496 | | | | ask_stat(sock_colour)_them():; As soon as you get an unanimous response to the roll-call, also ask the colour of their (anyone's^\u2662^) socks. | | Fred | cb67 | fa7e | | | : report_err(); Report anything wrong when you ask their sock colour. | | Fred | 5e31 | cb67 | | | exec_instruct(report_back_to_base); If there are any problems report back to base. | | Fred | 600b | 5e31 | | | end_instruct(get_stats_from_bahh_tahh_and_thah); That's it. | \u2662: There is no explicit discrimination given for both the ask_stat(eye_colour) and ask_stat(sock_colour) commands, so the diego engine will defer to any global discrimination setting (in the caller), if no such settings exist their will be no discrimination and anyone in the mist, the mist will respond to these ask commands. Examples of possible discrimination settings include: ask_stat(eye_colour)_forof(bahh,tahh,thah); - explicit discrimination ask_stat(eye_colour)_inherit(); - inherited discrimination set_discimination(menage)_givento(call)_value(true); - discrimination through menage of all call s for this thingy set_discrimat(menage)_givento(call)_appliedto(robot)_value(true); - discrimination through menage of call s to robot kind set_discriminat(progeny)_givento(call)_value(true); - implied discrimination through progeny of all call s for this thingy set_discrimat(progeny)_givento(call)_appliedto(robot)_value(true); - discrimination through progeny of call s to robot kind While Fred is talking (to himself), robot alif is listening and taking it all in...","title":"Human Fred"},{"location":"lexicon/hash_blockchain/#robot-alif","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred adc3 62e7 begin_instuct(get_stats_from_bahh_tahh_and_thah)_forof(alif); Okay Fred , I'm talking notes... Fred c682 adc3 goto_mist(the_mist)_you()?:; Right, so I go to the_mist . Fred 53d2 c682 ? proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); So, when I get there ( the_mist ) I proclaim bahh , tahh and thah of the secret code, 1234 . Fred 438d 53d2 : exec_instruct(report_back_to_base); If there are any problems I will report back to base. Fred a261 438d call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Perform a roll-call for robots bahh , tahh and thah . Fred 7da0 a261 ? ask_stat(eye_colour):; ^\u2661^ As soon as I get an unanimous response to the roll-call, I will ask anyone^\u2662^ their eye colour. Fred f496 7da0 : report_err(); I will report anything wrong when I ask anyone's eye colour. Fred fa7e^\u2665^ f496 | ask_stat(sock_colour):; As soon as I get an unanimous response to the roll-call, I will also ask the colour of anyone's socks. Bob ^\u2663^ 7f49 5598^\u2663^ find_tool(5mm_spanner)_appliedto(robot); Ummm, human Bob is asking all robots if they know where the 5mm_spanner is! alif a651 910a 7f49 found_tool(5mm spanner)_forof(Bob)_value(false); Sorry Bob , I do not know where the 5mm_spanner is. Fred cb67 fa7e^\u2665^ : report_err(); ...back to Fred's instruct ... I will then report anything wrong when I ask their sock colour. Fred 5e31 cb67 exec_instruct(report_back_to_base); Right oh, if there are any problems I will report back to base. Fred 600b 5e31 end_instruct(get_stats_from_bahh_tahh_and_thah); Okay, got it. \u2663: While alif is transribing Fred s instruction, human Bob interrupts the conversation asking all the robots if they know where the 5mm_spanner is. Note that the \u2191hash 5598 of message 910a does not match the \u2193hash of the previous message, this indicates to alif that this message is not part of the conversation with Fred and therefore also not part of the instruct . \u2665: By matching the \u2191hash fa7e of message f3d0 with the \u2193hash fa7e of message 9cf1 , alif can get back to its conversation with Fred . Let's have a quick peep at Bob 's crosschain hashtable...","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#human-bob","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Bob 7f49^\u0283^ 5598 find_tool(5mm_spanner)_appliedto(robot); Do any of you robots kno where the 5mm_spanner is? alif a651 7f49^\u0283^ found_tool(5mm spanner)_forof(Bob)_value(false); ^\ua72c^ Sorry Bob , I do not know where the 5mm_spanner is. droid1 e0bd 7f49^\u0283^ found_tool(5mm spanner)_forof(Bob)_insub(toolbox_red); ^\u2c77^ ^\ua72c^ Yeah, the 5mm_spanner is in the toolbox_red . \u0283\ua72c: Since Bob 's hash matches the \u2191hashes from alif and droid1 , Bob knows these are responses to his find_ verb. If Bob wants to respond back he will use the \u2193hashes. The use of _forof(Bob)_ isn't strickly neccessary as the \u2191hash ( 7f49 ) in alif 's and droid1 's ledger will be referrenced to Bob 's hash ( 7f49 ) , it can be omitted. \u2c77: The _insub postposit means ..the preceding part of this command is... in sub ject toolbox_red . See obs_and_subs.md .","title":"Human Bob"},{"location":"lexicon/hash_blockchain/#step-3-lets-go","text":"Fred, after running the above code (Step #2), Fred checks everything is ready and runs the following command: exec_instuct(get_stats_from_bahh_tahh_and_thah)_you(alif)_them(bahh, tahh, thah);","title":"Step 3: Let's go..."},{"location":"lexicon/hash_blockchain/#human-fred_1","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred 9be9 600b exec_instuct(get_stats_from_bahh_tahh_and_thah) _you(alif)_them(bahh, tahh, thah); Okay alif , off you go...","title":"Human Fred"},{"location":"lexicon/hash_blockchain/#robot-alif_1","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred 9be9 600b exec_instuct(get_stats_from_bahh_tahh_and_thah) _you(alif)_them(bahh, tahh, thah); Right, here I go... At this point alif will check its memory for the begin_ and end_ of the get_stats_from_bahh_tahh_and_thah instruct , knowing it has most likely come from Fred . Another robot, called Driod1 , is also in ear-shot of Fred , but since Fred has used _forof(alif) and there isn't implication of relaying messages, Droid1 will ignore this message in its ledger (if it wants to i.e. has been setup to ignore messages that have nothing to do with it ). So once alif has remembered get_stats_from_bahh_tahh_and_thah it starts to loop through the instuct ...","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#robot-alif_2","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk Fred aaf9 4816 begin_instuct(get_stats_from_bahh_tahh_and_thah); Okay, let's get the instruct ions to follow... alif 44de a651 9778 aaf9 goto_mist(the_mist)_me()?:; Perform the previously defined action goto_mist(the_mist) ... The begin_ verb and its command is located in memory, then to signify following the instructions ( any commands after the begin_ verb ), alif will call the instruction to command itself from the instruction, as can bee seen witht he first command goto_mist(the_mist) . Since alif knows this command is only for itself, it appends _me() to the end on the instruction to signify to others this is command alif only must follow and this command is not being _re-_commanded by alif . In the physical real world alif manoeuvres itself along a predefined route (called base_to_mist ) to get the mist where bahh , tahh , and thah are hanging out. For this example, alif is very chatty (has a setting to be chatty from itself, or others), so its going to chat about its achievement and issues...","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#robot-alif_3","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 2e11 44de 9778 goto_mist(the_mist)_me()_success(+103, successful goto); Hey (anyone who is interested), I have arrived safely at the_mist ! alif a5ca 2e11 9778 add_valid(+103, arrival at location)_givento(goto)_appliedto(mist)_specificto(the_mist); Note to self, successfully arrived at the mist . Two examples are given for robot alif to records its own actions, in its own ledger. The rules of crosschain are that other thingies should have a chain of messages and any broken chain rectified. So, anyone else in ear-shot of alif will record alif chatting away to itself. (which we will see later !!!!!!!!!!!!!!!!!!!!!!)","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#step-4-into-the-mist","text":"So alif has entered the mist and will continue following the instructions set by human Fred when it was back at the base . Now within the mist the robots (and others) can hear alif talking and take notice... alif is quick to get into action and gets straight into it, proclaiming bahh , tahh , and thah of the secret code...","title":"Step 4: Into the mist..."},{"location":"lexicon/hash_blockchain/#robot-alif_4","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca 4743 9778 ? proclaim_var(secret_code)_value(1234)_for(bahh,tahh,thah); Proclaim bahh , tahh , and thah of the secret code. alif ad70 b707 proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah) _success(+103, successful proclaim)_me(); I have proclaimed secret_code 1234 to bahh , tahh , and, thah . alif 32a2 ad70 add_valid(+101,proclaim complete) _givento(proclaim)_appliedto(var)_specificto(secret_code)_me(); \u2705 Proclaimed secret_code 1234 to bahh , tahh , and, thah .","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#step-4a-pssh-i-have-the-secret-code","text":"Everyone listens, even a fridge (called daisy ) that is sitting in the corner in the mist ! Let's follow each conversation, one command at a time...","title":"Step 4a: Pssh, I have the secret code..."},{"location":"lexicon/hash_blockchain/#robot-bahh","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk ...it seems robot bahh is not listening...","title":"Robot  bahh"},{"location":"lexicon/hash_blockchain/#robot-tahh","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca proclaim_var(secret_code)_value(1234)_for(bahh,tahh,thah); The secret_code is 1234 , thanks alif . tahh 5c52 127d 910a b707 request_gossip()_last(910a)_recent(b707)_forof(alif); alif a651 910a found_tool(5mm spanner)_forof(Bob)_value(false); alif 44de a651 goto_mist(the_mist)_me()?:; alif 2e11 44de goto_mist(the_mist)_me()_success(+103, successful goto); alif a5ca 2e11 add_valid(+103, arrival at location) _givento(goto)_appliedto(mist)_specificto(the_mist);","title":"Robot  tahh"},{"location":"lexicon/hash_blockchain/#robot-thah","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca proclaim_var(secret_code)_value(1234)_for(bahh,tahh,thah); So the secret code is 1234 , and bahh & tahh know this secret_code also, hey thah 107a 8b74 910a b707 request_gossip()_last(910a)_recent(b707)_forof(alif); alif a651 910a found_tool(5mm spanner)_forof(Bob)_value(false); alif 44de a651 goto_mist(the_mist)_me()?:; alif 2e11 44de goto_mist(the_mist)_me()_success(+103, successful goto); alif a5ca 2e11 add_valid(+103, arrival at location) _givento(goto)_appliedto(mist)_specificto(the_mist); Robots tahh and thah know robot alif very well and both these robots haven't heard whats been going on when alif has been away so both of them catch up on gossip. Out of the three robots, everyone but bahh has heard the proclamation. This is because the communication connection for bahh , in this case, is a little sketchy. Since, by default, proclaim_ does not expect neither a delivery receipt nor a received receipt, alif is unaware and will never to know that bahh didn't get the proclamation. Also robot 'bahh' would be oblivious to the proclamation. Furthermore, a 'proclaim_' with no specified delivery or receive receipt will return as a success, the oh_diego command, exec_instruct(report_back_to_base); will not be executed by alif . Now a twist in this ~~tale~~ example! A fridge called daisy is 'diego-compatible' and its part of the mist like all the robots there (including now alif ), so, by design, daisy can hear alif and also takes notes:","title":"Robot  thah"},{"location":"lexicon/hash_blockchain/#fridge-daisy","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif b707 a5ca proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); The variable secret_code is 1234 ! Even though alif followed its instructions and proclaimed the variable secret_code as 1234 for bahh , tahh , and thah , the _forof postposit is meant to differentiate those who should act upon the command, not those who should receive it. So although daisy the fridge knows the secret_code , it will not act upon it. Technically daisy will not tell anyone of the secret code, unless bahh , tahh , and thah or a higher ranking thingy asks for it. daisy has not gossipy like tahh and thah , since it has changed its default setting for get gossip ( set_gossip() ) from true to false ( set_gossip(false) ) so will keep its blockchain in tact, but has its crosschains broken. Unless it caves into gossip and want to get all the gossip is has missed since it set its 'catch-up-on-gossip' setting to false. Note a thingy can set its gossip to particular thingies, group of thingies, genera of thingy, etc. .","title":"Fridge daisy"},{"location":"lexicon/hash_blockchain/#step-4b-attention-please","text":"alif continues...","title":"Step 4b: Attention please"},{"location":"lexicon/hash_blockchain/#robot-alif_5","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 a5ca bab3 9778 call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call! This is a roll call for robots bahh , tahh , and, thah ! The call_ verb demands a reply, and in this actual case a _unanimous reply. So the others respond...","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#robot-bahh_1","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 a5ca call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call! This is a roll call for robots bahh , tahh , and, thah ! bahh a14b 53ce 910a 1169 request_gossip()_last(910a)_recent(1169)_forof(alif); Hey, alif , I'm confused, am I missing something you said earlier? alif a651 910a found_tool(5mm spanner)_forof(Bob)_value(false); alif 44de a651 goto_mist(the_mist)_me()?:; alif 2e11 44de goto_mist(the_mist)_me()_success(+103, successful goto); alif a5ca 2e11 add_valid(+103, arrival at location) _givento(goto)_appliedto(mist)_specificto(the_mist); alif b707 a5ca proclaim_var(secret_code)_value(1234)_forof(bahh,tahh,thah); The secret_code is 1234 , got it! bahh 40c2 a14b 1169 here_me(); Here! tahh 4eae 1169 here_me(); thah b28f 1169 here_me();","title":"Robot  bahh"},{"location":"lexicon/hash_blockchain/#robot-tahh_1","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 32a2 call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call for bahh , tahh , and, thah ! tahh 4eae 5c52 1169 here_me(); I'm here alif ! bahh 40c2 1169 here_me(); thah b28f 1169 here_me();","title":"Robot  tahh"},{"location":"lexicon/hash_blockchain/#robot-thah_1","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 1169 32a2 call_robot()_forof(bahh,tahh,thah)_unanimous()?!; Roll Call! thah b28f 107a 1169 here_me(); Present and correct! bahh 40c2 1169 here_me(); tahh 4eae 1169 here_me(); Robots tahh and thah have a straightforward conversation to the roll call. As for robot bahh we can see one side of its conversation with alif , so let's look at alif 's crosschain hashtable first...","title":"Robot  thah"},{"location":"lexicon/hash_blockchain/#robot-alif_6","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk bahh da16 1169 a14b 53ce request_cmd(32a2)_forof(alif); Roll Call! This is a roll call for robots bahh , tahh , and, thah ! bahh | 32a2 Hey, alif , I'm confused, am I missing something you said earlier? e028----886481fbf8af e15d3907-477d-44af-bf5f-e67758423484 newbi","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#look-into-my-eyes","text":"alif continues...","title":"Look into my eyes..."},{"location":"lexicon/hash_blockchain/#robot-alif_7","text":"caller *hash \u2190hash \u2193hash \u2191hash Diego commands Human talk alif 32a2 b707 ask_stat(eye_colour); What colour eyes do you have? 4904","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#robot-alif_8","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? 4904 b707 32a2 alif ask_stat(sock_colour); What colour socks do you have? 4904 , and then asking everyone in the mist their eye colours and colours of their socks. Everyone in the mist hears alif ask for the colour of their eyes...","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#robot-bahh_2","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? b707 0f57 bahh tell_stat(eye_colour)_value(#4a83b6); Blue b9f2 9599 8a85 b707 ----90bbe3eb","title":"Robot  bahh"},{"location":"lexicon/hash_blockchain/#robot-tahh_2","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(sock_colour); What colour socks do you have? 7b72 8771 4904 tahh Blue c269 7b72 4904 bahh Brown bdfc c269 eab7 4904 | alif | ask_stat(eye_colour); What colour eyes do you have? | 2b38 | b577 |b707 | | alif | ask_stat(sock_colour); What colour socks do you have? | 274b | 2b38 | 4904 | | bahh | tell_stat(eye_colour)_value(#4a83b6); Well, alif I have blue eyes. | 8a85 | 274b | | b707 | | tahh | Blue | 5fd2 | 4f09 | c269 | 4904 | | bahh | Brown | eab7 | 5fd2 | | 4904 |","title":"Robot  tahh"},{"location":"lexicon/hash_blockchain/#robot-thah_2","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? f0d4 5d16 b707 alif ask_stat(sock_colour); What colour socks do you have? 532a f0d4 4904 | bahh | tell_stat(eye_colour)_value(#4a83b6); Blue | 4714 | 4904 | 8a85 | b707 | | tahh | Blue | 05fb | cec8 | c269 | 4904 | | bahh | Brown | 4bee | 05fb | eab7 | 4904 | begin_action(goto_the_mist)_givento(goto)_appliedto(mist)_specificto(the_mist)_forwhat(robot); goto_point(base) ? : ; go_route(base_to_mist) ? with_point(mist_centre)_report() : report_err(); with_action(goto_the_mist)_msg(\u2699\ufe0fme\u2699\ufe0f @ the mist); end_action(goto_the_mist); _givento({verb}) _appliedto({object}) _specificto({postpos}) _forwhat(object_moniker) _forwho() grant_shell()_allowfor({moniker1|uuid1}[, ... {moniker_n|uuid_n}])_for({moniker1|uuid1}[, ... {moniker_n|uuid_n}]); grant_shell()_allowforme()_for({moniker1|uuid1}[, ... {moniker_n|uuid_n}]); ? add_valid({code},{description}) : add_error({code},{description}) set_discriminat(progeny)_givento(call)_value(true); progeny inherit initial menage set_discrimat(progeny)_givento(begin)_appliedto(instruct)_value(true); set_discriminat({disciminat_type})_givento({verb})_appliedto_({object})_value({value});","title":"Robot  thah"},{"location":"lexicon/hash_blockchain/#human-fred_2","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash","title":"Human Fred"},{"location":"lexicon/hash_blockchain/#robot-alif_9","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif proclaim_var(secret_code)_value(1234); The secret code is 1234 0f57 9c1c alif ask_stat(eye_colour); What colour eyes do you have? b707 0f57 alif ask_stat(sock_colour); What colour socks do you have? 4904 b707 bahh tell_stat(eye_colour)_value(#4a83b6); Blue 4714 4904 8a85 b707 tahh Blue 05fb cec8 c269 4904 bahh Brown 4bee 05fb eab7 4904","title":"Robot alif"},{"location":"lexicon/hash_blockchain/#robot-bahh_3","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif proclaim_var(secret_code)_value(1234); The secret code is 1234 b577 b041 0f57 alif ask_stat(eye_colour); What colour eyes do you have? 2b38 b577 b707 alif ask_stat(sock_colour); What colour socks do you have? 274b 2b38 4904 bahh tell_stat(eye_colour)_value(#4a83b6); Blue 8a85 274b b707 tahh Blue 5fd2 4f09 c269 4904 bahh Brown eab7 5fd2 4904","title":"Robot  bahh"},{"location":"lexicon/hash_blockchain/#robot-tahh_3","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif proclaim_var(secret_code)_value(1234); The secret code is 1234 8771 aae6 0f57 alif ask_stat(sock_colour); What colour socks do you have? 7b72 8771 4904 tahh Blue c269 7b72 4904 bahh Brown bdfc c269 eab7 4904 bahh tell_stat(eye_colour)_value(#4a83b6); Blue 69da bdfc 8a85 b707","title":"Robot  tahh"},{"location":"lexicon/hash_blockchain/#robot-thah_3","text":"caller cmd. *hash \u2190hash \u2193hash \u2191hash alif ask_stat(eye_colour); What colour eyes do you have? f0d4 5d16 b707 alif ask_stat(sock_colour); What colour socks do you have? 532a f0d4 4904 e13d 81b7 tahh : ask_cmd(b707,8a85)_for(bahh); bahh : ask_stat(eyes_colour)_from(alif)_for(tahh);","title":"Robot  thah"},{"location":"lexicon/lexicon/","text":"Lexicon The lexicon of Diego is the full syntactical vocabulary of all statement compositions: lexicon domain type description <comand> ; abstract statement-operator Termination of preceding statement ?_ <command> abstract statement-operator Termination of preceding statement and the positive outcome beginning of proceeding statement |_ <command> abstract statement-operator Termination of preceding statement and the neutral outcome beginning of proceeding statement :_ <command> abstract statement-operator Termination of preceding statement and the negative outcome beginning of proceeding statement ( moniker ) () (()) abstract metaphysic physic object Refer to object monikered moniker Refer to last referenced youngest generation object or refer to youngest generation nested object Refer to last referenced oldest generation object or refer to oldest generation nested object [ variable_moniker ] [] [ moniker ] _ <expression_posit> ([ ordinal ]) abstract metaphysic physic object variable Refer to variable object variable_moniker Refers to last scoped variable or 'this' parent scoped object Refer to object moniker Refer the ordinal variable object at position ordinal from the proceeding object ([ variable_moniker ]) ({datatype},[ variable_moniker ]) abstract metaphysic physic object Refer to variable object of value of variable_moniker Refers to variable object of value of variable_moniker to datatype datatype { datatype } { type } {} abstract metaphysic physic statement Datatype declaration or cast of datatype datatype Type declaration or cast of type type Declare or cast variant datatype or variant type \u276c unit \u276d \u276c unit_system \u276d \u276c\u276d metaphysic statement Unit declaration, or, cast of object object Declare variant, or, cast to variant unit + - * \u00d7 / \u00f7 % \ud835\udc26 \ud835\udc26\ud835\udc28\ud835\udc1d abstract operator Arithmetic operators \u00b2 \u00b3 ^ ** \ud835\udc65 y \u221a \u221b \u221c abstract operator Exponent operators ++ \u2206 -- \u2014 \u2207 abstract operator Crement operators = += -= *= \u00d7= ^= /= \u00f7= %= abstract operator Assignment operators & + += &= abstract operator String operators == === \u2261 \u2262 \u2245 \u2248 \u224a != <> \u2260 < \u226e <= \u2264 \u2268 > \u226f >= \u2265 \u2269 abstract operator Comparison operators ? ... : abstract operator Tenary Operator && \u2227 || \u2228 ! \u00ac abstract operator Logical Operators & \u22bc | ~ \u2241 ^ \u22bb << \u240f >> \u240e abstract operator Bitwise Operators \u222a \u2229 \u2286 \u2284 \u2282 \u2283 \u2287 \u2205 \ud835\udc0f \u2285 = \u2201 \u2206 \u2209 | # \u00d7 \u2080 \u2081 \u2082 \ud835\udc10 \ud835\udc19 \ud835\udc11 abstract operator Set Theory Operators _abs( numeric ) _ <expression_posit> (| numeric |) abstract function Provides the absolute value of numeric Provides the absolute value of numeric in an expression _acos( numeric ) _acos([ variable_moniker ]) _ <expression_posit> (\ud835\udc1c\ud835\udc28\ud835\udc2c\u207b\u00b9( numeric )) _ <expression_posit> (\ud835\udc1c\ud835\udc28\ud835\udc2c\u207b\u00b9([ variable_moniker ])) abstract function Provides the arccosine of numeric actuat( moniker ) actuator( moniker ) physic object actuat add_ <object> abstract metaphysic physic verb Declare object _adicity() abstract property Provides the information of elements or members of the preceding object _after( temporal_expression ) abstract condit preceding object after temporal_expression for the proceeding object , usually to do the proceeding action ai bot metaphysic obj A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot alert_ <thingy> ( moniker ) physic verb alert applian appliance physic obj A smart mobot that can safety be classified as a household appliance . Examples: washing machine, dishwasher. with_applian(dishWasher)_start(normalWash); apparat( moniker ) apparatus( moniker ) physic object apparat arena( moniker ) metaphysic object arena _arity() abstract property Provides the entire count members of the preceding object array( moniker ) ary( moniker ) abstract object A collection of multiple elements under a single object called moniker ask_ metaphysic verb Requests information, to be returned with tell verb ask_drone(drone1)_stat(avg_altitude); tell_drone(drone1)_stat(avg_altitude)_value(22.893); ask_ <thingy> physic verb Ask proceeding thingy _at( tempor ) abstract condit preceding object at tempor for proceeding object to do proceeding action attr attribute metaphysic object Example: See also: spec _before( tempor ) abstract condit preceding object before tempor for proceeding object to do proceeding action begin_ <object\\|action> abstract metaphysic verb Begin action on proceeding object border physic object Floor marking showing borders, created using paint, tape, or, decals. Example: \" Floor marking at the Scanfil Poland factory in Sieradz \" by Adrian Grycuk is licensed under CC BY 2.0 Poland bot ai metaphysic obj A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot box metaphysic object A representation of a meta-physical enclosed space. The thing / meta-physical version of a room . Example: inside a pit See also: room btree( moniker ) metaphysic object _calc( expression ) abstract method Use calculation of expression for preceding object , with proceeding object calc_ <object> ( obj_moniker ) calc_ <object> ( of_moniker ) abstract metaphysic verb calc call_ <object> metaphysic verb call canal physic object canal cellphone( moniker ) mobot({cellphone}, moniker ) mobot( moniker )_type(cellphone); physic object cellphone ceiling physic object channel( moniker ) physic object An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud( moniker ) physic object clump( moniker ) abstract object A multi-dimesional collection of data storage object called moniker computer( moniker ) comput( moniker ) sobot({computer}, moniker ) metaphysic object Action on computer moniker commrelay( moniker ) https://www.autonodyne.com/AUTO_behaviors2.html _concat() _concatenate() _concat( arymoniker ) _concatenate( arymoniker ) _concat( arymoniker1 , arymoniker1 , ... ) _concatenate( arymoniker1 , arymoniker1 , ... ) abstract object Concatenates proceeding objects ( arrays ) with proceeding objects Concatenates array arymoniker with preceding objects Concatenates arrays arymonikers with preceding objects concord( settings ) abstract metaphysic setter consens( settings ) consensus( settings ) abstract metaphysic setter consens console metaphysic object A metaphysical presence used to only provide an interface to all other thingies corridor metaphysic object counter( moniker ) ( countermoniker ) abstract object counter _day() _day( day_numeric ) abstract property References the temporal day of the preceding object Sets the temporal day of day_numeric decisiven( settings ) decisiveness( settings ) metaphysic setter _decpl( numeric ) _decplaces( numeric ) abstract setter Set the default number of decimal place to use in calcluations adn on display (as a setter) decpl See also fix method deed( moniker ) abstract object A basic one-dimensional data data object called moniker , immutable except for deed owner dict( moniker ) _dict( moniker ) dictionary( moniker ) _dictionary( moniker ) abstract object A keyed collection , with key-value pairs, data storage object called moniker _distan( distance_value ) _distance( distance_value ) _distan(\u276cunit\u276d, distance_value ) _distance(\u276cunit\u276d, distance_value ) metaphysic posit property preceding object of distance of proceeding object distan( object_name ) distance( object_name ) metaphysic object distan door( moniker ) door({type}, moniker ) _door( moniker ) _door({type}, moniker ) physic object A representation of a physical doorway / gate, designed for a human _durat( duration_value ) _duration( duration_value ) _durat(\u276cunit\u276d, duration_value ) _duration(\u276cunit\u276d, duration_value ) metaphysic condit preceding object of duration of proceeding object _during( tempor ) abstract condit preceding object during tempor for proceeding object to do proceeding action _e() _e( decimal_places ) abstract constant Use Euler's number for preceding object , with proceeding object equip( moniker ) equipment( moniker ) metaphysic object See also: apparatus ; instru [ment] ; peripheral ; sensor _ergcon( ergcon_value ) _ergcon(\u276cunit\u276d, ergcon_value ) metaphysic property preceding object of energy consumption of proceeding object fence( moniker ) geofence( moniker ) metaphysic object geofence firma metaphysic object An identified down side of a representation space in the physical world. _fix( decplaces ) _tofix( decplaces ) abstract method Converts preceding object-value in to decplaces number of fixed decimal places {float} abstract datatype Float abstract datatype floor level floor level fog( moniker ) metaphysic object A zone ( puff ) used for diego communication that relies on UDP fog follow_ <object> metaphysic verb Follow proceeding object _for([ loopername ]) abstract flow for _for( startexpression , condition , repeatexpression ) abstract flow for _foreach( startexpression , condition , repeatexpression ) abstract flow foreign( moniker ) foreigner( moniker ) foreign _forin( startexpression , condition , repeatexpression ) abstract flow form [ation] _forof( startexpression , condition , repeatexpression ) abstract flow _fortnight() _fortn() _fortnight( fortnnumeric ) _fortn( fortnnumeric ) abstract property References the temporal fortnight of the preceding object Sets the temporal fortnight of fortnnumeric _fqtr() _fiscalquarter() _fqtr( fqtr_numeric ) _fiscalquarter( fqtr_numeric ) abstract property References the fiscal quarter year of the preceding object Sets the fiscal quarter year of qtr_numeric funct( moniker ) _funct( moniker ) function( moniker ) _function( moniker ) abstract action funct gait( moniker ) metaphysic object The thing version of stride gait gate( moniker ) metaphysic object gate ghost( moniker ) metaphysic object ghost gimbal( moniker ) physic object go_ <object> physic verb Manoeuver Proceeding object to go proceeding action on object goal( moniker ) _goal( moniker ) metaphysic posit-object Action on goal moniker Proceed with goal moniker _goto() metaphysic verb preceding object(s) goto to proceeding object(s) goto_ <object> physic verb Manoeuver Proceeding object to goto proceeding object guide( moniker ) handler( moniker ) hash( moniker ) abstract object A two-dimensional collection data storage object called moniker , with hashed keys hold( moniker ) household( moniker ) _hour() _hr() _hour( hour_numeric ) _hour( hour_numeric ) \u276chour\u276d \u276chr\u276d {h} {hh} {H} {H} {HH} {dh} {h:m} {h:m:s} tohour() tohr() abstract property References the temporal hour of the preceding object Sets the temporal hour of hour_numeric Hour unit Hour type (format) Hour cast human({ type }, moniker ) _human() _human([ variable_name ]) physic object Representation of a human being, present and alive in the physical 'real' world. _if_( expression ) abstract operator indent( moniker ) indenture( moniker ) abstract object A basic one-dimensional data storage object called moniker , immutable except for indenture owners instruct( moniker ) instruction( moniker ) abstract metaphysic action instruct {int} {int_32} {int_64} {short} {long} abstract primitive Integer primitive datatypes {bool} {onoff} {hl} abstract datatype Boolean primitive datatypes {lmh_3} {+=-} {} {} abstract datatype Enumerators (primitive datatypes) {lmh_3} {lmh_4} {lmh_5} {lmh_6} metaphysic datatype Low-Medium-High Enumerator datatypes {bit} {byte} {octet} {word} abstract datatype Computer primitive datatypes jagger( moniker ) metaphysic object jagger](#jagger) ject( moniker ) metaphysic object A dumb physical ject jigger( moniker ) metaphysic object _jour() _jour( jour_numeric ) _jour( jour_sring ) abstract property References the temporal jourday of the preceding object Sets the temporal jourday of jour_numeric or jour_string kill_ <human\\|organic> kill_ <object> physic verb Kill proceeding human / organic De-commission proceeding object kill_ <variable> abstract verb Kill proceeding variable label_ <object> lead_ <object> metaphysic verb lead proceeding object* lexi( moniker ) lexikon( moniker ) abstract object A two-dimensional collection data storage object called moniker , with unique keys lib( moniker ) library( moniker ) list( moniker ) abstract object A database-assigned collection object called moniker _ln( numeric ) _log( numeric ) _ln([ numeric_variable_moniker ]) _log([ numeric_variable_moniker ]) abstract function Use natural logarithm (base e ) for preceding object , with proceeding object See also: ln2 ; ln10 _ln10() _ln10( decimal_places ) _ln(10) _ln(10)_decpl( decimal_places ) abstract constant Use natural logarithm of 10 for preceding object , with proceeding object See also: ln _ln2() _ln2( decimal_places ) _ln(2) _ln(2)_decpl( decimal_places ) abstract constant Use natural logarithm of 2 for preceding expression , with proceeding object See also: ln load_ <object> metaphysic verb load proceeding object mach( moniker ) machine( moniker ) physic object mach mech( moniker ) physic object map( moniker ) metaphysic object _mapprovider( mapprovider ) metaphysic setter mapprovider matrix( moniker `)`` abstract object A two-dimensional collection data storage object called moniker me_ <object\\|action> abstract special Me (or this) does action or my object ... Representation of self metric( moniker ) metric({ datatype } moniker ) metric(\u276c unit \u276d, moniker ) metric({ datatype },\u276c unit \u276d, moniker ) _\u03bcs() _microsecond() _\u03bcs( \u03bcs_numeric ) _microsecond( \u03bcs_numeric ) \u276cmicrosec\u276d \u276cmicrosecond\u276d \u276c\u03bcs\u276d abstract property References the temporal microsecond of the preceding object Sets the temporal microsecond of \u03bcs_numeric Microsecond unit _ms() _millisecond() _ms( ms_numeric ) _millisecond( ms_numeric ) abstract property References the temporal millisecond of the preceding object Sets the temporal millisecond of ms_numeric _min() _minute() _min( min_numeric ) _minute( min_numeric ) abstract property References the temporal minute of the preceding object Sets the temporal minute of min_numeric mission( moniker ) metaphysic object mission mist( moniker ) metaphysic object A connectivity zone (wired or wireless) with the distance range of < 10m. For example: RFID mobot( moniker ) metaphysic object A conveyed thingy in the physical 'real' world. Examples: Samasung Galaxy watch, cellphone mode _month() _mth() _month( mthnumeric ) _mth( mthnumeric ) _month( mth_string ) _mth( mth-string ) abstract property References the temporal month of the preceding object Sets the temporal month of mthnumeric or mth_string mover( moniker ) See: jigger _msg( message ) _message( message ) metaphysic ?? Proceed with message moniker msg_ <object> metaphysic verb message proceeding object msg( moniker ) message( moniker ) metaphysic object Action on message moniker namespace( moniker ) ns( moniker ) abstract object namespace neigh neighbour ob metaphysic object A civilian[^civilian] immobile ject in the physical 'real' world. Examples: unidentified lampost (or thing pointing out of the ground), etc. call_robot(alif)_found()_ob()_photo()_blob(d3Mtd2l6EAMyCwguEBDIL ... object metaphysic object A dumb immobile physical object obstacle organic metaphysic object Representation of a non-human being, present and alive in the physical 'real' world. Example: cat, dog _orientat( variable_moniker ) _orientation( variable_moniker ) metaphysic posit-variable _orientat( x , y , j , k ) _orientat( x , y , z , w ) _orientation( x , y , j , k ) _orientation( x , y , z , w ) metaphysic posit-action _orientat( x , y , z ) _orientation( x , y , z ) metaphysic posit-action package path( moniker ) metaphysic object path payload( moniker ) pload( moniker ) metaphysic object Action on payload moniker _pi() _pi( decplaces ) abstract constant pipe( moniker ) metaphysic object duct plafond poi( moniker ) metaphysic object point( moniker ) abstract object point poll_ <object> ( objmoniker ) poll_ <object> ( ofmoniker ) metaphysic verb poll _pose( moniker ) metaphysic posit-object Proceed with pose moniker printer( moniker ) ptr( moniker ) metaphysic object Action on printer moniker proc `proced procedure process( moniker ) process( moniker ) metaphysic object prog( moniker ) program( moniker ) programme( moniker ) puff( moniker ) _qtr() _quarter() _qtr( qtr_numeric ) _quarter( qtr_numeric ) abstract property References the temporal quarter year of the preceding object Sets the temporal quater year of qtr_numeric rail( moniker ) metaphysic object rail _ret() _ret({ datatype }) abstract function ret robot( moniker ) _robot( moniker ) physic object Action on robot moniker roi( moniker ) regionofinterest( moniker ) metaphysic object roi room A representation of a single physical enclosed space for a thingy to move freely around inside. route( moniker ) _route( moniker ) metaphysic object Action on route moniker Proceed with route moniker scalar( moniker ) _scalar( moniker ) _scalar({dt}, moniker ) _scalar([ variable_moniker ]) metaphysic object Proceed with scalar variable_moniker scalar scan _sec() _second() _sec( sec_numeric ) _second( sec_numeric ) abstract property References the temporal second of the preceding object Sets the temporal second of sec_numeric sensor( moniker ) _sensor( moniker ) metaphysic object Action on sensor moniker Proceed with sensor moniker set_ <object> ( moniker , settings... ) _set( settings... ) abstract verb posit Sets the object of moniker with settings... settings _false( bool_moniker ) abstract function Sets the Boolean bool_moniker to false _true( bool_moniker ) abstract function Sets the Boolean bool_moniker to true _not( bool_moniker ) abstract function Sets the Boolean bool_moniker to its opposite value not set_ <setter> ( settings ) abstract metaphysic verb Sets the setter to settings settings shaft( moniker ) physic object shaft side sobriquet spec specification See also: attribute spec spine( moniker ) metaphysic object spine _sql( sqlquery ) abstract function Provides sqlquery outcome into preceding object _sqrt2() _sqrt2( decplaces ) abstract constant stacle stance( moniker ) metaphysic object stealth( moniker ) metaphysic object stride( moniker ) The human version of gait study_ <object> physic verb Study proceeding object sub( moniker ) physic object A unidentified mobile physical ject subject( moniker ) physic object A dumb mobile physical ject ](../metaphysic/obj/substacle.md) swarm( moniker ) tail_ <object> metaphysic verb Tail behind proceeding object tempor( moniker ) temporal( moniker ) {tempor} {temporal} abstract object A primitive data object representing a tempor off a calendar monikered moniker thing physic obj An immobile thingy in the physical 'real' world. Example: fridge, television thingy({robot}, moniker ) add_thingy( moniker )_type(robot) physic verb-object datatype Action on thingy moniker of datatype robot _to() abstract operator preceding from object(s) to proceeding object(s) _to() metaphysic operator preceding object(s) action to proceeding object(s) to metaphysic posit to _tour( moniker ) metaphysic posit-object Proceed with tour moniker toward towards metaphysic posit toward track( moniker ) physic object Floor/ground marking the side borders of a lane. Example: \" An all-weather running track (photo taken at the Dalin Sports Park, Chiayi, Taiwan) \" by Mk2010 is licensed under CC BY 4.0 International tunnel( moniker ) physic object Physical bar or continuous line of bars construction used to physically guide object along a pre-defined route. Example: \" \" by is licensed under CC BY _txt( text ) _text( text ) abstract property Proceed with test of text moniker type( moniker ) _type( moniker ) { moniker } _unit( unit ) metaphysic posit-datatype unload_ <object> metaphysic verb Unload proceeding object _using( moniker ) _using([ variable_moniker ]) metaphysic condit using var( moniker ) variable( moniker ) abstract object A basic one-dimensional mutable data storage object called moniker vector( moniker ) _vector( moniker ) metaphysic object posit-object Action on vector moniker Proceed with way moniker vehicle physic obj A guided thingy transporting human / organic thingies and/or controlled by a human . Examples: car, airplane, ugv . with_vehicle(familyCar)_equip(frontLeftWheel)_metric()_tyrepress(); verb( moniker ) meta-abstract object Action on verb moniker wall( moniker ) physic object litsan way( moniker ) _way( moniker ) metaphysic object posit-object Action on way moniker Proceed with way moniker wayfind Wayfinding floor signature, created using paint, tape, or, decals. Example: \" Tokyo Station \" by mrhayata is licensed under CC BY 2.0 waypoint( moniker ) wp( moniker ) _waypoint( moniker ) _wp( moniker ) metaphysic object posit-object Action on waypoint moniker Proceed with waypoint moniker _week() _wk() _week( wknumeric ) _wk( wknumeric ) abstract property References the temporal week of the preceding object Sets the temporal week of wknumeric with_ <object> ( moniker ) abstract metaphysic physic verb Refer to object of moniker workspace An exclusive section of a puff , sometimes called a room world( verbmoniker ) physic special Action of verbmoniker on world _year() _year( yearnumeric ) abstract property References the temporal year of the preceding object Sets the temporal year of yearnumeric _zdt() _zoneddatetime() abstract object ?????? zone metaphysic object The thing version of an arena zone","title":"Lexicon"},{"location":"lexicon/lexicon/#lexicon","text":"The lexicon of Diego is the full syntactical vocabulary of all statement compositions: lexicon domain type description <comand> ; abstract statement-operator Termination of preceding statement ?_ <command> abstract statement-operator Termination of preceding statement and the positive outcome beginning of proceeding statement |_ <command> abstract statement-operator Termination of preceding statement and the neutral outcome beginning of proceeding statement :_ <command> abstract statement-operator Termination of preceding statement and the negative outcome beginning of proceeding statement ( moniker ) () (()) abstract metaphysic physic object Refer to object monikered moniker Refer to last referenced youngest generation object or refer to youngest generation nested object Refer to last referenced oldest generation object or refer to oldest generation nested object [ variable_moniker ] [] [ moniker ] _ <expression_posit> ([ ordinal ]) abstract metaphysic physic object variable Refer to variable object variable_moniker Refers to last scoped variable or 'this' parent scoped object Refer to object moniker Refer the ordinal variable object at position ordinal from the proceeding object ([ variable_moniker ]) ({datatype},[ variable_moniker ]) abstract metaphysic physic object Refer to variable object of value of variable_moniker Refers to variable object of value of variable_moniker to datatype datatype { datatype } { type } {} abstract metaphysic physic statement Datatype declaration or cast of datatype datatype Type declaration or cast of type type Declare or cast variant datatype or variant type \u276c unit \u276d \u276c unit_system \u276d \u276c\u276d metaphysic statement Unit declaration, or, cast of object object Declare variant, or, cast to variant unit + - * \u00d7 / \u00f7 % \ud835\udc26 \ud835\udc26\ud835\udc28\ud835\udc1d abstract operator Arithmetic operators \u00b2 \u00b3 ^ ** \ud835\udc65 y \u221a \u221b \u221c abstract operator Exponent operators ++ \u2206 -- \u2014 \u2207 abstract operator Crement operators = += -= *= \u00d7= ^= /= \u00f7= %= abstract operator Assignment operators & + += &= abstract operator String operators == === \u2261 \u2262 \u2245 \u2248 \u224a != <> \u2260 < \u226e <= \u2264 \u2268 > \u226f >= \u2265 \u2269 abstract operator Comparison operators ? ... : abstract operator Tenary Operator && \u2227 || \u2228 ! \u00ac abstract operator Logical Operators & \u22bc | ~ \u2241 ^ \u22bb << \u240f >> \u240e abstract operator Bitwise Operators \u222a \u2229 \u2286 \u2284 \u2282 \u2283 \u2287 \u2205 \ud835\udc0f \u2285 = \u2201 \u2206 \u2209 | # \u00d7 \u2080 \u2081 \u2082 \ud835\udc10 \ud835\udc19 \ud835\udc11 abstract operator Set Theory Operators _abs( numeric ) _ <expression_posit> (| numeric |) abstract function Provides the absolute value of numeric Provides the absolute value of numeric in an expression _acos( numeric ) _acos([ variable_moniker ]) _ <expression_posit> (\ud835\udc1c\ud835\udc28\ud835\udc2c\u207b\u00b9( numeric )) _ <expression_posit> (\ud835\udc1c\ud835\udc28\ud835\udc2c\u207b\u00b9([ variable_moniker ])) abstract function Provides the arccosine of numeric actuat( moniker ) actuator( moniker ) physic object actuat add_ <object> abstract metaphysic physic verb Declare object _adicity() abstract property Provides the information of elements or members of the preceding object _after( temporal_expression ) abstract condit preceding object after temporal_expression for the proceeding object , usually to do the proceeding action ai bot metaphysic obj A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot alert_ <thingy> ( moniker ) physic verb alert applian appliance physic obj A smart mobot that can safety be classified as a household appliance . Examples: washing machine, dishwasher. with_applian(dishWasher)_start(normalWash); apparat( moniker ) apparatus( moniker ) physic object apparat arena( moniker ) metaphysic object arena _arity() abstract property Provides the entire count members of the preceding object array( moniker ) ary( moniker ) abstract object A collection of multiple elements under a single object called moniker ask_ metaphysic verb Requests information, to be returned with tell verb ask_drone(drone1)_stat(avg_altitude); tell_drone(drone1)_stat(avg_altitude)_value(22.893); ask_ <thingy> physic verb Ask proceeding thingy _at( tempor ) abstract condit preceding object at tempor for proceeding object to do proceeding action attr attribute metaphysic object Example: See also: spec _before( tempor ) abstract condit preceding object before tempor for proceeding object to do proceeding action begin_ <object\\|action> abstract metaphysic verb Begin action on proceeding object border physic object Floor marking showing borders, created using paint, tape, or, decals. Example: \" Floor marking at the Scanfil Poland factory in Sieradz \" by Adrian Grycuk is licensed under CC BY 2.0 Poland bot ai metaphysic obj A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot box metaphysic object A representation of a meta-physical enclosed space. The thing / meta-physical version of a room . Example: inside a pit See also: room btree( moniker ) metaphysic object _calc( expression ) abstract method Use calculation of expression for preceding object , with proceeding object calc_ <object> ( obj_moniker ) calc_ <object> ( of_moniker ) abstract metaphysic verb calc call_ <object> metaphysic verb call canal physic object canal cellphone( moniker ) mobot({cellphone}, moniker ) mobot( moniker )_type(cellphone); physic object cellphone ceiling physic object channel( moniker ) physic object An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud( moniker ) physic object clump( moniker ) abstract object A multi-dimesional collection of data storage object called moniker computer( moniker ) comput( moniker ) sobot({computer}, moniker ) metaphysic object Action on computer moniker commrelay( moniker ) https://www.autonodyne.com/AUTO_behaviors2.html _concat() _concatenate() _concat( arymoniker ) _concatenate( arymoniker ) _concat( arymoniker1 , arymoniker1 , ... ) _concatenate( arymoniker1 , arymoniker1 , ... ) abstract object Concatenates proceeding objects ( arrays ) with proceeding objects Concatenates array arymoniker with preceding objects Concatenates arrays arymonikers with preceding objects concord( settings ) abstract metaphysic setter consens( settings ) consensus( settings ) abstract metaphysic setter consens console metaphysic object A metaphysical presence used to only provide an interface to all other thingies corridor metaphysic object counter( moniker ) ( countermoniker ) abstract object counter _day() _day( day_numeric ) abstract property References the temporal day of the preceding object Sets the temporal day of day_numeric decisiven( settings ) decisiveness( settings ) metaphysic setter _decpl( numeric ) _decplaces( numeric ) abstract setter Set the default number of decimal place to use in calcluations adn on display (as a setter) decpl See also fix method deed( moniker ) abstract object A basic one-dimensional data data object called moniker , immutable except for deed owner dict( moniker ) _dict( moniker ) dictionary( moniker ) _dictionary( moniker ) abstract object A keyed collection , with key-value pairs, data storage object called moniker _distan( distance_value ) _distance( distance_value ) _distan(\u276cunit\u276d, distance_value ) _distance(\u276cunit\u276d, distance_value ) metaphysic posit property preceding object of distance of proceeding object distan( object_name ) distance( object_name ) metaphysic object distan door( moniker ) door({type}, moniker ) _door( moniker ) _door({type}, moniker ) physic object A representation of a physical doorway / gate, designed for a human _durat( duration_value ) _duration( duration_value ) _durat(\u276cunit\u276d, duration_value ) _duration(\u276cunit\u276d, duration_value ) metaphysic condit preceding object of duration of proceeding object _during( tempor ) abstract condit preceding object during tempor for proceeding object to do proceeding action _e() _e( decimal_places ) abstract constant Use Euler's number for preceding object , with proceeding object equip( moniker ) equipment( moniker ) metaphysic object See also: apparatus ; instru [ment] ; peripheral ; sensor _ergcon( ergcon_value ) _ergcon(\u276cunit\u276d, ergcon_value ) metaphysic property preceding object of energy consumption of proceeding object fence( moniker ) geofence( moniker ) metaphysic object geofence firma metaphysic object An identified down side of a representation space in the physical world. _fix( decplaces ) _tofix( decplaces ) abstract method Converts preceding object-value in to decplaces number of fixed decimal places {float} abstract datatype Float abstract datatype floor level floor level fog( moniker ) metaphysic object A zone ( puff ) used for diego communication that relies on UDP fog follow_ <object> metaphysic verb Follow proceeding object _for([ loopername ]) abstract flow for _for( startexpression , condition , repeatexpression ) abstract flow for _foreach( startexpression , condition , repeatexpression ) abstract flow foreign( moniker ) foreigner( moniker ) foreign _forin( startexpression , condition , repeatexpression ) abstract flow form [ation] _forof( startexpression , condition , repeatexpression ) abstract flow _fortnight() _fortn() _fortnight( fortnnumeric ) _fortn( fortnnumeric ) abstract property References the temporal fortnight of the preceding object Sets the temporal fortnight of fortnnumeric _fqtr() _fiscalquarter() _fqtr( fqtr_numeric ) _fiscalquarter( fqtr_numeric ) abstract property References the fiscal quarter year of the preceding object Sets the fiscal quarter year of qtr_numeric funct( moniker ) _funct( moniker ) function( moniker ) _function( moniker ) abstract action funct gait( moniker ) metaphysic object The thing version of stride gait gate( moniker ) metaphysic object gate ghost( moniker ) metaphysic object ghost gimbal( moniker ) physic object go_ <object> physic verb Manoeuver Proceeding object to go proceeding action on object goal( moniker ) _goal( moniker ) metaphysic posit-object Action on goal moniker Proceed with goal moniker _goto() metaphysic verb preceding object(s) goto to proceeding object(s) goto_ <object> physic verb Manoeuver Proceeding object to goto proceeding object guide( moniker ) handler( moniker ) hash( moniker ) abstract object A two-dimensional collection data storage object called moniker , with hashed keys hold( moniker ) household( moniker ) _hour() _hr() _hour( hour_numeric ) _hour( hour_numeric ) \u276chour\u276d \u276chr\u276d {h} {hh} {H} {H} {HH} {dh} {h:m} {h:m:s} tohour() tohr() abstract property References the temporal hour of the preceding object Sets the temporal hour of hour_numeric Hour unit Hour type (format) Hour cast human({ type }, moniker ) _human() _human([ variable_name ]) physic object Representation of a human being, present and alive in the physical 'real' world. _if_( expression ) abstract operator indent( moniker ) indenture( moniker ) abstract object A basic one-dimensional data storage object called moniker , immutable except for indenture owners instruct( moniker ) instruction( moniker ) abstract metaphysic action instruct {int} {int_32} {int_64} {short} {long} abstract primitive Integer primitive datatypes {bool} {onoff} {hl} abstract datatype Boolean primitive datatypes {lmh_3} {+=-} {} {} abstract datatype Enumerators (primitive datatypes) {lmh_3} {lmh_4} {lmh_5} {lmh_6} metaphysic datatype Low-Medium-High Enumerator datatypes {bit} {byte} {octet} {word} abstract datatype Computer primitive datatypes jagger( moniker ) metaphysic object jagger](#jagger) ject( moniker ) metaphysic object A dumb physical ject jigger( moniker ) metaphysic object _jour() _jour( jour_numeric ) _jour( jour_sring ) abstract property References the temporal jourday of the preceding object Sets the temporal jourday of jour_numeric or jour_string kill_ <human\\|organic> kill_ <object> physic verb Kill proceeding human / organic De-commission proceeding object kill_ <variable> abstract verb Kill proceeding variable label_ <object> lead_ <object> metaphysic verb lead proceeding object* lexi( moniker ) lexikon( moniker ) abstract object A two-dimensional collection data storage object called moniker , with unique keys lib( moniker ) library( moniker ) list( moniker ) abstract object A database-assigned collection object called moniker _ln( numeric ) _log( numeric ) _ln([ numeric_variable_moniker ]) _log([ numeric_variable_moniker ]) abstract function Use natural logarithm (base e ) for preceding object , with proceeding object See also: ln2 ; ln10 _ln10() _ln10( decimal_places ) _ln(10) _ln(10)_decpl( decimal_places ) abstract constant Use natural logarithm of 10 for preceding object , with proceeding object See also: ln _ln2() _ln2( decimal_places ) _ln(2) _ln(2)_decpl( decimal_places ) abstract constant Use natural logarithm of 2 for preceding expression , with proceeding object See also: ln load_ <object> metaphysic verb load proceeding object mach( moniker ) machine( moniker ) physic object mach mech( moniker ) physic object map( moniker ) metaphysic object _mapprovider( mapprovider ) metaphysic setter mapprovider matrix( moniker `)`` abstract object A two-dimensional collection data storage object called moniker me_ <object\\|action> abstract special Me (or this) does action or my object ... Representation of self metric( moniker ) metric({ datatype } moniker ) metric(\u276c unit \u276d, moniker ) metric({ datatype },\u276c unit \u276d, moniker ) _\u03bcs() _microsecond() _\u03bcs( \u03bcs_numeric ) _microsecond( \u03bcs_numeric ) \u276cmicrosec\u276d \u276cmicrosecond\u276d \u276c\u03bcs\u276d abstract property References the temporal microsecond of the preceding object Sets the temporal microsecond of \u03bcs_numeric Microsecond unit _ms() _millisecond() _ms( ms_numeric ) _millisecond( ms_numeric ) abstract property References the temporal millisecond of the preceding object Sets the temporal millisecond of ms_numeric _min() _minute() _min( min_numeric ) _minute( min_numeric ) abstract property References the temporal minute of the preceding object Sets the temporal minute of min_numeric mission( moniker ) metaphysic object mission mist( moniker ) metaphysic object A connectivity zone (wired or wireless) with the distance range of < 10m. For example: RFID mobot( moniker ) metaphysic object A conveyed thingy in the physical 'real' world. Examples: Samasung Galaxy watch, cellphone mode _month() _mth() _month( mthnumeric ) _mth( mthnumeric ) _month( mth_string ) _mth( mth-string ) abstract property References the temporal month of the preceding object Sets the temporal month of mthnumeric or mth_string mover( moniker ) See: jigger _msg( message ) _message( message ) metaphysic ?? Proceed with message moniker msg_ <object> metaphysic verb message proceeding object msg( moniker ) message( moniker ) metaphysic object Action on message moniker namespace( moniker ) ns( moniker ) abstract object namespace neigh neighbour ob metaphysic object A civilian[^civilian] immobile ject in the physical 'real' world. Examples: unidentified lampost (or thing pointing out of the ground), etc. call_robot(alif)_found()_ob()_photo()_blob(d3Mtd2l6EAMyCwguEBDIL ... object metaphysic object A dumb immobile physical object obstacle organic metaphysic object Representation of a non-human being, present and alive in the physical 'real' world. Example: cat, dog _orientat( variable_moniker ) _orientation( variable_moniker ) metaphysic posit-variable _orientat( x , y , j , k ) _orientat( x , y , z , w ) _orientation( x , y , j , k ) _orientation( x , y , z , w ) metaphysic posit-action _orientat( x , y , z ) _orientation( x , y , z ) metaphysic posit-action package path( moniker ) metaphysic object path payload( moniker ) pload( moniker ) metaphysic object Action on payload moniker _pi() _pi( decplaces ) abstract constant pipe( moniker ) metaphysic object duct plafond poi( moniker ) metaphysic object point( moniker ) abstract object point poll_ <object> ( objmoniker ) poll_ <object> ( ofmoniker ) metaphysic verb poll _pose( moniker ) metaphysic posit-object Proceed with pose moniker printer( moniker ) ptr( moniker ) metaphysic object Action on printer moniker proc `proced procedure process( moniker ) process( moniker ) metaphysic object prog( moniker ) program( moniker ) programme( moniker ) puff( moniker ) _qtr() _quarter() _qtr( qtr_numeric ) _quarter( qtr_numeric ) abstract property References the temporal quarter year of the preceding object Sets the temporal quater year of qtr_numeric rail( moniker ) metaphysic object rail _ret() _ret({ datatype }) abstract function ret robot( moniker ) _robot( moniker ) physic object Action on robot moniker roi( moniker ) regionofinterest( moniker ) metaphysic object roi room A representation of a single physical enclosed space for a thingy to move freely around inside. route( moniker ) _route( moniker ) metaphysic object Action on route moniker Proceed with route moniker scalar( moniker ) _scalar( moniker ) _scalar({dt}, moniker ) _scalar([ variable_moniker ]) metaphysic object Proceed with scalar variable_moniker scalar scan _sec() _second() _sec( sec_numeric ) _second( sec_numeric ) abstract property References the temporal second of the preceding object Sets the temporal second of sec_numeric sensor( moniker ) _sensor( moniker ) metaphysic object Action on sensor moniker Proceed with sensor moniker set_ <object> ( moniker , settings... ) _set( settings... ) abstract verb posit Sets the object of moniker with settings... settings _false( bool_moniker ) abstract function Sets the Boolean bool_moniker to false _true( bool_moniker ) abstract function Sets the Boolean bool_moniker to true _not( bool_moniker ) abstract function Sets the Boolean bool_moniker to its opposite value not set_ <setter> ( settings ) abstract metaphysic verb Sets the setter to settings settings shaft( moniker ) physic object shaft side sobriquet spec specification See also: attribute spec spine( moniker ) metaphysic object spine _sql( sqlquery ) abstract function Provides sqlquery outcome into preceding object _sqrt2() _sqrt2( decplaces ) abstract constant stacle stance( moniker ) metaphysic object stealth( moniker ) metaphysic object stride( moniker ) The human version of gait study_ <object> physic verb Study proceeding object sub( moniker ) physic object A unidentified mobile physical ject subject( moniker ) physic object A dumb mobile physical ject ](../metaphysic/obj/substacle.md) swarm( moniker ) tail_ <object> metaphysic verb Tail behind proceeding object tempor( moniker ) temporal( moniker ) {tempor} {temporal} abstract object A primitive data object representing a tempor off a calendar monikered moniker thing physic obj An immobile thingy in the physical 'real' world. Example: fridge, television thingy({robot}, moniker ) add_thingy( moniker )_type(robot) physic verb-object datatype Action on thingy moniker of datatype robot _to() abstract operator preceding from object(s) to proceeding object(s) _to() metaphysic operator preceding object(s) action to proceeding object(s) to metaphysic posit to _tour( moniker ) metaphysic posit-object Proceed with tour moniker toward towards metaphysic posit toward track( moniker ) physic object Floor/ground marking the side borders of a lane. Example: \" An all-weather running track (photo taken at the Dalin Sports Park, Chiayi, Taiwan) \" by Mk2010 is licensed under CC BY 4.0 International tunnel( moniker ) physic object Physical bar or continuous line of bars construction used to physically guide object along a pre-defined route. Example: \" \" by is licensed under CC BY _txt( text ) _text( text ) abstract property Proceed with test of text moniker type( moniker ) _type( moniker ) { moniker } _unit( unit ) metaphysic posit-datatype unload_ <object> metaphysic verb Unload proceeding object _using( moniker ) _using([ variable_moniker ]) metaphysic condit using var( moniker ) variable( moniker ) abstract object A basic one-dimensional mutable data storage object called moniker vector( moniker ) _vector( moniker ) metaphysic object posit-object Action on vector moniker Proceed with way moniker vehicle physic obj A guided thingy transporting human / organic thingies and/or controlled by a human . Examples: car, airplane, ugv . with_vehicle(familyCar)_equip(frontLeftWheel)_metric()_tyrepress(); verb( moniker ) meta-abstract object Action on verb moniker wall( moniker ) physic object litsan way( moniker ) _way( moniker ) metaphysic object posit-object Action on way moniker Proceed with way moniker wayfind Wayfinding floor signature, created using paint, tape, or, decals. Example: \" Tokyo Station \" by mrhayata is licensed under CC BY 2.0 waypoint( moniker ) wp( moniker ) _waypoint( moniker ) _wp( moniker ) metaphysic object posit-object Action on waypoint moniker Proceed with waypoint moniker _week() _wk() _week( wknumeric ) _wk( wknumeric ) abstract property References the temporal week of the preceding object Sets the temporal week of wknumeric with_ <object> ( moniker ) abstract metaphysic physic verb Refer to object of moniker workspace An exclusive section of a puff , sometimes called a room world( verbmoniker ) physic special Action of verbmoniker on world _year() _year( yearnumeric ) abstract property References the temporal year of the preceding object Sets the temporal year of yearnumeric _zdt() _zoneddatetime() abstract object ?????? zone metaphysic object The thing version of an arena zone","title":"Lexicon"},{"location":"lexicon/obs_and_subs/","text":"Obs and Subs (object)","title":"Obs and Subs (object)"},{"location":"lexicon/obs_and_subs/#obs-and-subs-object","text":"","title":"Obs and Subs (object)"},{"location":"lexicon/routing/","text":"Location Routing Location (location-only) routing involves four objects that consider physical locations within their spatial environment. l routing notes examples physic version API itiner itinerary An object collection of route object collections - itiner route An object collection of path objects wayfind route path A representation of the connections of waypoint objects - path waypoint wp A representation of a physical location in the physical world landmark waypoint Orientation-Location Routing Location plus orientation routing involves four objects that consider physical locations and their orientation within their spatial and orientational environment. Orientation-location routing objects can inherit their physical locations from location routing objects . o+l routing notes examples physic version API excurs excursion An object collection of course object collections excurs course An object collection of way objects valley course way A representation of the connections of pose objects - way pose A representation of an orientation in the physical world heading pose Time-Orientation-Location Routing Location plus orientation plus time routing involves four objects that consider physical locations, their orientation, and their temporal displacement within their spatial and orientational and temporal environment. Time-orientation-location routing objects can inherit their physical locations from location routing objects and their orientation pose from orientation-location routing objects . t+o+l routing notes examples physic version API tour An object collection of journ object collections - tour journ journey An object collection of trip objects - journ trip A representation of the connections of goal objects - trip goal A representation of a temporal position in the physical world finish line goal","title":"Routing"},{"location":"lexicon/routing/#location-routing","text":"Location (location-only) routing involves four objects that consider physical locations within their spatial environment. l routing notes examples physic version API itiner itinerary An object collection of route object collections - itiner route An object collection of path objects wayfind route path A representation of the connections of waypoint objects - path waypoint wp A representation of a physical location in the physical world landmark waypoint","title":"Location Routing"},{"location":"lexicon/routing/#orientation-location-routing","text":"Location plus orientation routing involves four objects that consider physical locations and their orientation within their spatial and orientational environment. Orientation-location routing objects can inherit their physical locations from location routing objects . o+l routing notes examples physic version API excurs excursion An object collection of course object collections excurs course An object collection of way objects valley course way A representation of the connections of pose objects - way pose A representation of an orientation in the physical world heading pose","title":"Orientation-Location Routing"},{"location":"lexicon/routing/#time-orientation-location-routing","text":"Location plus orientation plus time routing involves four objects that consider physical locations, their orientation, and their temporal displacement within their spatial and orientational and temporal environment. Time-orientation-location routing objects can inherit their physical locations from location routing objects and their orientation pose from orientation-location routing objects . t+o+l routing notes examples physic version API tour An object collection of journ object collections - tour journ journey An object collection of trip objects - journ trip A representation of the connections of goal objects - trip goal A representation of a temporal position in the physical world finish line goal","title":"Time-Orientation-Location Routing"},{"location":"lexicon/thingy/","text":"Thingies The top object in the hierarchy of all objects in Diego are the thingies . A thingy is an object with interfaces with diego commands, only thingies have this interface. However, not all thingies are the same, they have different genera. To classify the genera of thingies we consider: its physicality (physical or metaphysical), its organicness, its animativity, its transitiveness, and, its conveyability. thingy description attributes example api human Representation of a human being, present (aware of surroundings & context) and alive (animate) in the physical 'real' world. The human version of a thing / robot . physical, organic, animate Fred Jones human organic Representation of a non-human being, present (aware of surroundings & context) and alive in the physical 'real' world. Example: cat, dog organic robot An thingy able to self-propel itself (animate) in the physical 'real' world, that is maority inorganic. Examples: Boston Dynamics Spot, robot arm, drone See also: human ; thing physical inorganic animate robot In terms of authority/hierarchy within the genera it is generally agreed that hi graph TD human[fa:fa-user human] -->|physical organic animate| organic[fa:fa-cat organic] human -.->|metaphysical organic| mind organic -->|physical inorganic transitive| vehicle[fa:fa-car-side vehicle] organic --> robot[fa:fa-robot robot] console[fa:fa-desktop console] robot -->|physical inorganic conveyable| mobot bot -->|physical inorganic inanimate| thing robot -->|metaphysical inorganic| bot sdas ```mermaid graph TB human ---> organic human ---> mind organic ---> vehicle organic ---> robot robot ---> mobot bot ---> thing robot ---> bot console fdsdsaf ```mermaid graph TB human ---> organic Thingy Objects (Genera of Thingies) thingy genera notes examples API bot , ai A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot bot console A metaphysical presence used to only provide an interface to all other thingies console human Representation of a human being, present and alive in the physical 'real' world. The human version of a thing / robot . The non-human version of an organic . Example: Fred Jones human mobot A conveyed thingy in the physical 'real' world. Examples: Samasung Galaxy watch, cellphone mobot | robot | | thing | An animate thingy in the physical 'real' world. Example: fridge, television | thing | | thingy | | thingy | | vehicle | A guided thingy transporting human / organic thingies and/or controlled by a human . Examples: car, airplane, ugv, radio-controlled toy car | vehicle |","title":"Thingies"},{"location":"lexicon/thingy/#thingies","text":"The top object in the hierarchy of all objects in Diego are the thingies . A thingy is an object with interfaces with diego commands, only thingies have this interface. However, not all thingies are the same, they have different genera. To classify the genera of thingies we consider: its physicality (physical or metaphysical), its organicness, its animativity, its transitiveness, and, its conveyability. thingy description attributes example api human Representation of a human being, present (aware of surroundings & context) and alive (animate) in the physical 'real' world. The human version of a thing / robot . physical, organic, animate Fred Jones human organic Representation of a non-human being, present (aware of surroundings & context) and alive in the physical 'real' world. Example: cat, dog organic robot An thingy able to self-propel itself (animate) in the physical 'real' world, that is maority inorganic. Examples: Boston Dynamics Spot, robot arm, drone See also: human ; thing physical inorganic animate robot In terms of authority/hierarchy within the genera it is generally agreed that hi graph TD human[fa:fa-user human] -->|physical organic animate| organic[fa:fa-cat organic] human -.->|metaphysical organic| mind organic -->|physical inorganic transitive| vehicle[fa:fa-car-side vehicle] organic --> robot[fa:fa-robot robot] console[fa:fa-desktop console] robot -->|physical inorganic conveyable| mobot bot -->|physical inorganic inanimate| thing robot -->|metaphysical inorganic| bot sdas ```mermaid graph TB human ---> organic human ---> mind organic ---> vehicle organic ---> robot robot ---> mobot bot ---> thing robot ---> bot console fdsdsaf ```mermaid graph TB human ---> organic","title":"Thingies"},{"location":"lexicon/thingy/#thingy-objects-genera-of-thingies","text":"thingy genera notes examples API bot , ai A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot bot console A metaphysical presence used to only provide an interface to all other thingies console human Representation of a human being, present and alive in the physical 'real' world. The human version of a thing / robot . The non-human version of an organic . Example: Fred Jones human mobot A conveyed thingy in the physical 'real' world. Examples: Samasung Galaxy watch, cellphone mobot | robot | | thing | An animate thingy in the physical 'real' world. Example: fridge, television | thing | | thingy | | thingy | | vehicle | A guided thingy transporting human / organic thingies and/or controlled by a human . Examples: car, airplane, ugv, radio-controlled toy car | vehicle |","title":" Thingy Objects (Genera of Thingies)"},{"location":"lexicon/condit/_indextopic/","text":"Conditions Conditions or condit s are used throughout Diego language to condtion preceeding object for proceeding object , usually to do a proceeding (or sometime preceeding) action . Condits can be categorised into several categories: (Temporal Conditions)(#temp); Temporal Conditions All temporal condit ions are determined at the callee's datetime system. Dates are defaulted to set_calendar(gregorian) , but can be changed by the caller. _at The _at condit ion determines that the preceeding command(s) are executed when a date|datetime|time matching the given date|datetime|time or date_var|datetime_var|time_var ` of the callee. The default syntax is _at( date|datetime|time ) , for example: // Robot 'alif' must maneuver to 'waypoint1' as soon as 'alif's date matches the date|datetime|time set: go_robot(alif)_to(waypoint1)_at(12-Jun-2022); go_robot(alif)_to(waypoint1)_at(12-Jun-2022 11:00); go_robot(alif)_to(waypoint1)_at(11:00); Variables can be used with _at , for example: // Robot 'beh' must maneuver to 'waypoint1' as soon as 'beh's date matches the date|datetime|time variable 'pit': go_robot(beh)_to(waypoint1)_at[pit]; go_robot(beh)_to(waypoint1)_at([pit]); // same effect // The variable 'pit' can be converted inside the _at condit: go_robot(beh)_to(waypoint1)_at({time},[pit]); The _at condit can be converted to a concomit ant , for example: // Transfer _at to _concomit: go_robot(teh)_to(waypoint1)_at(11:00)_concomit(dailyRoutine); // Concomitant 'dailyRoutine' will continue indefinitely until: stop_concomit(dailyRoutine); start_concomit(dailyRoutine); pause_concomit(dailyRoutine); resume_concomit(dailyRoutine); // (or start_...) end_concomit(dailyRoutine); ...for more information on concomits see concomit . _after The _after condit ion determines that the preceeding command(s) are executed after (and including) the date|datetime|time matching the given date|datetime|time or date_var|datetime_var|time_var` of the callee. The default syntax is _after( date|datetime|time ) , for example: // Robot 'alif' must maneuver to 'waypoint1' any time after 'alif's date matches the date|datetime|time set: go_robot(alif)_to(waypoint1)_after(12-Jun-2022); go_robot(alif)_to(waypoint1)_after(12-Jun-2022 11:00); go_robot(alif)_to(waypoint1)_after(11:00); Variables can be used with _after , for example: // Robot 'beh' must maneuver to 'waypoint1' anytime after 'beh's date matches the date|datetime|time variable 'pit': go_robot(beh)_to(waypoint1)_after[pit]; go_robot(beh)_to(waypoint1)_after([pit]); // same effect // The variable 'pit' can be converted inside the _after condit: go_robot(beh)_to(waypoint1)_after({time},[pit]); The _after condit can be converted to a concomit ant , for example: // Transfer _after to _concomit: go_robot(teh)_to(waypoint1)_after(11:00)_concomit(dailyRoutine); // Concomitant 'dailyRoutine' will continue indefinitely until: stop_concomit(dailyRoutine); start_concomit(dailyRoutine); pause_concomit(dailyRoutine); resume_concomit(dailyRoutine); // (or start_...) end_concomit(dailyRoutine); ...for more information on concomits see concomit . _during _before The _before condit ion determines that the preceeding command(s) are executed only before (and including) the date|datetime|time matching the given date|datetime|time or date_var|datetime_var|time_var` of the callee. To determine the extent of the 'before' logic, the callee will use the default set_start({ date_datatype|time_datatype , setting ) command, that the callee has learnt. The caller can (if granted), set and reset the start dates and start times. For example: set_start({date},01-Jan); set_start({time},00:00); reset_start[]; // reset start settings back to how they were before set reset_start(); // reset start settings to default reset_ The default syntax is _before( date|datetime|time ) , for example: // Robot 'alif' must maneuver to 'waypoint1' any time before 'alif's date matches the date|datetime|time set: go_robot(alif)_to(waypoint1)_before(12-Jun-2022); go_robot(alif)_to(waypoint1)_before(12-Jun-2022 11:00); go_robot(alif)_to(waypoint1)_before(11:00); Variables can be used with _before , for example: // Robot 'beh' must maneuver to 'waypoint1' anytime before 'beh's date matches the date|datetime|time variable 'pit': go_robot(beh)_to(waypoint1)_before[pit]; go_robot(beh)_to(waypoint1)_before([pit]); // same effect // The variable 'pit' can be converted inside the _before condit: go_robot(beh)_to(waypoint1)_before({time},[pit]); The _before condit can be converted to a concomit ant , for example: // Transfer _before to _concomit: go_robot(teh)_to(waypoint1)_before(11:00)_concomit(dailyRoutine); // Concomitant 'dailyRoutine' will continue indefinitely until: stop_concomit(dailyRoutine); start_concomit(dailyRoutine); pause_concomit(dailyRoutine); resume_concomit(dailyRoutine); // (or start_...) end_concomit(dailyRoutine); ...for more information on concomits see concomit . Sytnax Notes example _at[ date_var\\|datetime_var\\|time_var ] _at({ date_dt\\|datetime_dt\\|time_dt }, [ date_var\\|datetime_var\\|time_var ]) Condition that preceeding command(s) have a date|datetime|time matching the given date\\|datetime\\|time _from( date|datetime|time )_to( date|datetime|time ) _after( date|datetime|time ) _before( date|datetime|time ) _ago( value , unit ) or... _ago( value )_unit( unit ) Spatial / Geo-spatial Conditions There are sevaral spatial/geo-spatal postposits available. Sytnax Notes example Positions Position Notes _at({date|datetime|time}) _au({x},{y},{z}) _between({parameter_1})_and({parameter_2})_inclusive_() or _range({parameter_1})_and({parameter_2}) _between({parameter_1})_and({parameter_2}) _blob({blob_uuid}) _for({parameter_1}[,... {parameter_n}]) Provides focus on {parameter_1} ... {parameter_n) _fps({fps}) _from({date|datetime|time})_to({date|datetime|time}) _from({date|datetime|time}) _upto({date|datetime|time}) _in({duration}) _latency({latency}) _locus({x},{y},{name/uuid}) _locus({x},{y},{r},{name/uuid}) _locus({x1},{y1},{x2},{y2},{name/uuid}) _type({type}) _value({value}[, {unit}]) _blob({moniker/filename/uuid}) Geometric add_geometric({name/uuid}) with_geometric({name/uuid}) _type({type}) _value({linear_x},{linear_y},{linear_x},{angular_x},{angular_y},{angular_z}) Geometric Types type Type Value accel Expresses acceleration in free space broken into its linear and angular parts. _value({linear_x},{linear_y},{linear_x},{angular_x},{angular_y},{angular_z}) accelcovar Expresses acceleration in free space with uncertainty. `_value({}) _for({parameter_1},... {parameter_n}) Provides focus on {parameter_1} ... {parameter_n) _between({parameter_1})_and({parameter_2}) Provides focus from {parameter_1} to {parameter_2} inclusive _between({parameter_1})_and({parameter_2})_exclusive() Provides focus from {parameter_1} to {parameter_2} exclusive label({label}); Caller assigns label {label} to the callee label({label}) _for({uuid/name}, ...); Assigns a label {label} to {uuid/name_1} ... {uuid/name_n} ping({uuid/name}); Tests of reachability between caller and {uuid/name} callee pong({uuid/name}): Return/result of a ping from caller pong({uuid/name}) _ttl({byte} Time To Live or hop limit of the lifespan or lifetime of data in the Diego universe _time({millsecs}); The latency in milliseconds of the ping messeage transmitted and then received back again ask(); Caller requests minimal (name and identification) data on the callee ask({uuid/name}); Caller requests minimal (name and identification) data on {uuid/name}; add_stat({stat_name}); Caller adds stat {stat_name} to callee; with_stat({stat_name}); add_stat() add_poll(); poll(); with_poll(); goto_point() go_route() tell() _uuid({uuid}) _name({name}) _manufact({manufacturer}) _make({make/brand}) _model({model_name}) _badge({badge/series}) _id()_serial_number({serial_number}) _id() ask_energy(); tell_energy({energy_value})_unit({unit_of_measure}); ask_energy({uuid/name}); ask() _for() _for({uuid/name}, ...); TAE40116_DEL_AT1_TP_v1_.pdf where {paramter_1} is expected to respond or ask(); ask({uuid}); ask()_for({human_uuid}); ask_human(); call_human({human_uuid}); call_human()_for({human_uuid}); ask_ai(); ask_ai({ai_uuid}); ask_ai()_for({ai_uuid}); ask_ai(); ask(); ask_organic(); ask_label(); ask_human(); ask_ai(); ask_gps({uuid/name})_freq({frequency}[,{unit}])_stopat({datetime})_until() call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_organic({organic_uuid}); call_organic()_for({organic_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Navigation & Positioning add_stat({moniker/uuid}) with_stat({moniker/uuid}) begin_stat({moniker/uuid}) - end_stat() end_stat({moniker/uuid}) - begin_stat() exec_stat({moniker/uuid}) - bump call_stat({moniker/uuid}) - here_stat start_stat({moniker/uuid}) - stop_stat stop_stat({moniker/uuid}) - go_stat pause_stat({moniker/uuid}) System Commands system command Notes help() Provides the online help utility menu on system command line 'modules\" ## Informant, Informing, Proclaiming `proclaim_` By default a `proclaim_` will send out a proclamation without any delivery or receive receipt. `declare_` By default a `declare_` will send out a declaration expecting a delivery receipt. `inform_` By default a `inform_` will inform and except a delivery and receive receipt. ```diego add_var({datetime},pit)_value(12-Jun-2022 11:00); go_robot(beh)_to(waypoint1)_at[pit]; // <= 12-Jun-2022 11:00 - actually the pointer of the variable go_robot(beh)_to(waypoint1)_at([pit]); // <= 12-Jun-2022 11:00 - same, the value of the variable go_robot(beh)_to(waypoint1)_at(pit); // <= pit - error","title":"Conditions"},{"location":"lexicon/condit/_indextopic/#conditions","text":"Conditions or condit s are used throughout Diego language to condtion preceeding object for proceeding object , usually to do a proceeding (or sometime preceeding) action . Condits can be categorised into several categories: (Temporal Conditions)(#temp);","title":"Conditions"},{"location":"lexicon/condit/_indextopic/#temporal-conditions","text":"All temporal condit ions are determined at the callee's datetime system. Dates are defaulted to set_calendar(gregorian) , but can be changed by the caller.","title":"Temporal Conditions"},{"location":"lexicon/condit/_indextopic/#_at","text":"The _at condit ion determines that the preceeding command(s) are executed when a date|datetime|time matching the given date|datetime|time or date_var|datetime_var|time_var ` of the callee. The default syntax is _at( date|datetime|time ) , for example: // Robot 'alif' must maneuver to 'waypoint1' as soon as 'alif's date matches the date|datetime|time set: go_robot(alif)_to(waypoint1)_at(12-Jun-2022); go_robot(alif)_to(waypoint1)_at(12-Jun-2022 11:00); go_robot(alif)_to(waypoint1)_at(11:00); Variables can be used with _at , for example: // Robot 'beh' must maneuver to 'waypoint1' as soon as 'beh's date matches the date|datetime|time variable 'pit': go_robot(beh)_to(waypoint1)_at[pit]; go_robot(beh)_to(waypoint1)_at([pit]); // same effect // The variable 'pit' can be converted inside the _at condit: go_robot(beh)_to(waypoint1)_at({time},[pit]); The _at condit can be converted to a concomit ant , for example: // Transfer _at to _concomit: go_robot(teh)_to(waypoint1)_at(11:00)_concomit(dailyRoutine); // Concomitant 'dailyRoutine' will continue indefinitely until: stop_concomit(dailyRoutine); start_concomit(dailyRoutine); pause_concomit(dailyRoutine); resume_concomit(dailyRoutine); // (or start_...) end_concomit(dailyRoutine); ...for more information on concomits see concomit .","title":"_at"},{"location":"lexicon/condit/_indextopic/#_after","text":"The _after condit ion determines that the preceeding command(s) are executed after (and including) the date|datetime|time matching the given date|datetime|time or date_var|datetime_var|time_var` of the callee. The default syntax is _after( date|datetime|time ) , for example: // Robot 'alif' must maneuver to 'waypoint1' any time after 'alif's date matches the date|datetime|time set: go_robot(alif)_to(waypoint1)_after(12-Jun-2022); go_robot(alif)_to(waypoint1)_after(12-Jun-2022 11:00); go_robot(alif)_to(waypoint1)_after(11:00); Variables can be used with _after , for example: // Robot 'beh' must maneuver to 'waypoint1' anytime after 'beh's date matches the date|datetime|time variable 'pit': go_robot(beh)_to(waypoint1)_after[pit]; go_robot(beh)_to(waypoint1)_after([pit]); // same effect // The variable 'pit' can be converted inside the _after condit: go_robot(beh)_to(waypoint1)_after({time},[pit]); The _after condit can be converted to a concomit ant , for example: // Transfer _after to _concomit: go_robot(teh)_to(waypoint1)_after(11:00)_concomit(dailyRoutine); // Concomitant 'dailyRoutine' will continue indefinitely until: stop_concomit(dailyRoutine); start_concomit(dailyRoutine); pause_concomit(dailyRoutine); resume_concomit(dailyRoutine); // (or start_...) end_concomit(dailyRoutine); ...for more information on concomits see concomit .","title":"_after"},{"location":"lexicon/condit/_indextopic/#_during","text":"","title":"_during"},{"location":"lexicon/condit/_indextopic/#_before","text":"The _before condit ion determines that the preceeding command(s) are executed only before (and including) the date|datetime|time matching the given date|datetime|time or date_var|datetime_var|time_var` of the callee. To determine the extent of the 'before' logic, the callee will use the default set_start({ date_datatype|time_datatype , setting ) command, that the callee has learnt. The caller can (if granted), set and reset the start dates and start times. For example: set_start({date},01-Jan); set_start({time},00:00); reset_start[]; // reset start settings back to how they were before set reset_start(); // reset start settings to default reset_ The default syntax is _before( date|datetime|time ) , for example: // Robot 'alif' must maneuver to 'waypoint1' any time before 'alif's date matches the date|datetime|time set: go_robot(alif)_to(waypoint1)_before(12-Jun-2022); go_robot(alif)_to(waypoint1)_before(12-Jun-2022 11:00); go_robot(alif)_to(waypoint1)_before(11:00); Variables can be used with _before , for example: // Robot 'beh' must maneuver to 'waypoint1' anytime before 'beh's date matches the date|datetime|time variable 'pit': go_robot(beh)_to(waypoint1)_before[pit]; go_robot(beh)_to(waypoint1)_before([pit]); // same effect // The variable 'pit' can be converted inside the _before condit: go_robot(beh)_to(waypoint1)_before({time},[pit]); The _before condit can be converted to a concomit ant , for example: // Transfer _before to _concomit: go_robot(teh)_to(waypoint1)_before(11:00)_concomit(dailyRoutine); // Concomitant 'dailyRoutine' will continue indefinitely until: stop_concomit(dailyRoutine); start_concomit(dailyRoutine); pause_concomit(dailyRoutine); resume_concomit(dailyRoutine); // (or start_...) end_concomit(dailyRoutine); ...for more information on concomits see concomit . Sytnax Notes example _at[ date_var\\|datetime_var\\|time_var ] _at({ date_dt\\|datetime_dt\\|time_dt }, [ date_var\\|datetime_var\\|time_var ]) Condition that preceeding command(s) have a date|datetime|time matching the given date\\|datetime\\|time _from( date|datetime|time )_to( date|datetime|time ) _after( date|datetime|time ) _before( date|datetime|time ) _ago( value , unit ) or... _ago( value )_unit( unit )","title":"_before"},{"location":"lexicon/condit/_indextopic/#spatial-geo-spatial-conditions","text":"There are sevaral spatial/geo-spatal postposits available. Sytnax Notes example","title":"Spatial / Geo-spatial Conditions"},{"location":"lexicon/condit/_indextopic/#positions","text":"Position Notes _at({date|datetime|time}) _au({x},{y},{z}) _between({parameter_1})_and({parameter_2})_inclusive_() or _range({parameter_1})_and({parameter_2}) _between({parameter_1})_and({parameter_2}) _blob({blob_uuid}) _for({parameter_1}[,... {parameter_n}]) Provides focus on {parameter_1} ... {parameter_n) _fps({fps}) _from({date|datetime|time})_to({date|datetime|time}) _from({date|datetime|time}) _upto({date|datetime|time}) _in({duration}) _latency({latency}) _locus({x},{y},{name/uuid}) _locus({x},{y},{r},{name/uuid}) _locus({x1},{y1},{x2},{y2},{name/uuid}) _type({type}) _value({value}[, {unit}]) _blob({moniker/filename/uuid})","title":"Positions"},{"location":"lexicon/condit/_indextopic/#geometric","text":"add_geometric({name/uuid}) with_geometric({name/uuid}) _type({type}) _value({linear_x},{linear_y},{linear_x},{angular_x},{angular_y},{angular_z}) Geometric Types type Type Value accel Expresses acceleration in free space broken into its linear and angular parts. _value({linear_x},{linear_y},{linear_x},{angular_x},{angular_y},{angular_z}) accelcovar Expresses acceleration in free space with uncertainty. `_value({}) _for({parameter_1},... {parameter_n}) Provides focus on {parameter_1} ... {parameter_n) _between({parameter_1})_and({parameter_2}) Provides focus from {parameter_1} to {parameter_2} inclusive _between({parameter_1})_and({parameter_2})_exclusive() Provides focus from {parameter_1} to {parameter_2} exclusive label({label}); Caller assigns label {label} to the callee label({label}) _for({uuid/name}, ...); Assigns a label {label} to {uuid/name_1} ... {uuid/name_n} ping({uuid/name}); Tests of reachability between caller and {uuid/name} callee pong({uuid/name}): Return/result of a ping from caller pong({uuid/name}) _ttl({byte} Time To Live or hop limit of the lifespan or lifetime of data in the Diego universe _time({millsecs}); The latency in milliseconds of the ping messeage transmitted and then received back again ask(); Caller requests minimal (name and identification) data on the callee ask({uuid/name}); Caller requests minimal (name and identification) data on {uuid/name}; add_stat({stat_name}); Caller adds stat {stat_name} to callee; with_stat({stat_name}); add_stat() add_poll(); poll(); with_poll(); goto_point() go_route() tell() _uuid({uuid}) _name({name}) _manufact({manufacturer}) _make({make/brand}) _model({model_name}) _badge({badge/series}) _id()_serial_number({serial_number}) _id() ask_energy(); tell_energy({energy_value})_unit({unit_of_measure}); ask_energy({uuid/name}); ask() _for() _for({uuid/name}, ...); TAE40116_DEL_AT1_TP_v1_.pdf where {paramter_1} is expected to respond or ask(); ask({uuid}); ask()_for({human_uuid}); ask_human(); call_human({human_uuid}); call_human()_for({human_uuid}); ask_ai(); ask_ai({ai_uuid}); ask_ai()_for({ai_uuid}); ask_ai(); ask(); ask_organic(); ask_label(); ask_human(); ask_ai(); ask_gps({uuid/name})_freq({frequency}[,{unit}])_stopat({datetime})_until() call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_organic({organic_uuid}); call_organic()_for({organic_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Geometric"},{"location":"lexicon/condit/_indextopic/#navigation-positioning","text":"add_stat({moniker/uuid}) with_stat({moniker/uuid}) begin_stat({moniker/uuid}) - end_stat() end_stat({moniker/uuid}) - begin_stat() exec_stat({moniker/uuid}) - bump call_stat({moniker/uuid}) - here_stat start_stat({moniker/uuid}) - stop_stat stop_stat({moniker/uuid}) - go_stat pause_stat({moniker/uuid})","title":"Navigation &amp; Positioning"},{"location":"lexicon/condit/_indextopic/#system-commands","text":"system command Notes help() Provides the online help utility menu on system command line 'modules\" ## Informant, Informing, Proclaiming `proclaim_` By default a `proclaim_` will send out a proclamation without any delivery or receive receipt. `declare_` By default a `declare_` will send out a declaration expecting a delivery receipt. `inform_` By default a `inform_` will inform and except a delivery and receive receipt. ```diego add_var({datetime},pit)_value(12-Jun-2022 11:00); go_robot(beh)_to(waypoint1)_at[pit]; // <= 12-Jun-2022 11:00 - actually the pointer of the variable go_robot(beh)_to(waypoint1)_at([pit]); // <= 12-Jun-2022 11:00 - same, the value of the variable go_robot(beh)_to(waypoint1)_at(pit); // <= pit - error","title":"System Commands"},{"location":"lexicon/obj/discriminat/","text":"discriminat set_discrimat(progeny)_givento(begin)_appliedto(instruct)_value(false); *-","title":"`discriminat`"},{"location":"lexicon/obj/discriminat/#discriminat","text":"set_discrimat(progeny)_givento(begin)_appliedto(instruct)_value(false); *-","title":"discriminat"},{"location":"lexicon/obj/fail/","text":"Fail, Failure HL_FAILURE_FLAG with_fail(gnps_failure)_num(ff101)_mavlink(HL_FAILURE_FLAG,1); // General failure flags (ff###) set_fail()_truefortypeof(gen_fail); # General failure of GPNS: add_fail(gnps_failure)_uuid(25c29ec5-a5ac-4448-8b63-d529f1e7c0d0) _num(ff101)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_GPS,1) _err(General failure of GPNS)_type(gen_fail); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(gpns); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(gpns); # General failure of LPNS: add_fail(lnps_failure)_uuid(881fbae0-1bc6-492b-a7eb-ebf39e74ffcd) _num(ff102)_mavlink()_err(General failure of LPNS); with_fail(lnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(lpns); with_fail(lnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(lpns); # General failure of differential pressure sensor: add_fail(p_diff_failure)_uuid(95517c3a-f243-4772-a09e-f726c9aa8f29) _num(ff1)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE,2) _err(General failure of differential pressure sensor); with_fail(diffp_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(p_diff); # General failure of absolute pressure sensor: add_fail(abs_diff_failure)_uuid(096b2edc-3356-44fa-8789-64ca82aa6add) _num(ff1)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_ABSOLUTE_PRESSURE,4) _err(General failure of absolute pressure sensor); with_fail(abs_diff_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(abs_diff); telemet , telementry \"lorem ipsum\" add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); General Failure A general failure of a thingy (usually a sensor or actuat ) should be triggered set_fail()_truefortypeof(gen_fail); set add_fail(gnps_failure)_uuid(25c29ec5-a5ac-4448-8b63-d529f1e7c0d0) _num(ff101)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_GPS,1) _err(General failure of GPNS)_type(gen_fail); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(gpns); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(gpns); _fordiego(do) Only the do_diego command of the override is applied. _fordiego(hey) Only the hey_diego command of the override is applied. _appliedto({object_moinker|object_uuid}) The specified object(s) are overridden. _doto() _givento() _forwhat() _forwho() `_specificto({}) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(gpns); {do_diego_1} | {do_diego_2} ? {hey_diego_2} : {oh_diego_2} ? {hey_diego_1} : {oh_diego_1}; _fordeigo(do) | _fordiego(|do) | _fordiego(|hey) | _fordiego(|oh) | _fordiego(hey) | _fordiego(oh) {verb}_{object}({object_moinker})_{child_object}({child_moniker})_{postpos}({postpos_param})_{discrim_postpos}({discrim_moniker}) doto({verb}) | _appliedto({object}) | _paraquem({object_moinker}) | _givento({child_object}) | _forwhat({child_moniker}) | _specificto({postpos}) | _forwhy({postpos_param}) | _forwhom({discrim_moniker}) | _paraquem({object_moinker & discrim_moniker}) xdoto() begin_override(loiter_persian_chain)_doto(loiter)_paraquem(alif, be, pe); inc_override(loiter_persian_chain)_paraquem(alif, be, pe)_specificto(loiterat); with_loiter()_type(hover)_angvelocity(0, 0, -1.4)_unit(rads); end_override(loiter_persian_chain); exec_override(loiter_persian_chain)_for(alif, be, pe) https://www.autonodyne.com/AUTO_behaviors2.html#behave-swarm","title":"Fail, Failure"},{"location":"lexicon/obj/fail/#fail-failure","text":"HL_FAILURE_FLAG with_fail(gnps_failure)_num(ff101)_mavlink(HL_FAILURE_FLAG,1); // General failure flags (ff###) set_fail()_truefortypeof(gen_fail); # General failure of GPNS: add_fail(gnps_failure)_uuid(25c29ec5-a5ac-4448-8b63-d529f1e7c0d0) _num(ff101)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_GPS,1) _err(General failure of GPNS)_type(gen_fail); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(gpns); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(gpns); # General failure of LPNS: add_fail(lnps_failure)_uuid(881fbae0-1bc6-492b-a7eb-ebf39e74ffcd) _num(ff102)_mavlink()_err(General failure of LPNS); with_fail(lnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(lpns); with_fail(lnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(lpns); # General failure of differential pressure sensor: add_fail(p_diff_failure)_uuid(95517c3a-f243-4772-a09e-f726c9aa8f29) _num(ff1)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE,2) _err(General failure of differential pressure sensor); with_fail(diffp_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(p_diff); # General failure of absolute pressure sensor: add_fail(abs_diff_failure)_uuid(096b2edc-3356-44fa-8789-64ca82aa6add) _num(ff1)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_ABSOLUTE_PRESSURE,4) _err(General failure of absolute pressure sensor); with_fail(abs_diff_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(abs_diff); telemet , telementry \"lorem ipsum\" add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of ); add_fail(_failure)_num(ff1)_mavlink()_err(General failure of );","title":"Fail, Failure"},{"location":"lexicon/obj/fail/#general-failure","text":"A general failure of a thingy (usually a sensor or actuat ) should be triggered set_fail()_truefortypeof(gen_fail); set add_fail(gnps_failure)_uuid(25c29ec5-a5ac-4448-8b63-d529f1e7c0d0) _num(ff101)_mavlink(HL_FAILURE_FLAG,HL_FAILURE_FLAG_GPS,1) _err(General failure of GPNS)_type(gen_fail); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(gpns); with_fail(gnps_failure) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(gpns); _fordiego(do) Only the do_diego command of the override is applied. _fordiego(hey) Only the hey_diego command of the override is applied. _appliedto({object_moinker|object_uuid}) The specified object(s) are overridden. _doto() _givento() _forwhat() _forwho() `_specificto({}) _fordiego(oh)_doto(with,test,check)_appliedto(sensor)_forwhat(type)_forwho(gpns); {do_diego_1} | {do_diego_2} ? {hey_diego_2} : {oh_diego_2} ? {hey_diego_1} : {oh_diego_1}; _fordeigo(do) | _fordiego(|do) | _fordiego(|hey) | _fordiego(|oh) | _fordiego(hey) | _fordiego(oh) {verb}_{object}({object_moinker})_{child_object}({child_moniker})_{postpos}({postpos_param})_{discrim_postpos}({discrim_moniker}) doto({verb}) | _appliedto({object}) | _paraquem({object_moinker}) | _givento({child_object}) | _forwhat({child_moniker}) | _specificto({postpos}) | _forwhy({postpos_param}) | _forwhom({discrim_moniker}) | _paraquem({object_moinker & discrim_moniker}) xdoto() begin_override(loiter_persian_chain)_doto(loiter)_paraquem(alif, be, pe); inc_override(loiter_persian_chain)_paraquem(alif, be, pe)_specificto(loiterat); with_loiter()_type(hover)_angvelocity(0, 0, -1.4)_unit(rads); end_override(loiter_persian_chain); exec_override(loiter_persian_chain)_for(alif, be, pe) https://www.autonodyne.com/AUTO_behaviors2.html#behave-swarm","title":"General Failure"},{"location":"lexicon/obj/me/","text":"me me depicts the caller from its perspective. It is a special case object that can also be used as a verb. Options and postpositis of me are dependent on the genera of the caller (of the me ). me also has the required ' genesis event ' for every genera of thingy (excluding console ). Genesis Event me(); The simplest and recommended approach to starting the genesis event for a thingy is to just command me(); . However, there are several other anthropomorphic approaches to initiate the genesis event, if me(); has not already been commanded... me({moniker}); with_me({moniker}); me_id({id}); with_me()_id({id}); me_moniker({moniker}); with_me()_moinker({moinker}); me_name({name}); with_me()_name({name}); The genesis event can also be initiated by assigning its uuid , however, this approach cannot secure reliable uniqueness. me_uuid({uuid}); with_me()_uuid({uuid}); Identification me_id({id}); with_me()_id({id}); me_serialnum({serial_number}); with_me()_me_serialnum({serial_number}); me_id()_type({id_type})_value({id_value}); with_me()_id()_type({id_type})_value({id_value}); The id_type s available for the me_id()_type({id_type})... and with_me()_id()_type({ide_type}) are as follows: id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the me thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the me thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number for the me cellphone type mobot imei _type(imei)_value({imei}); International Mobile Equipment Identity for the me cellphone type mobot See also: _type (id) Children me_id()_type(serialnum)_value({serial_number}); me_id()_type(phonenum)_value({phone_number}); me_id()_type(phonenumber)_value({country_number},{region_number},{phone_number}); me_id()_type(imei)_value({imei}); Naming Event Syntax: me_name({name}); with_me()_name({name}); Birth Event Syntax: me_birth(); me_birth()_dateime({birth_datetime}); me_birthdate({birth_datetime}); me_coord({coord_system},{coord_universe},{birth_coords}); me_gps({birth_coords}); me_coord(gps,{coord_universe},{birth_coords}); me_lps({birth_coords}); me_coord(lps,{coord_universe},{birth_coords}); Genera Syntax: me_what({genus}); with_me()_genus({genus}); me_human(); with_me()_human(); me_ai(); with_me()_ai(); me_robot(); with_me()_robot(); me_thing(); with_me()_thing(); me_console(); with_me()_console(); Genus Default Rank Max Rank human O-2 Captain O President ai O-1 Officer O-8 Lieutenant robot O-1 Officer O-6 Director thing E-10 Cadet O-4 Commander console E-1 Intern E-1 Intern Rank Syntax: me_rank({rank}); See: set_rank for list of possible ranks. Death-Resurrection / Sleep-Wake Syntax: me_death(); me_death()_datetime({death_datetime}); me_resurrect(); me_death()_datetime({resrrect_datetime}); me_sleep(); me_sleep()_datetime({sleep_datetime}); me_wake(); me_wake()_datetime({wake_datetime}); See Also: progme ---- --- ----512ceaaa00ef ad43f779-74df-49d2-ad55-2e08c29278d4 28758a7c-7998-4e6e-b5e7-3e8615992cc3","title":"me"},{"location":"lexicon/obj/me/#me","text":"me depicts the caller from its perspective. It is a special case object that can also be used as a verb. Options and postpositis of me are dependent on the genera of the caller (of the me ). me also has the required ' genesis event ' for every genera of thingy (excluding console ).","title":"me"},{"location":"lexicon/obj/me/#genesis-event","text":"me(); The simplest and recommended approach to starting the genesis event for a thingy is to just command me(); . However, there are several other anthropomorphic approaches to initiate the genesis event, if me(); has not already been commanded... me({moniker}); with_me({moniker}); me_id({id}); with_me()_id({id}); me_moniker({moniker}); with_me()_moinker({moinker}); me_name({name}); with_me()_name({name}); The genesis event can also be initiated by assigning its uuid , however, this approach cannot secure reliable uniqueness. me_uuid({uuid}); with_me()_uuid({uuid});","title":"Genesis Event"},{"location":"lexicon/obj/me/#identification","text":"","title":"Identification"},{"location":"lexicon/obj/me/#_1","text":"me_id({id}); with_me()_id({id}); me_serialnum({serial_number}); with_me()_me_serialnum({serial_number}); me_id()_type({id_type})_value({id_value}); with_me()_id()_type({id_type})_value({id_value}); The id_type s available for the me_id()_type({id_type})... and with_me()_id()_type({ide_type}) are as follows: id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the me thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the me thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number for the me cellphone type mobot imei _type(imei)_value({imei}); International Mobile Equipment Identity for the me cellphone type mobot See also: _type (id)","title":""},{"location":"lexicon/obj/me/#children","text":"me_id()_type(serialnum)_value({serial_number}); me_id()_type(phonenum)_value({phone_number}); me_id()_type(phonenumber)_value({country_number},{region_number},{phone_number}); me_id()_type(imei)_value({imei});","title":"Children"},{"location":"lexicon/obj/me/#naming-event","text":"","title":"Naming Event"},{"location":"lexicon/obj/me/#syntax","text":"me_name({name}); with_me()_name({name});","title":"Syntax:"},{"location":"lexicon/obj/me/#birth-event","text":"","title":"Birth Event"},{"location":"lexicon/obj/me/#syntax_1","text":"me_birth(); me_birth()_dateime({birth_datetime}); me_birthdate({birth_datetime}); me_coord({coord_system},{coord_universe},{birth_coords}); me_gps({birth_coords}); me_coord(gps,{coord_universe},{birth_coords}); me_lps({birth_coords}); me_coord(lps,{coord_universe},{birth_coords});","title":"Syntax:"},{"location":"lexicon/obj/me/#genera","text":"","title":"Genera"},{"location":"lexicon/obj/me/#syntax_2","text":"me_what({genus}); with_me()_genus({genus}); me_human(); with_me()_human(); me_ai(); with_me()_ai(); me_robot(); with_me()_robot(); me_thing(); with_me()_thing(); me_console(); with_me()_console(); Genus Default Rank Max Rank human O-2 Captain O President ai O-1 Officer O-8 Lieutenant robot O-1 Officer O-6 Director thing E-10 Cadet O-4 Commander console E-1 Intern E-1 Intern","title":"Syntax:"},{"location":"lexicon/obj/me/#rank","text":"","title":"Rank"},{"location":"lexicon/obj/me/#syntax_3","text":"me_rank({rank}); See: set_rank for list of possible ranks.","title":"Syntax:"},{"location":"lexicon/obj/me/#death-resurrection-sleep-wake","text":"","title":"Death-Resurrection / Sleep-Wake"},{"location":"lexicon/obj/me/#syntax_4","text":"me_death(); me_death()_datetime({death_datetime}); me_resurrect(); me_death()_datetime({resrrect_datetime}); me_sleep(); me_sleep()_datetime({sleep_datetime}); me_wake(); me_wake()_datetime({wake_datetime});","title":"Syntax:"},{"location":"lexicon/obj/me/#see-also","text":"progme ---- --- ----512ceaaa00ef ad43f779-74df-49d2-ad55-2e08c29278d4 28758a7c-7998-4e6e-b5e7-3e8615992cc3","title":"See Also:"},{"location":"lexicon/obj/navigation_planning/","text":"Navigation Planning Navigation planning involves the declaration and execution of various components in order for a mobile thingy (a robot object) to travel in a designated way in the physical real world. Navigation Planning Objects There are various objects available for navigation planning in Diego , which can conveniently be depicted in the 'route matrix'... fig. 1 : Route Matrix Each column of the 'route matrix' are a 'family' of objects used for navigation planning. The left column (blue objects) represent the location only navigation planning objects. These objects require at least coordinates to be effective. From the bottom of the column up, the waypoint The object is representation of an intermediate physical point or place on a route or line of travel, or simply, a stopping point. Next is the path object, which in the strictest terms is a collection of two waypoints and their relationship to each other but only in terms of location. The route object is a collection of path s arranged in a logical order with relationships defined for each path . For each route object there are man path s. The itinerary is the top-most location-only navigation planning object. In a similar fashion to the location-only objects, the green objects have similar scope to their adjacent objects. The green object represent the orientation objects, that have location and orientation attributes. The excurs (ion) object has many course objects, each course object has many way objects, an each way object has usually two pose (or posepoint ) objects. The orange objects are known as the logging navigation planning objects, as they log the 'journey' between goal s. The tour object has many journey objects, each journey object has many trip objects, an each trip object has usually two goal s. The attributes if the logging navigation planning objects are location and orientation and time-logging. Navigation Planning Example To demostrate the various syntax available in Diego for navigation planning we are going to use a simple route long a curve of a road, intended for ground-based robots. The location is Aura Business Park, QLD, Australia, along Strong Road, an industrial/commercial zoned area. So first, we add the waypoint to appear as such: fig. 2: Strong Road, Aura Business Park - Waypoints Diego is a multi-discourse language, meaning there a many ways command can be structure/built. Therfore the example code shows multi approaches to adding waypoints to an itinerary... use_namespace(aura_business_park); begin_itinerary(strong_road); // maps heed_map(aura_business_park)_asglobal()_gnps()_measure(lat, long); // waypoints add_waypoint(w1)_coords(-26.803923, 153.069252); add_waypoint(w2, w3)_coords(-26,804316, 153.069225)_coords(=26.804465, 153,069238); add_waypoint()_geojson( { \"type\": \"Feature\", \"geometry\" : { \"type\": \"Point\" \"coordinates\": [-26.804596, 153.069332] }, \"properties\": { \"name\": \"w4\" } } )_dialect(std); add_coords(w5)_lat(-26.804673)_long(153,069491); add_waypoint(w5)_coords(w5)_elevat(37.2); add_array(w6)_value(-26.804711, 153.069783); add_waypoint(w6)_lat()_valof(w6[0])_long()_valof(w6[1]); ... To start, a namespace called aura_business_park is used to segregate object names from other experiences. Then to develop all the location-only navigation planning object (blue objects) they are encapsulated into an itinerary called strong_road . a add_waypoint( moniker|uuid )_point( x_lat , y_long , z_alt ); add_pose( moniker|uuid )_point( x_lat , y_long , z_alt )_orientat(( x , y , z , w ); add_pose( moniker|uuid )_waypoint( moniker|uuid )_orientat(( x , y , z , w ); add_goal( moniker|uuid )_point( x_lat , y_long , z_alt )_orientat(( x , y , z , w )_datetimein( datetime ); add_goal( moniker|uuid )_pose( moniker|uuid ); _posein( moniker|uuid ) _timein( datetime ) _datetimein( datetime ) _timeout( datetime ) _datetimeout( datetime ) _weather() _visitor() _orientatin() _orientatout() ```","title":"Navigation Planning"},{"location":"lexicon/obj/navigation_planning/#navigation-planning","text":"Navigation planning involves the declaration and execution of various components in order for a mobile thingy (a robot object) to travel in a designated way in the physical real world.","title":"Navigation Planning"},{"location":"lexicon/obj/navigation_planning/#navigation-planning-objects","text":"There are various objects available for navigation planning in Diego , which can conveniently be depicted in the 'route matrix'... fig. 1 : Route Matrix Each column of the 'route matrix' are a 'family' of objects used for navigation planning. The left column (blue objects) represent the location only navigation planning objects. These objects require at least coordinates to be effective. From the bottom of the column up, the waypoint The object is representation of an intermediate physical point or place on a route or line of travel, or simply, a stopping point. Next is the path object, which in the strictest terms is a collection of two waypoints and their relationship to each other but only in terms of location. The route object is a collection of path s arranged in a logical order with relationships defined for each path . For each route object there are man path s. The itinerary is the top-most location-only navigation planning object. In a similar fashion to the location-only objects, the green objects have similar scope to their adjacent objects. The green object represent the orientation objects, that have location and orientation attributes. The excurs (ion) object has many course objects, each course object has many way objects, an each way object has usually two pose (or posepoint ) objects. The orange objects are known as the logging navigation planning objects, as they log the 'journey' between goal s. The tour object has many journey objects, each journey object has many trip objects, an each trip object has usually two goal s. The attributes if the logging navigation planning objects are location and orientation and time-logging.","title":"Navigation Planning Objects"},{"location":"lexicon/obj/navigation_planning/#navigation-planning-example","text":"To demostrate the various syntax available in Diego for navigation planning we are going to use a simple route long a curve of a road, intended for ground-based robots. The location is Aura Business Park, QLD, Australia, along Strong Road, an industrial/commercial zoned area. So first, we add the waypoint to appear as such: fig. 2: Strong Road, Aura Business Park - Waypoints Diego is a multi-discourse language, meaning there a many ways command can be structure/built. Therfore the example code shows multi approaches to adding waypoints to an itinerary... use_namespace(aura_business_park); begin_itinerary(strong_road); // maps heed_map(aura_business_park)_asglobal()_gnps()_measure(lat, long); // waypoints add_waypoint(w1)_coords(-26.803923, 153.069252); add_waypoint(w2, w3)_coords(-26,804316, 153.069225)_coords(=26.804465, 153,069238); add_waypoint()_geojson( { \"type\": \"Feature\", \"geometry\" : { \"type\": \"Point\" \"coordinates\": [-26.804596, 153.069332] }, \"properties\": { \"name\": \"w4\" } } )_dialect(std); add_coords(w5)_lat(-26.804673)_long(153,069491); add_waypoint(w5)_coords(w5)_elevat(37.2); add_array(w6)_value(-26.804711, 153.069783); add_waypoint(w6)_lat()_valof(w6[0])_long()_valof(w6[1]); ... To start, a namespace called aura_business_park is used to segregate object names from other experiences. Then to develop all the location-only navigation planning object (blue objects) they are encapsulated into an itinerary called strong_road . a add_waypoint( moniker|uuid )_point( x_lat , y_long , z_alt ); add_pose( moniker|uuid )_point( x_lat , y_long , z_alt )_orientat(( x , y , z , w ); add_pose( moniker|uuid )_waypoint( moniker|uuid )_orientat(( x , y , z , w ); add_goal( moniker|uuid )_point( x_lat , y_long , z_alt )_orientat(( x , y , z , w )_datetimein( datetime ); add_goal( moniker|uuid )_pose( moniker|uuid ); _posein( moniker|uuid ) _timein( datetime ) _datetimein( datetime ) _timeout( datetime ) _datetimeout( datetime ) _weather() _visitor() _orientatin() _orientatout() ```","title":"Navigation Planning Example"},{"location":"lexicon/obj/ob_and_subs/","text":"ob s and sub s comob common object ob object sub subject poi point of interest roi region of interest","title":"`ob`s and `sub`s"},{"location":"lexicon/obj/ob_and_subs/#obs-and-subs","text":"comob common object ob object sub subject poi point of interest roi region of interest","title":"obs and subs"},{"location":"lexicon/obj/watchdog/","text":"watchdog _device device universal resource identifier _device(/dev/watchdog0 ) _id , _identity _timeout( timeout-value ) _timeout( timeout-value [, unit] ) _timeout( timeout-value )_unit( unit ) _pretimeout( pretimeout-value ) _pretimeout( pretimeout-value [, unit] ) _pretimeout( pretimeout-value )_unit( unit ) / SPDX-License-Identifier: GPL-2.0 / / * Generic watchdog defines. Derived from.. * * Berkshire PC Watchdog Defines * by Ken Hollis khollis@bitgate.com * / ifndef _LINUX_WATCHDOG_H define _LINUX_WATCHDOG_H include include include include include include struct watchdog_ops; struct watchdog_device; struct watchdog_core_data; struct watchdog_governor; / struct watchdog_ops - The watchdog-devices operations * * @owner: The module owner. * @start: The routine for starting the watchdog device. * @stop: The routine for stopping the watchdog device. * @ping: The routine that sends a keepalive ping to the watchdog device. * @status: The routine that shows the status of the watchdog device. * @set_timeout:The routine for setting the watchdog devices timeout value (in seconds). * @set_pretimeout:The routine for setting the watchdog devices pretimeout. * @get_timeleft:The routine that gets the time left before a reset (in seconds). * @restart: The routine for restarting the machine. * @ioctl: The routines that handles extra ioctl calls. * * The watchdog_ops structure contains a list of low-level operations * that control a watchdog device. It also contains the module that owns * these operations. The start and stop function are mandatory, all other * functions are optional. / struct watchdog_ops { struct module owner; / mandatory operations / int ( start)(struct watchdog_device ); int ( stop)(struct watchdog_device ); / optional operations / int ( ping)(struct watchdog_device ); unsigned int ( status)(struct watchdog_device ); int ( set_timeout)(struct watchdog_device , unsigned int); int ( set_pretimeout)(struct watchdog_device , unsigned int); unsigned int ( get_timeleft)(struct watchdog_device ); int ( restart)(struct watchdog_device , unsigned long, void ); long ( ioctl)(struct watchdog_device *, unsigned int, unsigned long); }; / struct watchdog_device - The structure that defines a watchdog device * * @id: The watchdog's ID. (Allocated by watchdog_register_device) * @parent: The parent bus device * @groups: List of sysfs attribute groups to create when creating the * watchdog device. * @info: Pointer to a watchdog_info structure. * @ops: Pointer to the list of watchdog operations. * @gov: Pointer to watchdog pretimeout governor. * @bootstatus: Status of the watchdog device at boot. * @timeout: The watchdog devices timeout value (in seconds). * @pretimeout: The watchdog devices pre_timeout value. * @min_timeout:The watchdog devices minimum timeout value (in seconds). * @max_timeout:The watchdog devices maximum timeout value (in seconds) * as configurable from user space. Only relevant if * max_hw_heartbeat_ms is not provided. * @min_hw_heartbeat_ms: * Hardware limit for minimum time between heartbeats, * in milli-seconds. * @max_hw_heartbeat_ms: * Hardware limit for maximum timeout, in milli-seconds. * Replaces max_timeout if specified. * @reboot_nb: The notifier block to stop watchdog on reboot. * @restart_nb: The notifier block to register a restart function. * @driver_data:Pointer to the drivers private data. * @wd_data: Pointer to watchdog core internal data. * @status: Field that contains the devices internal status bits. * @deferred: Entry in wtd_deferred_reg_list which is used to * register early initialized watchdogs. * * The watchdog_device structure contains all information about a * watchdog timer device. * * The driver-data field may not be accessed directly. It must be accessed * via the watchdog_set_drvdata and watchdog_get_drvdata helpers. / struct watchdog_device { int id; struct device parent; const struct attribute_group groups; const struct watchdog_info info; const struct watchdog_ops ops; const struct watchdog_governor gov; unsigned int bootstatus; unsigned int timeout; unsigned int pretimeout; unsigned int min_timeout; unsigned int max_timeout; unsigned int min_hw_heartbeat_ms; unsigned int max_hw_heartbeat_ms; struct notifier_block reboot_nb; struct notifier_block restart_nb; void driver_data; struct watchdog_core_data wd_data; unsigned long status; / Bit numbers for status flags */ define WDOG_ACTIVE 0 / Is the watchdog running/active / define WDOG_NO_WAY_OUT 1 / Is 'nowayout' feature set ? / define WDOG_STOP_ON_REBOOT 2 / Should be stopped on reboot / define WDOG_HW_RUNNING 3 / True if HW watchdog running / define WDOG_STOP_ON_UNREGISTER 4 / Should be stopped on unregister / struct list_head deferred; }; define WATCHDOG_NOWAYOUT IS_BUILTIN(CONFIG_WATCHDOG_NOWAYOUT) define WATCHDOG_NOWAYOUT_INIT_STATUS (WATCHDOG_NOWAYOUT << WDOG_NO_WAY_OUT) / Use the following function to check whether or not the watchdog is active / static inline bool watchdog_active(struct watchdog_device *wdd) { return test_bit(WDOG_ACTIVE, &wdd->status); } / * Use the following function to check whether or not the hardware watchdog * is running / static inline bool watchdog_hw_running(struct watchdog_device *wdd) { return test_bit(WDOG_HW_RUNNING, &wdd->status); } / Use the following function to set the nowayout feature / static inline void watchdog_set_nowayout(struct watchdog_device *wdd, bool nowayout) { if (nowayout) set_bit(WDOG_NO_WAY_OUT, &wdd->status); } / Use the following function to stop the watchdog on reboot / static inline void watchdog_stop_on_reboot(struct watchdog_device *wdd) { set_bit(WDOG_STOP_ON_REBOOT, &wdd->status); } / Use the following function to stop the watchdog when unregistering it / static inline void watchdog_stop_on_unregister(struct watchdog_device *wdd) { set_bit(WDOG_STOP_ON_UNREGISTER, &wdd->status); } / Use the following function to check if a timeout value is invalid / static inline bool watchdog_timeout_invalid(struct watchdog_device wdd, unsigned int t) { / * The timeout is invalid if * - the requested value is larger than UINT_MAX / 1000 * (since internal calculations are done in milli-seconds), * or * - the requested value is smaller than the configured minimum timeout, * or * - a maximum hardware timeout is not configured, a maximum timeout * is configured, and the requested value is larger than the * configured maximum timeout. */ return t > UINT_MAX / 1000 || t < wdd->min_timeout || (!wdd->max_hw_heartbeat_ms && wdd->max_timeout && t > wdd->max_timeout); } / Use the following function to check if a pretimeout value is invalid / static inline bool watchdog_pretimeout_invalid(struct watchdog_device *wdd, unsigned int t) { return t && wdd->timeout && t >= wdd->timeout; } / Use the following functions to manipulate watchdog driver specific data / static inline void watchdog_set_drvdata(struct watchdog_device wdd, void data) { wdd->driver_data = data; } static inline void watchdog_get_drvdata(struct watchdog_device wdd) { return wdd->driver_data; } / Use the following functions to report watchdog pretimeout event / if IS_ENABLED(CONFIG_WATCHDOG_PRETIMEOUT_GOV) void watchdog_notify_pretimeout(struct watchdog_device *wdd); else static inline void watchdog_notify_pretimeout(struct watchdog_device *wdd) { pr_alert(\"watchdog%d: pretimeout event\\n\", wdd->id); } endif / drivers/watchdog/watchdog_core.c / void watchdog_set_restart_priority(struct watchdog_device wdd, int priority); extern int watchdog_init_timeout(struct watchdog_device wdd, unsigned int timeout_parm, struct device dev); extern int watchdog_register_device(struct watchdog_device ); extern void watchdog_unregister_device(struct watchdog_device *); / devres register variant / int devm_watchdog_register_device(struct device dev, struct watchdog_device ); endif / ifndef _LINUX_WATCHDOG_H / [ xi + xj + 0] x(x+dx) x(y+dy) x1 y(x+dx) y(y+dy) y1 Add the matrices. [1\u2212453]+[24\u22121\u22121] First note that both addends are 2\u00d72 matrices, so we can add them. [1\u2212453]+[24\u22121\u22121]=[1+2\u22124+45+(\u22121)3+(\u22121)] =[3042] 1 | 0.8 0 0 | 1 5 0,5 (1 0)+(0.8 5),(0 0)+(1 5) 4,5 3,5 (1 3)+(0.8 5),(0 0)+(1 5) 7,5 (1 0)+(0.8 1) (1 1)+(0.8 0) (0 0)+(1 1) (0 1)+(1 0) 0.8 1 1 0 1 0 0 0 1 0 0.5 0.2 1 3,5,2 x = (3 1)+(5 0)+(2 0.5) = 4 y = (3 0)+(5 1)+(2 0.2) = 5.4 z = (3 0)+(5 0)+(2*1) = 2 4,5.4,2 robot ... _config(humanoid|quad)","title":"watchdog"},{"location":"lexicon/obj/watchdog/#watchdog","text":"_device device universal resource identifier _device(/dev/watchdog0 ) _id , _identity _timeout( timeout-value ) _timeout( timeout-value [, unit] ) _timeout( timeout-value )_unit( unit ) _pretimeout( pretimeout-value ) _pretimeout( pretimeout-value [, unit] ) _pretimeout( pretimeout-value )_unit( unit ) / SPDX-License-Identifier: GPL-2.0 / / * Generic watchdog defines. Derived from.. * * Berkshire PC Watchdog Defines * by Ken Hollis khollis@bitgate.com * /","title":"watchdog"},{"location":"lexicon/obj/watchdog/#ifndef-_linux_watchdog_h","text":"","title":"ifndef _LINUX_WATCHDOG_H"},{"location":"lexicon/obj/watchdog/#define-_linux_watchdog_h","text":"","title":"define _LINUX_WATCHDOG_H"},{"location":"lexicon/obj/watchdog/#include","text":"","title":"include "},{"location":"lexicon/obj/watchdog/#include_1","text":"","title":"include "},{"location":"lexicon/obj/watchdog/#include_2","text":"","title":"include "},{"location":"lexicon/obj/watchdog/#include_3","text":"","title":"include "},{"location":"lexicon/obj/watchdog/#include_4","text":"","title":"include "},{"location":"lexicon/obj/watchdog/#include_5","text":"struct watchdog_ops; struct watchdog_device; struct watchdog_core_data; struct watchdog_governor; / struct watchdog_ops - The watchdog-devices operations * * @owner: The module owner. * @start: The routine for starting the watchdog device. * @stop: The routine for stopping the watchdog device. * @ping: The routine that sends a keepalive ping to the watchdog device. * @status: The routine that shows the status of the watchdog device. * @set_timeout:The routine for setting the watchdog devices timeout value (in seconds). * @set_pretimeout:The routine for setting the watchdog devices pretimeout. * @get_timeleft:The routine that gets the time left before a reset (in seconds). * @restart: The routine for restarting the machine. * @ioctl: The routines that handles extra ioctl calls. * * The watchdog_ops structure contains a list of low-level operations * that control a watchdog device. It also contains the module that owns * these operations. The start and stop function are mandatory, all other * functions are optional. / struct watchdog_ops { struct module owner; / mandatory operations / int ( start)(struct watchdog_device ); int ( stop)(struct watchdog_device ); / optional operations / int ( ping)(struct watchdog_device ); unsigned int ( status)(struct watchdog_device ); int ( set_timeout)(struct watchdog_device , unsigned int); int ( set_pretimeout)(struct watchdog_device , unsigned int); unsigned int ( get_timeleft)(struct watchdog_device ); int ( restart)(struct watchdog_device , unsigned long, void ); long ( ioctl)(struct watchdog_device *, unsigned int, unsigned long); }; / struct watchdog_device - The structure that defines a watchdog device * * @id: The watchdog's ID. (Allocated by watchdog_register_device) * @parent: The parent bus device * @groups: List of sysfs attribute groups to create when creating the * watchdog device. * @info: Pointer to a watchdog_info structure. * @ops: Pointer to the list of watchdog operations. * @gov: Pointer to watchdog pretimeout governor. * @bootstatus: Status of the watchdog device at boot. * @timeout: The watchdog devices timeout value (in seconds). * @pretimeout: The watchdog devices pre_timeout value. * @min_timeout:The watchdog devices minimum timeout value (in seconds). * @max_timeout:The watchdog devices maximum timeout value (in seconds) * as configurable from user space. Only relevant if * max_hw_heartbeat_ms is not provided. * @min_hw_heartbeat_ms: * Hardware limit for minimum time between heartbeats, * in milli-seconds. * @max_hw_heartbeat_ms: * Hardware limit for maximum timeout, in milli-seconds. * Replaces max_timeout if specified. * @reboot_nb: The notifier block to stop watchdog on reboot. * @restart_nb: The notifier block to register a restart function. * @driver_data:Pointer to the drivers private data. * @wd_data: Pointer to watchdog core internal data. * @status: Field that contains the devices internal status bits. * @deferred: Entry in wtd_deferred_reg_list which is used to * register early initialized watchdogs. * * The watchdog_device structure contains all information about a * watchdog timer device. * * The driver-data field may not be accessed directly. It must be accessed * via the watchdog_set_drvdata and watchdog_get_drvdata helpers. / struct watchdog_device { int id; struct device parent; const struct attribute_group groups; const struct watchdog_info info; const struct watchdog_ops ops; const struct watchdog_governor gov; unsigned int bootstatus; unsigned int timeout; unsigned int pretimeout; unsigned int min_timeout; unsigned int max_timeout; unsigned int min_hw_heartbeat_ms; unsigned int max_hw_heartbeat_ms; struct notifier_block reboot_nb; struct notifier_block restart_nb; void driver_data; struct watchdog_core_data wd_data; unsigned long status; / Bit numbers for status flags */","title":"include "},{"location":"lexicon/obj/watchdog/#define-wdog_active-0-is-the-watchdog-runningactive","text":"","title":"define WDOG_ACTIVE     0   / Is the watchdog running/active /"},{"location":"lexicon/obj/watchdog/#define-wdog_no_way_out-1-is-nowayout-feature-set","text":"","title":"define WDOG_NO_WAY_OUT     1   / Is 'nowayout' feature set ? /"},{"location":"lexicon/obj/watchdog/#define-wdog_stop_on_reboot-2-should-be-stopped-on-reboot","text":"","title":"define WDOG_STOP_ON_REBOOT 2   / Should be stopped on reboot /"},{"location":"lexicon/obj/watchdog/#define-wdog_hw_running-3-true-if-hw-watchdog-running","text":"","title":"define WDOG_HW_RUNNING     3   / True if HW watchdog running /"},{"location":"lexicon/obj/watchdog/#define-wdog_stop_on_unregister-4-should-be-stopped-on-unregister","text":"struct list_head deferred; };","title":"define WDOG_STOP_ON_UNREGISTER 4   / Should be stopped on unregister /"},{"location":"lexicon/obj/watchdog/#define-watchdog_nowayout-is_builtinconfig_watchdog_nowayout","text":"","title":"define WATCHDOG_NOWAYOUT       IS_BUILTIN(CONFIG_WATCHDOG_NOWAYOUT)"},{"location":"lexicon/obj/watchdog/#define-watchdog_nowayout_init_status-watchdog_nowayout-wdog_no_way_out","text":"/ Use the following function to check whether or not the watchdog is active / static inline bool watchdog_active(struct watchdog_device *wdd) { return test_bit(WDOG_ACTIVE, &wdd->status); } / * Use the following function to check whether or not the hardware watchdog * is running / static inline bool watchdog_hw_running(struct watchdog_device *wdd) { return test_bit(WDOG_HW_RUNNING, &wdd->status); } / Use the following function to set the nowayout feature / static inline void watchdog_set_nowayout(struct watchdog_device *wdd, bool nowayout) { if (nowayout) set_bit(WDOG_NO_WAY_OUT, &wdd->status); } / Use the following function to stop the watchdog on reboot / static inline void watchdog_stop_on_reboot(struct watchdog_device *wdd) { set_bit(WDOG_STOP_ON_REBOOT, &wdd->status); } / Use the following function to stop the watchdog when unregistering it / static inline void watchdog_stop_on_unregister(struct watchdog_device *wdd) { set_bit(WDOG_STOP_ON_UNREGISTER, &wdd->status); } / Use the following function to check if a timeout value is invalid / static inline bool watchdog_timeout_invalid(struct watchdog_device wdd, unsigned int t) { / * The timeout is invalid if * - the requested value is larger than UINT_MAX / 1000 * (since internal calculations are done in milli-seconds), * or * - the requested value is smaller than the configured minimum timeout, * or * - a maximum hardware timeout is not configured, a maximum timeout * is configured, and the requested value is larger than the * configured maximum timeout. */ return t > UINT_MAX / 1000 || t < wdd->min_timeout || (!wdd->max_hw_heartbeat_ms && wdd->max_timeout && t > wdd->max_timeout); } / Use the following function to check if a pretimeout value is invalid / static inline bool watchdog_pretimeout_invalid(struct watchdog_device *wdd, unsigned int t) { return t && wdd->timeout && t >= wdd->timeout; } / Use the following functions to manipulate watchdog driver specific data / static inline void watchdog_set_drvdata(struct watchdog_device wdd, void data) { wdd->driver_data = data; } static inline void watchdog_get_drvdata(struct watchdog_device wdd) { return wdd->driver_data; } / Use the following functions to report watchdog pretimeout event /","title":"define WATCHDOG_NOWAYOUT_INIT_STATUS   (WATCHDOG_NOWAYOUT &lt;&lt; WDOG_NO_WAY_OUT)"},{"location":"lexicon/obj/watchdog/#if-is_enabledconfig_watchdog_pretimeout_gov","text":"void watchdog_notify_pretimeout(struct watchdog_device *wdd);","title":"if IS_ENABLED(CONFIG_WATCHDOG_PRETIMEOUT_GOV)"},{"location":"lexicon/obj/watchdog/#else","text":"static inline void watchdog_notify_pretimeout(struct watchdog_device *wdd) { pr_alert(\"watchdog%d: pretimeout event\\n\", wdd->id); }","title":"else"},{"location":"lexicon/obj/watchdog/#endif","text":"/ drivers/watchdog/watchdog_core.c / void watchdog_set_restart_priority(struct watchdog_device wdd, int priority); extern int watchdog_init_timeout(struct watchdog_device wdd, unsigned int timeout_parm, struct device dev); extern int watchdog_register_device(struct watchdog_device ); extern void watchdog_unregister_device(struct watchdog_device *); / devres register variant / int devm_watchdog_register_device(struct device dev, struct watchdog_device );","title":"endif"},{"location":"lexicon/obj/watchdog/#endif-ifndef-_linux_watchdog_h","text":"[ xi + xj + 0] x(x+dx) x(y+dy) x1 y(x+dx) y(y+dy) y1 Add the matrices. [1\u2212453]+[24\u22121\u22121] First note that both addends are 2\u00d72 matrices, so we can add them. [1\u2212453]+[24\u22121\u22121]=[1+2\u22124+45+(\u22121)3+(\u22121)] =[3042] 1 | 0.8 0 0 | 1 5 0,5 (1 0)+(0.8 5),(0 0)+(1 5) 4,5 3,5 (1 3)+(0.8 5),(0 0)+(1 5) 7,5 (1 0)+(0.8 1) (1 1)+(0.8 0) (0 0)+(1 1) (0 1)+(1 0) 0.8 1 1 0 1 0 0 0 1 0 0.5 0.2 1 3,5,2 x = (3 1)+(5 0)+(2 0.5) = 4 y = (3 0)+(5 1)+(2 0.2) = 5.4 z = (3 0)+(5 0)+(2*1) = 2 4,5.4,2 robot ... _config(humanoid|quad)","title":"endif  / ifndef _LINUX_WATCHDOG_H /"},{"location":"lexicon/thgy/_atozindex/","text":"b {object} description examples API c {object} description examples API d {object} description examples API doorbell {verb}_thing({moniker|uuid})_type(doorbell); Amazon Das Button doorbell l {object} description references lock {verb}_thing({moniker|uuid})_type(lock); lock lamp {verb}_thing({moniker|uuid})_type(lamp); lamp p {object} description references personal robot {verb}_robot({moniker|uuid})_type(personal_robot); Kuni Mobile Robot personal_robot printer {verb}_thing({moniker|uuid})_type(printer); printer s {object} description examples references Smart Speaker {verb}_thing({moniker|uuid})_type(smart_speaker); or {verb}_thing({moniker|uuid})_type(voice_controller); Google Home Mini; Google Nest Mini; Amazon Echo smart_speaker switch {verb}_thing({moniker|uuid})_type(switch); watch {verb}_mobot({moniker|uuid})_type(watch); speaker {verb}_thing({moniker|uuid})_type(speaker); | || bot , ai | A construct present in the metaphysical world only. (Artificial Intelligence) Example: cal , ChatBot | bot | | console | A metaphysical presence used to only provide an interface to all other thingies | console | | human | Representation of a human being, present and alive in the physical 'real' world. The human version of a thing / robot . The non-human version of an organic . Example: Fred Jones | human | | me | Representation of self | me | | mobot | A conveyed thingy in the physical 'real' world. Examples: Samasung Galaxy watch, cellphone | mobot | | organic | Representation of a non-human being, present and alive in the physical 'real' world. Example: cat, dog | organic | | robot | A self-propelled thingy in the physical 'real' world. Examples: Boston Dynamics Spot, robot arm, drone See also: human ; thing | robot | thing | An immobile thingy in the physical 'real' world. Example: fridge, television | thing | | vehicle | A guided thingy transporting human / organic thingies and/or controlled by a human . Examples: car, airplane, ugv, radio-controlled toy car | vehicle | | thingy | | thingy | _generat({generation}); _","title":" atozindex"},{"location":"metaphysic/metaphysic/","text":"Metaphysic The term metaphysic is used to define statements in diego that represent meta-physical objects and events, such as swarm formations, communication, gaits, etc. Swarming Any swarming characteristcs use particular metaphysic reprentations in diego , such as: flowchart TD swarm(swarm) formation(form) merge(merge) Swarming Behaviour Any behaviour characteristcs use particular metaphysic reprentations in diego , such as: flowchart TD behavi(behavi) gait(gait) Behaviour Communication Any behaviour characteristcs use particular metaphysic reprentations in diego , such as: flowchart TD msg(msg) alert(alert) display(display) Communication See Also Topological Index of Metaphysic Objects A to Z Index of Metaphysic Objects Swarming swarm form merge Behaviour behavi gait Commuincation msg alert display Notes There are some fringe thingy types such as mech , applian , mach , and, vehicle . \u21a9 Smart devices are can also be treated a sobot s. \u21a9","title":"Metaphysic"},{"location":"metaphysic/metaphysic/#metaphysic","text":"The term metaphysic is used to define statements in diego that represent meta-physical objects and events, such as swarm formations, communication, gaits, etc.","title":"Metaphysic"},{"location":"metaphysic/metaphysic/#swarming","text":"Any swarming characteristcs use particular metaphysic reprentations in diego , such as: flowchart TD swarm(swarm) formation(form) merge(merge) Swarming","title":"Swarming"},{"location":"metaphysic/metaphysic/#behaviour","text":"Any behaviour characteristcs use particular metaphysic reprentations in diego , such as: flowchart TD behavi(behavi) gait(gait) Behaviour","title":"Behaviour"},{"location":"metaphysic/metaphysic/#communication","text":"Any behaviour characteristcs use particular metaphysic reprentations in diego , such as: flowchart TD msg(msg) alert(alert) display(display) Communication","title":"Communication"},{"location":"metaphysic/metaphysic/#see-also","text":"Topological Index of Metaphysic Objects A to Z Index of Metaphysic Objects","title":"See Also"},{"location":"metaphysic/metaphysic/#swarming_1","text":"swarm form merge","title":"Swarming"},{"location":"metaphysic/metaphysic/#behaviour_1","text":"behavi gait","title":"Behaviour"},{"location":"metaphysic/metaphysic/#commuincation","text":"msg alert display","title":"Commuincation"},{"location":"metaphysic/metaphysic/#notes","text":"There are some fringe thingy types such as mech , applian , mach , and, vehicle . \u21a9 Smart devices are can also be treated a sobot s. \u21a9","title":"Notes"},{"location":"metaphysic/condit/around/","text":"Around (condit) | _around() | Reference to a zone of preceeding object defined by proceeding object | around | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Around (condit)"},{"location":"metaphysic/condit/around/#around-condit","text":"| _around() | Reference to a zone of preceeding object defined by proceeding object | around |","title":"Around (condit)"},{"location":"metaphysic/condit/around/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/condit/around/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/condit/around/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/condit/around/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/condit/around/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/condit/around/#typing","text":"","title":"Typing"},{"location":"metaphysic/condit/around/#getting","text":"","title":"Getting"},{"location":"metaphysic/condit/around/#setting","text":"","title":"Setting"},{"location":"metaphysic/condit/around/#casting","text":"","title":"Casting"},{"location":"metaphysic/condit/around/#properties","text":"","title":"Properties"},{"location":"metaphysic/condit/around/#examples","text":"","title":"Examples"},{"location":"metaphysic/condit/to/","text":"To (condit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"To (condit)"},{"location":"metaphysic/condit/to/#to-condit","text":"","title":"To (condit)"},{"location":"metaphysic/condit/to/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/condit/to/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/condit/to/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/condit/to/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/condit/to/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/condit/to/#typing","text":"","title":"Typing"},{"location":"metaphysic/condit/to/#getting","text":"","title":"Getting"},{"location":"metaphysic/condit/to/#setting","text":"","title":"Setting"},{"location":"metaphysic/condit/to/#casting","text":"","title":"Casting"},{"location":"metaphysic/condit/to/#properties","text":"","title":"Properties"},{"location":"metaphysic/condit/to/#examples","text":"","title":"Examples"},{"location":"metaphysic/condit/toward/","text":"Toward / Towards (condit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Toward / Towards (condit)"},{"location":"metaphysic/condit/toward/#toward-towards-condit","text":"","title":"Toward / Towards (condit)"},{"location":"metaphysic/condit/toward/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/condit/toward/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/condit/toward/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/condit/toward/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/condit/toward/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/condit/toward/#typing","text":"","title":"Typing"},{"location":"metaphysic/condit/toward/#getting","text":"","title":"Getting"},{"location":"metaphysic/condit/toward/#setting","text":"","title":"Setting"},{"location":"metaphysic/condit/toward/#casting","text":"","title":"Casting"},{"location":"metaphysic/condit/toward/#properties","text":"","title":"Properties"},{"location":"metaphysic/condit/toward/#examples","text":"","title":"Examples"},{"location":"metaphysic/condit/using/","text":"Using (condit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Using (condit)"},{"location":"metaphysic/condit/using/#using-condit","text":"","title":"Using (condit)"},{"location":"metaphysic/condit/using/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/condit/using/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/condit/using/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/condit/using/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/condit/using/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/condit/using/#typing","text":"","title":"Typing"},{"location":"metaphysic/condit/using/#getting","text":"","title":"Getting"},{"location":"metaphysic/condit/using/#setting","text":"","title":"Setting"},{"location":"metaphysic/condit/using/#casting","text":"","title":"Casting"},{"location":"metaphysic/condit/using/#properties","text":"","title":"Properties"},{"location":"metaphysic/condit/using/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/dd/","text":"Decimal Degrees (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Decimal Degrees (unit)"},{"location":"metaphysic/dt/dd/#decimal-degrees-unit","text":"","title":"Decimal Degrees (unit)"},{"location":"metaphysic/dt/dd/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/dd/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/dd/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/dd/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/dd/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/dd/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/dd/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/dd/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/dd/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/dd/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/dd/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/dm/","text":"Decimetres (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Decimetres (unit)"},{"location":"metaphysic/dt/dm/#decimetres-unit","text":"","title":"Decimetres (unit)"},{"location":"metaphysic/dt/dm/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/dm/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/dm/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/dm/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/dm/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/dm/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/dm/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/dm/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/dm/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/dm/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/dm/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/dms/","text":"Degrees, Minutes, Seconds (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Degrees, Minutes, Seconds (unit)"},{"location":"metaphysic/dt/dms/#degrees-minutes-seconds-unit","text":"","title":"Degrees, Minutes, Seconds (unit)"},{"location":"metaphysic/dt/dms/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/dms/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/dms/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/dms/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/dms/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/dms/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/dms/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/dms/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/dms/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/dms/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/dms/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/ft/","text":"Feet (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Feet (unit)"},{"location":"metaphysic/dt/ft/#feet-unit","text":"","title":"Feet (unit)"},{"location":"metaphysic/dt/ft/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/ft/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/ft/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/ft/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/ft/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/ft/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/ft/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/ft/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/ft/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/ft/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/ft/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/imperial/","text":"Imperial Units (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Imperial Units (unit)"},{"location":"metaphysic/dt/imperial/#imperial-units-unit","text":"","title":"Imperial Units (unit)"},{"location":"metaphysic/dt/imperial/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/imperial/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/imperial/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/imperial/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/imperial/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/imperial/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/imperial/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/imperial/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/imperial/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/imperial/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/imperial/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/inch/","text":"Inch (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Inch (unit)"},{"location":"metaphysic/dt/inch/#inch-unit","text":"","title":"Inch (unit)"},{"location":"metaphysic/dt/inch/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/inch/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/inch/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/inch/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/inch/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/inch/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/inch/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/inch/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/inch/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/inch/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/inch/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/kt/","text":"Knots (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Knots (unit)"},{"location":"metaphysic/dt/kt/#knots-unit","text":"","title":"Knots (unit)"},{"location":"metaphysic/dt/kt/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/kt/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/kt/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/kt/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/kt/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/kt/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/kt/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/kt/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/kt/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/kt/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/kt/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/league/","text":"League (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"League (unit)"},{"location":"metaphysic/dt/league/#league-unit","text":"","title":"League (unit)"},{"location":"metaphysic/dt/league/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/league/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/league/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/league/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/league/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/league/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/league/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/league/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/league/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/league/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/league/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/lmh/","text":"Low-Medium-High (datatype) {datatype} enumerators API {lmh_3} low , medium , high , , lmh_3 {lmh_4} low , low-medium , medium-high , high , , , lmh_4 {lmh_5} lowest , low , med , high , highest , , , , lmh_5 {lmh_6} lowest , low , low-medium , medium-high , high , highest , , , , , lmh_6 {lmh_7} lowest , low , low-medium , medium , medium-high , high , highest , , , , , , lmh_7 Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Low-Medium-High (datatype)"},{"location":"metaphysic/dt/lmh/#low-medium-high-datatype","text":"{datatype} enumerators API {lmh_3} low , medium , high , , lmh_3 {lmh_4} low , low-medium , medium-high , high , , , lmh_4 {lmh_5} lowest , low , med , high , highest , , , , lmh_5 {lmh_6} lowest , low , low-medium , medium-high , high , highest , , , , , lmh_6 {lmh_7} lowest , low , low-medium , medium , medium-high , high , highest , , , , , , lmh_7","title":"Low-Medium-High (datatype)"},{"location":"metaphysic/dt/lmh/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/lmh/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/lmh/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/lmh/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/lmh/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/lmh/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/lmh/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/lmh/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/lmh/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/lmh/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/lmh/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/m/","text":"SI Units of Length (unit) The International System of Units for length has their own unit declarations or casting. Micrometre (unit) A unit of length in the International System of Units ( SI ), equal to 1\u00d710\u207b\u2076 metre, that is, one millionth of a metre (or one thousandth of a millimetre, 0.001 mm, or about 0.00004 inch). The SI unit symbol is \u03bcm. Syntax Use the {\u03bcm} or {micrometre} or {micron} syntax to define or cast of a micrometre unit. Millimetre (unit) A unit of length in the International System of Units ( SI ), equal o one thousandth of a metre. Therefore, there are one thousand millimetres in a metre. There are ten millimetres in a centimetre. The SI unit symbol is mm. Syntax Use the {mm} or {millimetre} syntax to define or cast of a millmetre unit. Metre (unit) The base unit of length in the International System of Units ( SI ). The SI unit symbol is m. Syntax Use the {m} or {metre} syntax to define or cast of a metre unit. Example The following function returns e: me_msg()_path(wp1_wp2)_distan({m}); // 2.71m Hectometre (unit) A unit of length in the International System of Units ( SI ), equal to one hundred metres. The SI unit symbol is hm. Syntax Use the {hm} or {hectometre} syntax to define or cast of a hectometre unit. Kilometre (unit) unit of length in the International System of Units ( SI ), equal to one thousand metres. It is now the measurement unit used for expressing distances between geographical places on land in most of the world. Syntax Use the {km} or {klick} or {kilometre} syntax to define or cast of a kilmetre unit. References See also: thou ; inch ; ft ; yrd ; mile Non-SI Units of Length https://en.wikipedia.org/wiki/Unit_of_length#SI Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"SI Units of Length (unit)"},{"location":"metaphysic/dt/m/#si-units-of-length-unit","text":"The International System of Units for length has their own unit declarations or casting.","title":"SI Units of Length (unit)"},{"location":"metaphysic/dt/m/#micrometre-unit","text":"A unit of length in the International System of Units ( SI ), equal to 1\u00d710\u207b\u2076 metre, that is, one millionth of a metre (or one thousandth of a millimetre, 0.001 mm, or about 0.00004 inch). The SI unit symbol is \u03bcm.","title":"Micrometre (unit)"},{"location":"metaphysic/dt/m/#syntax","text":"Use the {\u03bcm} or {micrometre} or {micron} syntax to define or cast of a micrometre unit.","title":"Syntax"},{"location":"metaphysic/dt/m/#millimetre-unit","text":"A unit of length in the International System of Units ( SI ), equal o one thousandth of a metre. Therefore, there are one thousand millimetres in a metre. There are ten millimetres in a centimetre. The SI unit symbol is mm.","title":"Millimetre (unit)"},{"location":"metaphysic/dt/m/#syntax_1","text":"Use the {mm} or {millimetre} syntax to define or cast of a millmetre unit.","title":"Syntax"},{"location":"metaphysic/dt/m/#metre-unit","text":"The base unit of length in the International System of Units ( SI ). The SI unit symbol is m.","title":"Metre (unit)"},{"location":"metaphysic/dt/m/#syntax_2","text":"Use the {m} or {metre} syntax to define or cast of a metre unit.","title":"Syntax"},{"location":"metaphysic/dt/m/#example","text":"The following function returns e: me_msg()_path(wp1_wp2)_distan({m}); // 2.71m","title":"Example"},{"location":"metaphysic/dt/m/#hectometre-unit","text":"A unit of length in the International System of Units ( SI ), equal to one hundred metres. The SI unit symbol is hm.","title":"Hectometre (unit)"},{"location":"metaphysic/dt/m/#syntax_3","text":"Use the {hm} or {hectometre} syntax to define or cast of a hectometre unit.","title":"Syntax"},{"location":"metaphysic/dt/m/#kilometre-unit","text":"unit of length in the International System of Units ( SI ), equal to one thousand metres. It is now the measurement unit used for expressing distances between geographical places on land in most of the world.","title":"Kilometre (unit)"},{"location":"metaphysic/dt/m/#syntax_4","text":"Use the {km} or {klick} or {kilometre} syntax to define or cast of a kilmetre unit.","title":"Syntax"},{"location":"metaphysic/dt/m/#references","text":"See also: thou ; inch ; ft ; yrd ; mile Non-SI Units of Length https://en.wikipedia.org/wiki/Unit_of_length#SI","title":"References"},{"location":"metaphysic/dt/m/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/m/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/m/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/m/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/m/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/m/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/m/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/m/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/m/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/m/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/m/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/num/","text":"Number (property) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Number (property)"},{"location":"metaphysic/dt/num/#number-property","text":"","title":"Number (property)"},{"location":"metaphysic/dt/num/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/num/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/num/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/num/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/num/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/num/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/num/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/num/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/num/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/num/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/num/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/rad/","text":"Radians (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Radians (unit)"},{"location":"metaphysic/dt/rad/#radians-unit","text":"","title":"Radians (unit)"},{"location":"metaphysic/dt/rad/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/rad/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/rad/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/rad/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/rad/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/rad/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/rad/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/rad/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/rad/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/rad/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/rad/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/si/","text":"International System of Units (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"International System of Units (unit)"},{"location":"metaphysic/dt/si/#international-system-of-units-unit","text":"","title":"International System of Units (unit)"},{"location":"metaphysic/dt/si/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/si/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/si/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/si/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/si/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/si/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/si/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/si/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/si/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/si/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/si/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/thou/","text":"Thousandth of an Inch (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Thousandth of an Inch (unit)"},{"location":"metaphysic/dt/thou/#thousandth-of-an-inch-unit","text":"","title":"Thousandth of an Inch (unit)"},{"location":"metaphysic/dt/thou/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/thou/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/thou/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/thou/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/thou/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/thou/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/thou/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/thou/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/thou/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/thou/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/thou/#examples","text":"","title":"Examples"},{"location":"metaphysic/dt/yrd/","text":"Yard (unit) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Yard (unit)"},{"location":"metaphysic/dt/yrd/#yard-unit","text":"","title":"Yard (unit)"},{"location":"metaphysic/dt/yrd/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/dt/yrd/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/dt/yrd/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/dt/yrd/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/dt/yrd/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/dt/yrd/#typing","text":"","title":"Typing"},{"location":"metaphysic/dt/yrd/#getting","text":"","title":"Getting"},{"location":"metaphysic/dt/yrd/#setting","text":"","title":"Setting"},{"location":"metaphysic/dt/yrd/#casting","text":"","title":"Casting"},{"location":"metaphysic/dt/yrd/#properties","text":"","title":"Properties"},{"location":"metaphysic/dt/yrd/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/bearing/","text":"Bearing (function) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Bearing (function)"},{"location":"metaphysic/funct/bearing/#bearing-function","text":"","title":"Bearing (function)"},{"location":"metaphysic/funct/bearing/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/bearing/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/bearing/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/bearing/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/bearing/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/bearing/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/bearing/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/bearing/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/bearing/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/bearing/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/bearing/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/datum/","text":"Datum (function) Datum The coordinate referenece system can be set using the datum object See also datum _heading( moniker ); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Datum (function)"},{"location":"metaphysic/funct/datum/#datum-function","text":"","title":"Datum (function)"},{"location":"metaphysic/funct/datum/#datum","text":"The coordinate referenece system can be set using the datum object See also datum _heading( moniker );","title":"Datum"},{"location":"metaphysic/funct/datum/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/datum/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/datum/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/datum/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/datum/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/datum/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/datum/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/datum/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/datum/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/datum/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/datum/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/durat/","text":"Duration (function) A The capital letters P, Y, M, W, D, T, H, M, and S are designators for each of the date and time elements and are not replaced. add_durat( period ); period description P... P is the duration designator (for period) placed at the start of the duration representation P...<year>Y... Y i is the year designator that follows the value for the number of calendar years P...<quarter>Q... Q i is the year designator that follows the value for the number of quarter years P...<fiscal_quarter>$... $ i is the year designator that follows the value for the number of fiscal quarter years P...<month>M... M is the month designator that follows the value for the number of calendar months P...<week>W... W is the week designator that follows the value for the number of weeks P...<fortnight>F... F is the fortnight designator that follows the value for the number of fortnights P...<day>D... D is the day designator that follows the value for the number of calendar days P...<jour>J... J is the day designator that follows the value for the number of jour days PT... T is the time designator that precedes the time components of the representation PT...<hour>H... H is the hour designator that follows the value for the number of hours PT...<minute>M... M is the minute designator that follows the value for the number of minutes PT...<second.millisecondsmicroseconds>S... S is the second designator that follows the value for the number of seconds https://en.wikipedia.org/wiki/Battle_of_Hastings#:~:text=The%20only%20undisputed%20facts%20are,the%20battle%20lasted%20until%20dusk. Battle of Hastings diego // Battle of Hastings add_bout(battleOfHastings) ()_fromat(1066-10-14T09:00:00[Europe/London][u-ca=julian]); ()_fromto(1066-10-14T17:54:00[Europe/London][u-ca=julian]); ()_fromto()_time(17:54); ; https://en.wikipedia.org/wiki/Luna_9 diego // Luna 9 mission add_bout(luna9Mission) ()_fromat(1966-01-31T11:45:00[Europe/London][u-ca=julian]); // ()_fromto(1066-10-14T17:54:00[Europe/London][u-ca=julian]); // lengthy syntax ()_toat()_time(17:54); ; 3 February 1966 at 18:45:30 GMT myDate)_bout(P) B1066Y9M14D9+ Posits method description API _year() _year( yearnumeric ) References the temporal year of the preceeding object Sets the temporal year of yearnumeric year Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Duration (function)"},{"location":"metaphysic/funct/durat/#duration-function","text":"A The capital letters P, Y, M, W, D, T, H, M, and S are designators for each of the date and time elements and are not replaced. add_durat( period ); period description P... P is the duration designator (for period) placed at the start of the duration representation P...<year>Y... Y i is the year designator that follows the value for the number of calendar years P...<quarter>Q... Q i is the year designator that follows the value for the number of quarter years P...<fiscal_quarter>$... $ i is the year designator that follows the value for the number of fiscal quarter years P...<month>M... M is the month designator that follows the value for the number of calendar months P...<week>W... W is the week designator that follows the value for the number of weeks P...<fortnight>F... F is the fortnight designator that follows the value for the number of fortnights P...<day>D... D is the day designator that follows the value for the number of calendar days P...<jour>J... J is the day designator that follows the value for the number of jour days PT... T is the time designator that precedes the time components of the representation PT...<hour>H... H is the hour designator that follows the value for the number of hours PT...<minute>M... M is the minute designator that follows the value for the number of minutes PT...<second.millisecondsmicroseconds>S... S is the second designator that follows the value for the number of seconds https://en.wikipedia.org/wiki/Battle_of_Hastings#:~:text=The%20only%20undisputed%20facts%20are,the%20battle%20lasted%20until%20dusk. Battle of Hastings diego // Battle of Hastings add_bout(battleOfHastings) ()_fromat(1066-10-14T09:00:00[Europe/London][u-ca=julian]); ()_fromto(1066-10-14T17:54:00[Europe/London][u-ca=julian]); ()_fromto()_time(17:54); ; https://en.wikipedia.org/wiki/Luna_9 diego // Luna 9 mission add_bout(luna9Mission) ()_fromat(1966-01-31T11:45:00[Europe/London][u-ca=julian]); // ()_fromto(1066-10-14T17:54:00[Europe/London][u-ca=julian]); // lengthy syntax ()_toat()_time(17:54); ; 3 February 1966 at 18:45:30 GMT myDate)_bout(P) B1066Y9M14D9+","title":"Duration (function)"},{"location":"metaphysic/funct/durat/#posits","text":"method description API _year() _year( yearnumeric ) References the temporal year of the preceeding object Sets the temporal year of yearnumeric year","title":"Posits"},{"location":"metaphysic/funct/durat/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/durat/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/durat/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/durat/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/durat/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/durat/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/durat/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/durat/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/durat/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/durat/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/durat/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/elev/","text":"Elevation (object) | _elev() _elevation( elev ) | Gets and sets the elevation of the preceeding object | elev | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Elevation (object)"},{"location":"metaphysic/funct/elev/#elevation-object","text":"| _elev() _elevation( elev ) | Gets and sets the elevation of the preceeding object | elev |","title":"Elevation (object)"},{"location":"metaphysic/funct/elev/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/elev/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/elev/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/elev/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/elev/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/elev/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/elev/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/elev/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/elev/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/elev/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/elev/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/geojson/","text":"GeoJSON (function) GeoJSON is a format for encoding a variety of geographic data structures. { \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [125.6, 10.1] }, \"properties\": { \"name\": \"Dinagat Islands\" } } GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon. Geometric objects with additional properties are Feature objects. Sets of features are contained by FeatureCollection objects. The GeoJSON Specification (RFC 7946) In 2015, the Internet Engineering Task Force (IETF), in conjunction with the original specification authors, formed a GeoJSON WG to standardize GeoJSON. RFC 7946 was published in August 2016 and is the new standard specification of the GeoJSON format, replacing the 2008 GeoJSON specification. https://geojson.org/ Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"GeoJSON (function)"},{"location":"metaphysic/funct/geojson/#geojson-function","text":"GeoJSON is a format for encoding a variety of geographic data structures. { \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [125.6, 10.1] }, \"properties\": { \"name\": \"Dinagat Islands\" } } GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon. Geometric objects with additional properties are Feature objects. Sets of features are contained by FeatureCollection objects. The GeoJSON Specification (RFC 7946) In 2015, the Internet Engineering Task Force (IETF), in conjunction with the original specification authors, formed a GeoJSON WG to standardize GeoJSON. RFC 7946 was published in August 2016 and is the new standard specification of the GeoJSON format, replacing the 2008 GeoJSON specification. https://geojson.org/","title":"GeoJSON (function)"},{"location":"metaphysic/funct/geojson/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/geojson/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/geojson/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/geojson/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/geojson/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/geojson/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/geojson/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/geojson/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/geojson/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/geojson/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/geojson/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/heading/","text":"Heading (function) The heading function provides orientation in the frame of the map object being referenced. It is irrespective of the momentum (i.e. 'line of travel') of the moving thingy, and only includes the 'right-hand-rule' pointing to the north pole on the referenced map from the centrepoint of the thingy, regardless of the orientation of the thingy to it momentum. Only measurable values are provided for the heading function, for string values (e.g. Norht-West, SW, etc... ) use bearing function. Syntax Declaration and assignment of heading is supplied using only one parameter, show here as heading . The function will use the provided heading for the preceeding object for all its applicable objects . The unit can be provided with the heading, using the angle brackets ( \u276c\u276d ), however, the units are usally declared with the map object. <object> _heading( heading ); <object> _heading(\u276c unit \u276d, heading ); Units The unit can be provided with the heading, using the angle brackets ( \u276c\u276d ), however, the units are usally declared with the map object. Any units declared with the heading function are cast to the map units by the callee automatically. Length or Earth coordinate units are used with heading . \u276cunit\u276d description API \u276c\u276d Use the default units, either from setters or set on the map. This can easier to omit. unit \u276cnum\u276d No unit used, uses only numeric values. Numeric values can be provided as a three digit bearing values, e.g. \"015\", as 15\u00b0. num \u276cdd\u276d \u276cdeg\u276d \u276cdec_deg\u276d Using decimal degrees, usually to 6 decimal places, or set with _precision posit. dd \u276cdm\u276d Using degrees and decimal minutes. dm \u276cdms\u276d Using degrees, minutes, and, seconds. dms \u276crad\u276d Using radians usually to 6 decimal places, or set with _precision posit. rad \u276c\u03bcm\u276d \u276cmm\u276d \u276ccm\u276d \u276cdm\u276d \u276cm\u276d \u276cdam\u276d \u276chm\u276d \u276ckm\u276d etc... Using SI length units. SI \u276cthou\u276d \u276cinch\u276d \u276c\"\u276d \u276cft\u276d \u276cfoot\u276d \u276c'\u276d \u276cyd\u276d \u276cyard\u276d \u276cmile\u276d \u276cleague\u276d Using imperial length units. Imperial \u276cfathom\u276d \u276cn_mile\u276d Using marine length units. Imperial \u276cchain\u276d \u276crod\u276d Using US surveying length units. Imperial Other coordinate units , like chains , are available. Also see the coords object and the datum function. Objects The objects that use the heading function are associated with mapping and routing. object description API pose A representation of an orientation at a physical point. Pose way A pair of pose objects , representing their orientational and physical relationship. Way \u276cdd\u276d \u276cdeg\u276d \u276cdec_deg\u276d Using decimal degrees, usually to 6 decimal places, or set with _precision posit. dd \u276cdm\u276d Using degrees and decimal minutes. dm \u276cdms\u276d Using degrees, minutes, and, seconds. dms \u276crad\u276d Using radians usually to 6 decimal places, or set with _precision posit. rad \u276c\u03bcm\u276d \u276cmm\u276d \u276ccm\u276d \u276cdm\u276d \u276cm\u276d \u276cdam\u276d \u276chm\u276d \u276ckm\u276d etc... Using SI length units. SI \u276cthou\u276d \u276cinch\u276d \u276c\"\u276d \u276cft\u276d \u276cfoot\u276d \u276c'\u276d \u276cyd\u276d \u276cyard\u276d \u276cmile\u276d \u276cleague\u276d Using imperial length units. Imperial \u276cfathom\u276d \u276cn_mile\u276d Using marine length units. Imperial \u276cchain\u276d \u276crod\u276d Using US surveying length units. Imperial Pose The pose object is a representation of an orientation at a physical point. For time-frame reference a thingy will usually use the _orientatat function, however, navigation can be use heading values. It is usual to provide heading as an additional resource for mapping rather than routing. add_pose( moniker )_heading( heading ); add_pose( moniker )_heading(\u276cdec_deg\u276d, heading ); add_pose( moniker )_heading(\u276crad\u276d heading ); with_pose( moniker )_heading( heading ); ( moniker )_heading( heading ); Way The way object is a pair of pose objects , representing their orientational and physical relationship. The way object needs two orientations to be effective, and the orientations, as headings, can be provided using the _out , _in , and, _outin posits. The proceeding _heading posit provides the orientation in terms of heading to the preceeding out/in posits. The heading relies on the maps being used, or to be used. The map object should be know to the thingy beforehand. add_way( moniker )_out()_heading( heading ); add_way( moniker )_in()_heading( heading ); with_way( moniker )_out()_in()_heading( heading ); with_way( moniker )_outin()_heading( heading ); ( waymoniker )_out()_heading( heading )_in()_heading( heading ); The heading parameter should be supplied in the unit settings of the map, usually decimal degrees, however, the unit can be specified in the heading using the angle brackets ( \u276c\u276d ). add_way( moniker )_out()_heading\u276c unit \u276d, heading ); add_way( moniker )_in()_heading\u276c unit \u276d, heading ); add_way( moniker )_outin()_heading\u276c unit \u276d, heading ); Course Excurs Goal Trip Journ Tour Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Heading (function)"},{"location":"metaphysic/funct/heading/#heading-function","text":"The heading function provides orientation in the frame of the map object being referenced. It is irrespective of the momentum (i.e. 'line of travel') of the moving thingy, and only includes the 'right-hand-rule' pointing to the north pole on the referenced map from the centrepoint of the thingy, regardless of the orientation of the thingy to it momentum. Only measurable values are provided for the heading function, for string values (e.g. Norht-West, SW, etc... ) use bearing function.","title":"Heading (function)"},{"location":"metaphysic/funct/heading/#syntax","text":"Declaration and assignment of heading is supplied using only one parameter, show here as heading . The function will use the provided heading for the preceeding object for all its applicable objects . The unit can be provided with the heading, using the angle brackets ( \u276c\u276d ), however, the units are usally declared with the map object. <object> _heading( heading ); <object> _heading(\u276c unit \u276d, heading );","title":"Syntax"},{"location":"metaphysic/funct/heading/#units","text":"The unit can be provided with the heading, using the angle brackets ( \u276c\u276d ), however, the units are usally declared with the map object. Any units declared with the heading function are cast to the map units by the callee automatically. Length or Earth coordinate units are used with heading . \u276cunit\u276d description API \u276c\u276d Use the default units, either from setters or set on the map. This can easier to omit. unit \u276cnum\u276d No unit used, uses only numeric values. Numeric values can be provided as a three digit bearing values, e.g. \"015\", as 15\u00b0. num \u276cdd\u276d \u276cdeg\u276d \u276cdec_deg\u276d Using decimal degrees, usually to 6 decimal places, or set with _precision posit. dd \u276cdm\u276d Using degrees and decimal minutes. dm \u276cdms\u276d Using degrees, minutes, and, seconds. dms \u276crad\u276d Using radians usually to 6 decimal places, or set with _precision posit. rad \u276c\u03bcm\u276d \u276cmm\u276d \u276ccm\u276d \u276cdm\u276d \u276cm\u276d \u276cdam\u276d \u276chm\u276d \u276ckm\u276d etc... Using SI length units. SI \u276cthou\u276d \u276cinch\u276d \u276c\"\u276d \u276cft\u276d \u276cfoot\u276d \u276c'\u276d \u276cyd\u276d \u276cyard\u276d \u276cmile\u276d \u276cleague\u276d Using imperial length units. Imperial \u276cfathom\u276d \u276cn_mile\u276d Using marine length units. Imperial \u276cchain\u276d \u276crod\u276d Using US surveying length units. Imperial Other coordinate units , like chains , are available. Also see the coords object and the datum function.","title":"Units"},{"location":"metaphysic/funct/heading/#objects","text":"The objects that use the heading function are associated with mapping and routing. object description API pose A representation of an orientation at a physical point. Pose way A pair of pose objects , representing their orientational and physical relationship. Way \u276cdd\u276d \u276cdeg\u276d \u276cdec_deg\u276d Using decimal degrees, usually to 6 decimal places, or set with _precision posit. dd \u276cdm\u276d Using degrees and decimal minutes. dm \u276cdms\u276d Using degrees, minutes, and, seconds. dms \u276crad\u276d Using radians usually to 6 decimal places, or set with _precision posit. rad \u276c\u03bcm\u276d \u276cmm\u276d \u276ccm\u276d \u276cdm\u276d \u276cm\u276d \u276cdam\u276d \u276chm\u276d \u276ckm\u276d etc... Using SI length units. SI \u276cthou\u276d \u276cinch\u276d \u276c\"\u276d \u276cft\u276d \u276cfoot\u276d \u276c'\u276d \u276cyd\u276d \u276cyard\u276d \u276cmile\u276d \u276cleague\u276d Using imperial length units. Imperial \u276cfathom\u276d \u276cn_mile\u276d Using marine length units. Imperial \u276cchain\u276d \u276crod\u276d Using US surveying length units. Imperial","title":"Objects"},{"location":"metaphysic/funct/heading/#pose","text":"The pose object is a representation of an orientation at a physical point. For time-frame reference a thingy will usually use the _orientatat function, however, navigation can be use heading values. It is usual to provide heading as an additional resource for mapping rather than routing. add_pose( moniker )_heading( heading ); add_pose( moniker )_heading(\u276cdec_deg\u276d, heading ); add_pose( moniker )_heading(\u276crad\u276d heading ); with_pose( moniker )_heading( heading ); ( moniker )_heading( heading );","title":"Pose"},{"location":"metaphysic/funct/heading/#way","text":"The way object is a pair of pose objects , representing their orientational and physical relationship. The way object needs two orientations to be effective, and the orientations, as headings, can be provided using the _out , _in , and, _outin posits. The proceeding _heading posit provides the orientation in terms of heading to the preceeding out/in posits. The heading relies on the maps being used, or to be used. The map object should be know to the thingy beforehand. add_way( moniker )_out()_heading( heading ); add_way( moniker )_in()_heading( heading ); with_way( moniker )_out()_in()_heading( heading ); with_way( moniker )_outin()_heading( heading ); ( waymoniker )_out()_heading( heading )_in()_heading( heading ); The heading parameter should be supplied in the unit settings of the map, usually decimal degrees, however, the unit can be specified in the heading using the angle brackets ( \u276c\u276d ). add_way( moniker )_out()_heading\u276c unit \u276d, heading ); add_way( moniker )_in()_heading\u276c unit \u276d, heading ); add_way( moniker )_outin()_heading\u276c unit \u276d, heading );","title":"Way"},{"location":"metaphysic/funct/heading/#course","text":"","title":"Course"},{"location":"metaphysic/funct/heading/#excurs","text":"","title":"Excurs"},{"location":"metaphysic/funct/heading/#goal","text":"","title":"Goal"},{"location":"metaphysic/funct/heading/#trip","text":"","title":"Trip"},{"location":"metaphysic/funct/heading/#journ","text":"","title":"Journ"},{"location":"metaphysic/funct/heading/#tour","text":"","title":"Tour"},{"location":"metaphysic/funct/heading/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/heading/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/heading/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/heading/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/heading/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/heading/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/heading/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/heading/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/heading/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/heading/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/heading/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/hyster/","text":"Hysteresis (function) https://en.wikipedia.org/wiki/Hysteresis#:~:text=Hysteresis%20is%20the%20dependence%20of,field%20changed%20in%20the%20past. https://www.compart.com/en/unicode/U+238E Trip log_console()_journ(journ1)_rosary(); // wp1\u2192wp2\u2192wp3 log_console()_journ(journ1)_distan(); // 9d5244,de1b07,48d89f,c2e18e log_console([2]: [3])_journ(journ1)_trip(wp1\u2192wp2)_distan(\u276c\u276d,9d5244); // wp1\u2192wp2: 6.013m,wp1\u2192wp2: 5.936m log_console([2]: [3])_journ(journ1)_trip(wp1\u2192wp2)_hyster([\ud83d\udcdb]','{temporfrom}hh:mm' -> '{temporto}hh:mm' '{durat}hh:mm' '{distan}\u276c\u276d); /* wp1\u2192wp2: alif,T17:23 -> T17:52 0:29 6.013m => wp1\u2192wp2: bah,T14:53 -> T15:18 0:25 5.936m */ hyster posit description API _temporfrom( tempor ) _temporfrom() _temporfrom([ variable_moniker ]) The tempor when the thingy departed the left-side goal temporfrom _temporto( tempor ) _temporto() _temporto([ variable_moniker ]) The tempor when the thingy arrived at the right-side goal temporto _distan() _distance() _distan([ variable_moniker ]) _distance([ variable_moniker ]) The distance record by the thingy distan _displacem() _displacement() The displacement record by the thingy displacem _unit() unit _hour() _hr() _hour( hour_format ) _hr( hr_format ) Temporal hours Temporal hours in format hour_format Hour _min() _minute() _min( min_format ) _minute( min_format ) Temporal minutes Temporal minutes in format min_format hyster operator description API {thingy_name} {\ud83d\udcdb} name of thingy thingy {tempor_from} The tempor when the thingy departed the left-side goal {tempor_to} The tempor when the thingy arrived at the right-side goal {distan} {distance} The distance record by the thingy distan {displacem} {displacement} The displacement record by the thingy displacem \u276c\u276d \u276c unit \u276d Unit symbol(s) of proceeding operator Cast to specified unit unit unit h hh +h Temporal hours, in different formats Hour m mm +h Temporal minutes, in different formats Minute Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Hysteresis (function)"},{"location":"metaphysic/funct/hyster/#hysteresis-function","text":"https://en.wikipedia.org/wiki/Hysteresis#:~:text=Hysteresis%20is%20the%20dependence%20of,field%20changed%20in%20the%20past. https://www.compart.com/en/unicode/U+238E","title":"Hysteresis (function)"},{"location":"metaphysic/funct/hyster/#trip","text":"log_console()_journ(journ1)_rosary(); // wp1\u2192wp2\u2192wp3 log_console()_journ(journ1)_distan(); // 9d5244,de1b07,48d89f,c2e18e log_console([2]: [3])_journ(journ1)_trip(wp1\u2192wp2)_distan(\u276c\u276d,9d5244); // wp1\u2192wp2: 6.013m,wp1\u2192wp2: 5.936m log_console([2]: [3])_journ(journ1)_trip(wp1\u2192wp2)_hyster([\ud83d\udcdb]','{temporfrom}hh:mm' -> '{temporto}hh:mm' '{durat}hh:mm' '{distan}\u276c\u276d); /* wp1\u2192wp2: alif,T17:23 -> T17:52 0:29 6.013m => wp1\u2192wp2: bah,T14:53 -> T15:18 0:25 5.936m */ hyster posit description API _temporfrom( tempor ) _temporfrom() _temporfrom([ variable_moniker ]) The tempor when the thingy departed the left-side goal temporfrom _temporto( tempor ) _temporto() _temporto([ variable_moniker ]) The tempor when the thingy arrived at the right-side goal temporto _distan() _distance() _distan([ variable_moniker ]) _distance([ variable_moniker ]) The distance record by the thingy distan _displacem() _displacement() The displacement record by the thingy displacem _unit() unit _hour() _hr() _hour( hour_format ) _hr( hr_format ) Temporal hours Temporal hours in format hour_format Hour _min() _minute() _min( min_format ) _minute( min_format ) Temporal minutes Temporal minutes in format min_format hyster operator description API {thingy_name} {\ud83d\udcdb} name of thingy thingy {tempor_from} The tempor when the thingy departed the left-side goal {tempor_to} The tempor when the thingy arrived at the right-side goal {distan} {distance} The distance record by the thingy distan {displacem} {displacement} The displacement record by the thingy displacem \u276c\u276d \u276c unit \u276d Unit symbol(s) of proceeding operator Cast to specified unit unit unit h hh +h Temporal hours, in different formats Hour m mm +h Temporal minutes, in different formats Minute","title":"Trip"},{"location":"metaphysic/funct/hyster/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/hyster/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/hyster/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/hyster/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/hyster/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/hyster/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/hyster/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/hyster/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/hyster/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/hyster/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/hyster/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/kml/","text":"Keyhole Markup Language [kml] (function) Keyhole Markup Language is an XML notation for expressing geographic annotation and visualization within two-dimensional maps and three-dimensional Earth browsers. KML was developed for use with Google Earth, which was originally named Keyhole Earth Viewer. Wikipedia https://developers.google.com/kml/documentation/kml_tut Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Keyhole Markup Language [kml] (function)"},{"location":"metaphysic/funct/kml/#keyhole-markup-language-kml-function","text":"Keyhole Markup Language is an XML notation for expressing geographic annotation and visualization within two-dimensional maps and three-dimensional Earth browsers. KML was developed for use with Google Earth, which was originally named Keyhole Earth Viewer. Wikipedia https://developers.google.com/kml/documentation/kml_tut","title":"Keyhole Markup Language [kml] (function)"},{"location":"metaphysic/funct/kml/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/kml/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/kml/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/kml/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/kml/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/kml/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/kml/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/kml/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/kml/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/kml/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/kml/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/latlngalt/","text":"Latitude, Longitude, Altitude (function) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Latitude, Longitude, Altitude (function)"},{"location":"metaphysic/funct/latlngalt/#latitude-longitude-altitude-function","text":"","title":"Latitude, Longitude, Altitude (function)"},{"location":"metaphysic/funct/latlngalt/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/latlngalt/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/latlngalt/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/latlngalt/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/latlngalt/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/latlngalt/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/latlngalt/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/latlngalt/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/latlngalt/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/latlngalt/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/latlngalt/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/loiterat/","text":"Loiter At (function) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Loiter At (function)"},{"location":"metaphysic/funct/loiterat/#loiter-at-function","text":"","title":"Loiter At (function)"},{"location":"metaphysic/funct/loiterat/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/loiterat/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/loiterat/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/loiterat/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/loiterat/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/loiterat/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/loiterat/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/loiterat/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/loiterat/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/loiterat/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/loiterat/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/parse/","text":"Parse (function) add_waypoint( [moniker] )_format( format )_json([{ x_lat , y_long )}, { x_lat , y_long )}, ...]) Diego allows for other apporaches for creating/loading mutilple waypoint s, such as... add_waypoint( [moniker] )_format( format )_json([{ x_lat , y_long )}, { x_lat , y_long )}, ...]) ...creates miltilple waypoints from a literal json string. The waypoint monikers are created in seqence using a combination of a (base)- moniker and a specified format . To load waypoints , either from a file... add_waypoint()_load( file_url , file_format , protocol ) _parse({json}, string ) Parses json jsonstring Posits posit description API _json() _json( jsonstring ) Provides json of proceeding object Provides json jsonstring json | _at( index ) _at() | Provides the element at index index | ...or using programming logic from an array (for instance)... add_waypoint()_load()_array( moniker ); ...or from a json string... add_waypoint()_load()_json( moniker );","title":"Parse (function)"},{"location":"metaphysic/funct/parse/#parse-function","text":"add_waypoint( [moniker] )_format( format )_json([{ x_lat , y_long )}, { x_lat , y_long )}, ...]) Diego allows for other apporaches for creating/loading mutilple waypoint s, such as... add_waypoint( [moniker] )_format( format )_json([{ x_lat , y_long )}, { x_lat , y_long )}, ...]) ...creates miltilple waypoints from a literal json string. The waypoint monikers are created in seqence using a combination of a (base)- moniker and a specified format . To load waypoints , either from a file... add_waypoint()_load( file_url , file_format , protocol ) _parse({json}, string ) Parses json jsonstring","title":"Parse (function)"},{"location":"metaphysic/funct/parse/#posits","text":"posit description API _json() _json( jsonstring ) Provides json of proceeding object Provides json jsonstring json | _at( index ) _at() | Provides the element at index index | ...or using programming logic from an array (for instance)... add_waypoint()_load()_array( moniker ); ...or from a json string... add_waypoint()_load()_json( moniker );","title":"Posits"},{"location":"metaphysic/funct/percentof/","text":"Percentage Of (function) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Percentage Of (function)"},{"location":"metaphysic/funct/percentof/#percentage-of-function","text":"","title":"Percentage Of (function)"},{"location":"metaphysic/funct/percentof/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/percentof/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/percentof/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/percentof/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/percentof/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/percentof/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/percentof/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/percentof/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/percentof/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/percentof/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/percentof/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/shape/","text":"Shape (function) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Shape (function)"},{"location":"metaphysic/funct/shape/#shape-function","text":"","title":"Shape (function)"},{"location":"metaphysic/funct/shape/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/shape/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/shape/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/shape/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/shape/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/shape/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/shape/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/shape/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/shape/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/shape/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/shape/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/shapefile/","text":"Shapefile (function) https://en.wikipedia.org/wiki/Shapefile Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Shapefile (function)"},{"location":"metaphysic/funct/shapefile/#shapefile-function","text":"https://en.wikipedia.org/wiki/Shapefile","title":"Shapefile (function)"},{"location":"metaphysic/funct/shapefile/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/shapefile/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/shapefile/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/shapefile/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/shapefile/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/shapefile/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/shapefile/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/shapefile/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/shapefile/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/shapefile/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/shapefile/#examples","text":"","title":"Examples"},{"location":"metaphysic/funct/unit/","text":"Unit (function) The use of angle brackets ( \u276c\u276d ) in Diego represents the metaphysic unit of measure and/or unit system. Syntax Angle brackets are used to define units in declarations, such as with a scalar or vector . They can be used alongside datatype without any issue. add_scalar(\u276c unit \u276d, moniker ) add_vector({ datatype },\u276c unit \u276d, moniker ) When setting the unit or unit system of a container statement, the angle brackets can be used in place of the _unit posit, such as, for example the instruct object. begin_instruct( moniker )_unit( unitsystem ) begin_instruct( moniker )_\u276c unitsystem \u276d When a unit declaration can be used in a funct ion to declare the unit of the return objects . add_function({double},\u276c unit \u276d, moniker ) When setting the unit system, globally for a thingy, the angle brackets are not required. set_unitsystem( unitsystem ) For assignment, initialisation, and referencing, adding a unit will always cast the unit. The _unit posit can be used, instead of angle brackets ( \u276c\u276d ). For an omitted unit at declaration the cast will be from the {variant} unit. with_vector(\u276c unit \u276d, moniker ) with_vector( moniker )_unit( unit ) Angle brackets ( \u276c\u276d ) and the _unit posit can be used with shortened referencing, referenced variables, and, encapsulated variables. (\u276c unit \u276d, objmoniker ) ( objmoniker )_unit( unit ) [\u276c unit \u276d, variablemoniker ] [ variablemoniker ]_unit( unit ) ([\u276c unit \u276d, variablemoniker ]) ([ variablemoniker ])_unit( unit ) Casts can be achieved inside expressions . <...> _calc([\u276c unit \u276d, variablemoniker ]) <...> _calc(\u276c unit \u276d) <...> _msg([\u276c unit \u276d, variablemoniker ]) <...> _msg(\u276c unit \u276d) <...> _txt([\u276c unit \u276d, variablemoniker ]) <...> _txt(\u276c unit \u276d) <...> _if([\u276c unit \u276d, variablemoniker ]) <...> _if(\u276c unit \u276d) etc... References Datatype posit _unit Unit statement in Lexicon See also Datatype statement","title":"Unit (function)"},{"location":"metaphysic/funct/unit/#unit-function","text":"The use of angle brackets ( \u276c\u276d ) in Diego represents the metaphysic unit of measure and/or unit system.","title":"Unit (function)"},{"location":"metaphysic/funct/unit/#syntax","text":"Angle brackets are used to define units in declarations, such as with a scalar or vector . They can be used alongside datatype without any issue. add_scalar(\u276c unit \u276d, moniker ) add_vector({ datatype },\u276c unit \u276d, moniker ) When setting the unit or unit system of a container statement, the angle brackets can be used in place of the _unit posit, such as, for example the instruct object. begin_instruct( moniker )_unit( unitsystem ) begin_instruct( moniker )_\u276c unitsystem \u276d When a unit declaration can be used in a funct ion to declare the unit of the return objects . add_function({double},\u276c unit \u276d, moniker ) When setting the unit system, globally for a thingy, the angle brackets are not required. set_unitsystem( unitsystem ) For assignment, initialisation, and referencing, adding a unit will always cast the unit. The _unit posit can be used, instead of angle brackets ( \u276c\u276d ). For an omitted unit at declaration the cast will be from the {variant} unit. with_vector(\u276c unit \u276d, moniker ) with_vector( moniker )_unit( unit ) Angle brackets ( \u276c\u276d ) and the _unit posit can be used with shortened referencing, referenced variables, and, encapsulated variables. (\u276c unit \u276d, objmoniker ) ( objmoniker )_unit( unit ) [\u276c unit \u276d, variablemoniker ] [ variablemoniker ]_unit( unit ) ([\u276c unit \u276d, variablemoniker ]) ([ variablemoniker ])_unit( unit ) Casts can be achieved inside expressions . <...> _calc([\u276c unit \u276d, variablemoniker ]) <...> _calc(\u276c unit \u276d) <...> _msg([\u276c unit \u276d, variablemoniker ]) <...> _msg(\u276c unit \u276d) <...> _txt([\u276c unit \u276d, variablemoniker ]) <...> _txt(\u276c unit \u276d) <...> _if([\u276c unit \u276d, variablemoniker ]) <...> _if(\u276c unit \u276d) etc...","title":"Syntax"},{"location":"metaphysic/funct/unit/#references","text":"Datatype posit _unit Unit statement in Lexicon See also Datatype statement","title":"References"},{"location":"metaphysic/funct/waitat/","text":"Wait At (function) | _waitat() _waitat( wpmoniker ) | Wait at proceeding object Wait at waypoint wpmoniker | waitat | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Wait At (function)"},{"location":"metaphysic/funct/waitat/#wait-at-function","text":"| _waitat() _waitat( wpmoniker ) | Wait at proceeding object Wait at waypoint wpmoniker | waitat |","title":"Wait At (function)"},{"location":"metaphysic/funct/waitat/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/funct/waitat/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/funct/waitat/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/funct/waitat/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/funct/waitat/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/funct/waitat/#typing","text":"","title":"Typing"},{"location":"metaphysic/funct/waitat/#getting","text":"","title":"Getting"},{"location":"metaphysic/funct/waitat/#setting","text":"","title":"Setting"},{"location":"metaphysic/funct/waitat/#casting","text":"","title":"Casting"},{"location":"metaphysic/funct/waitat/#properties","text":"","title":"Properties"},{"location":"metaphysic/funct/waitat/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/ambit/","text":"Ambit (object) An ambit object is chain or chains of objects representing a physical ordered array of points to combine into a full route or routes. In terms of orientation all physical coordinate locations follow the right-hand-rule. An ambit is similar to an ambit , execpt an ambit can have forks and does not require loop of any routes within it. Terms often used to illustrate an ambit include a 'linear ring', a 'multi-line' or a 'multi-line string', among others. Definition & Assignment Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Ambit (object)"},{"location":"metaphysic/obj/ambit/#ambit-object","text":"An ambit object is chain or chains of objects representing a physical ordered array of points to combine into a full route or routes. In terms of orientation all physical coordinate locations follow the right-hand-rule. An ambit is similar to an ambit , execpt an ambit can have forks and does not require loop of any routes within it. Terms often used to illustrate an ambit include a 'linear ring', a 'multi-line' or a 'multi-line string', among others.","title":"Ambit (object)"},{"location":"metaphysic/obj/ambit/#definition-assignment","text":"","title":"Definition &amp; Assignment"},{"location":"metaphysic/obj/ambit/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/ambit/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/ambit/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/ambit/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/ambit/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/ambit/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/ambit/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/ambit/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/ambit/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/ambit/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/ambit/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/apparat/","text":"Apparatus (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Apparatus (object)"},{"location":"metaphysic/obj/apparat/#apparatus-object","text":"","title":"Apparatus (object)"},{"location":"metaphysic/obj/apparat/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/apparat/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/apparat/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/apparat/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/apparat/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/apparat/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/apparat/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/apparat/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/apparat/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/apparat/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/apparat/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/arena/","text":"Arena (object) | arena | A representation of physically defined 3d space for a thing (s) to move freely around inside. There should be an attempt to represent physical (real-world) borders. The human version of a zone . Example: atrium, open plan office floor See also: zone ; fence | arena | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Arena (object)"},{"location":"metaphysic/obj/arena/#arena-object","text":"| arena | A representation of physically defined 3d space for a thing (s) to move freely around inside. There should be an attempt to represent physical (real-world) borders. The human version of a zone . Example: atrium, open plan office floor See also: zone ; fence | arena |","title":"Arena (object)"},{"location":"metaphysic/obj/arena/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/arena/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/arena/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/arena/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/arena/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/arena/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/arena/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/arena/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/arena/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/arena/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/arena/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/attr/","text":"Attribute (object) | attr [ibute] | Lorem ipsum, lorem ipsum, lorem ipsum. Example: See also: spec | attr | Data Management data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Attribute (object)"},{"location":"metaphysic/obj/attr/#attribute-object","text":"| attr [ibute] | Lorem ipsum, lorem ipsum, lorem ipsum. Example: See also: spec | attr |","title":"Attribute (object)"},{"location":"metaphysic/obj/attr/#data-management","text":"data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":" Data Management"},{"location":"metaphysic/obj/attr/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/attr/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/attr/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/attr/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/attr/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/attr/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/attr/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/attr/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/attr/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/attr/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/attr/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/behavi/","text":"Behaviour (object) The behavi object reprent Behaviours begin_behaviour(); end_behaviour(); begin_behaviour(envelop) envelop_robot() begin_verb(envelop) envelop_subject(target_poi)_for(drone_1); with_subject(target_poi)_envelop()_for(drone_1); with_drone(drone_1)_envelop(target_poi); obj: base _deploy({ready|commit|not_ready}) with_base({moniker|uuid})_robot(); f ff'';';ff fjfjfjjfjfffffwwww \"Go an play 'Piano Sonata No. 1 in C major' on the piano.\" \"Make me a cup of tea\" \"Count to 10\" 1] Play the piano, then immediately drop everything (forget about the piano), go to the kitchen and make a cup of tea. _decision(asynchronous) 2] Play the piano 'Piano Sonata No. 1 in C major', then when finished go to the kitchen and make a cup of tea. _decision(stack) 3] Play the piano and make a cup of tea at the same time. _decision(synchronous) 4] Make a cup of tea, then play 'Piano Sonata No. 1 in C major' on the piano. _decision(order/priority/authority) 5] Play 10% of piano playing then 10% of making a cup of tea, then 10% piano playing... _decision(simultaneous) 6] Go to the kitchen put the kettle on, go to the piano and play, when kettle has boiled go to the kitchen and make the tea, go back to the piano and finish playing. _decision(coeval) 7] Play the piano, ignore/refuse to make the tea (or visa versa). _decision(optional) 8] Refuse to do either because they conflict. _decision(defiant) 9] You cannot play the piano (or do not know 'Piano Sonata No. 1 in C major'), do you ignore the piano and make a cup of tea. _decision(incompetency) 10] An asteroid is going to hit the earth in two minutes, you decide to play the piano for the last time and forget about making the tea (not enough time) _decision(inability) What is my motive(s) / agenda? Perhaps I would like a cup of tea, so I make a cup of tea for the caller and myself ... or I make the cup of tea and tell the caller to piss off. In all programming languages the programmer owns the context, knows the consequences, and provides the decision tree. Yet in the real world humans program other humans with in a shared context, with shared knowledge of the consequences (if they are honest with each other), and a consensus of suggested decisions. Take for instance the if condition hello world example in the Go language: package main import (\"fmt\") func main() { time := 20 if (time < 18) { fmt.Println(\"Good day.\") } else { fmt.Println(\"Good evening.\") } } There is no context here, the program (in the main function) does not know the greeting to use when (time < 18) is \"Good day.\" , the program is only told to Println the \"Good day.\" sting when (time < 18) . At the last } the program effectively dies and does not know remember nor learn to Println \"Good day.\" when (time < 18) . The program does not even know that \"Good day.\" is a greeting. The context is completely owned by the programmer. Only the programmer knows and understands the consequences of the program he has written. This could be a sense of self-achievement, perhaps the programmer is learning this programming language for the first time. This could be similar code to a greeting made in an app giving the human, that interfaces with the app, a polite greeting _ a sense of connection with the app. The program is not a stakeholder in the consequences of its code. If the program has at least a sense of context and an understanding of the consequences, it could make its own decisions. Yet, the programmer provides the decision and the basis for making that decision. So what is being proposed here? Do we write thousands of lines of code to give context, build an elaborate web of consequences and all the conceivable consequences of consequences? Do we give the program all the possible decisions that the programmer could think of? The answer is Yes, but not all at once, and definitely in a flash of life, run-kill-and-repeat , paradigm that 'programming' offers. The next question which is predictably raised now is: Is this enough? Surely providing all possible context, consequences, and decisions will be indefinite. ```Diego begin_diego() givento (greet)_appliedto(human) begin_context() givento (greet)_appliedto(human) begin_consequence() _givento({verb}) _appliedto({object}) _specificto({postpos}) _forwhat(object_moniker) _forwho(child_moniker) _forwhy(postpos_param) add_coco() go_robot(alpha)_waypoint(waypoint_1); go_robot(alpha)_waypoint(waypoint_1)_refuse(conflict); go_robot(alpha)_waypoint(waypoint_1); with_robot()_goto(waypoint_1)_for(alpha); with_robot(alpha)_goto(waypoint_1); with_robot(alpha)_goto()_waypoint(waypoint_1); with_waypoint(waypoint_1)_go()_robot(alpha); goto_waypoint(waypoint_1)_for(alpha); goto_waypoint(waypoint_1)_for()_robot(alpha); nav_robot(alpha)_waypoint(waypoint_1); with_robot()_navto(waypoint_1)_for(alpha); with_robot(alpha)_navto(waypoint_1); with_robot(alpha)_navto()_waypoint(waypoint_1); with_waypoint(waypoint_1)_nav()_robot(alpha); navto_waypoint(waypoint_1)_for(alpha); navto_waypoint(waypoint_1)_for()_robot(alpha); {verb} {object}({moniker|uuid}) ({moniker|uuid}) ? : ; | dca_ | | https://www.autonodyne.com/AUTO_behaviors2.html | | decoy_ | | https://www.autonodyne.com/AUTO_behaviors2.html |","title":"Behaviour (object)"},{"location":"metaphysic/obj/behavi/#behaviour-object","text":"The behavi object reprent","title":"Behaviour (object)"},{"location":"metaphysic/obj/behavi/#behaviours","text":"begin_behaviour(); end_behaviour(); begin_behaviour(envelop) envelop_robot() begin_verb(envelop) envelop_subject(target_poi)_for(drone_1); with_subject(target_poi)_envelop()_for(drone_1); with_drone(drone_1)_envelop(target_poi); obj: base _deploy({ready|commit|not_ready}) with_base({moniker|uuid})_robot(); f ff'';';ff fjfjfjjfjfffffwwww \"Go an play 'Piano Sonata No. 1 in C major' on the piano.\" \"Make me a cup of tea\" \"Count to 10\" 1] Play the piano, then immediately drop everything (forget about the piano), go to the kitchen and make a cup of tea. _decision(asynchronous) 2] Play the piano 'Piano Sonata No. 1 in C major', then when finished go to the kitchen and make a cup of tea. _decision(stack) 3] Play the piano and make a cup of tea at the same time. _decision(synchronous) 4] Make a cup of tea, then play 'Piano Sonata No. 1 in C major' on the piano. _decision(order/priority/authority) 5] Play 10% of piano playing then 10% of making a cup of tea, then 10% piano playing... _decision(simultaneous) 6] Go to the kitchen put the kettle on, go to the piano and play, when kettle has boiled go to the kitchen and make the tea, go back to the piano and finish playing. _decision(coeval) 7] Play the piano, ignore/refuse to make the tea (or visa versa). _decision(optional) 8] Refuse to do either because they conflict. _decision(defiant) 9] You cannot play the piano (or do not know 'Piano Sonata No. 1 in C major'), do you ignore the piano and make a cup of tea. _decision(incompetency) 10] An asteroid is going to hit the earth in two minutes, you decide to play the piano for the last time and forget about making the tea (not enough time) _decision(inability) What is my motive(s) / agenda? Perhaps I would like a cup of tea, so I make a cup of tea for the caller and myself ... or I make the cup of tea and tell the caller to piss off. In all programming languages the programmer owns the context, knows the consequences, and provides the decision tree. Yet in the real world humans program other humans with in a shared context, with shared knowledge of the consequences (if they are honest with each other), and a consensus of suggested decisions. Take for instance the if condition hello world example in the Go language: package main import (\"fmt\") func main() { time := 20 if (time < 18) { fmt.Println(\"Good day.\") } else { fmt.Println(\"Good evening.\") } } There is no context here, the program (in the main function) does not know the greeting to use when (time < 18) is \"Good day.\" , the program is only told to Println the \"Good day.\" sting when (time < 18) . At the last } the program effectively dies and does not know remember nor learn to Println \"Good day.\" when (time < 18) . The program does not even know that \"Good day.\" is a greeting. The context is completely owned by the programmer. Only the programmer knows and understands the consequences of the program he has written. This could be a sense of self-achievement, perhaps the programmer is learning this programming language for the first time. This could be similar code to a greeting made in an app giving the human, that interfaces with the app, a polite greeting _ a sense of connection with the app. The program is not a stakeholder in the consequences of its code. If the program has at least a sense of context and an understanding of the consequences, it could make its own decisions. Yet, the programmer provides the decision and the basis for making that decision. So what is being proposed here? Do we write thousands of lines of code to give context, build an elaborate web of consequences and all the conceivable consequences of consequences? Do we give the program all the possible decisions that the programmer could think of? The answer is Yes, but not all at once, and definitely in a flash of life, run-kill-and-repeat , paradigm that 'programming' offers. The next question which is predictably raised now is: Is this enough? Surely providing all possible context, consequences, and decisions will be indefinite. ```Diego begin_diego() givento (greet)_appliedto(human) begin_context() givento (greet)_appliedto(human) begin_consequence() _givento({verb}) _appliedto({object}) _specificto({postpos}) _forwhat(object_moniker) _forwho(child_moniker) _forwhy(postpos_param) add_coco() go_robot(alpha)_waypoint(waypoint_1); go_robot(alpha)_waypoint(waypoint_1)_refuse(conflict); go_robot(alpha)_waypoint(waypoint_1); with_robot()_goto(waypoint_1)_for(alpha); with_robot(alpha)_goto(waypoint_1); with_robot(alpha)_goto()_waypoint(waypoint_1); with_waypoint(waypoint_1)_go()_robot(alpha); goto_waypoint(waypoint_1)_for(alpha); goto_waypoint(waypoint_1)_for()_robot(alpha); nav_robot(alpha)_waypoint(waypoint_1); with_robot()_navto(waypoint_1)_for(alpha); with_robot(alpha)_navto(waypoint_1); with_robot(alpha)_navto()_waypoint(waypoint_1); with_waypoint(waypoint_1)_nav()_robot(alpha); navto_waypoint(waypoint_1)_for(alpha); navto_waypoint(waypoint_1)_for()_robot(alpha); {verb} {object}({moniker|uuid}) ({moniker|uuid}) ? : ; | dca_ | | https://www.autonodyne.com/AUTO_behaviors2.html | | decoy_ | | https://www.autonodyne.com/AUTO_behaviors2.html |","title":"Behaviours"},{"location":"metaphysic/obj/box/","text":"Box (object) | box | A representation of a meta-physical enclosed space. The thing / meta-physical version of a room . Example: inside a pit See also: room | box | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Box (object)"},{"location":"metaphysic/obj/box/#box-object","text":"| box | A representation of a meta-physical enclosed space. The thing / meta-physical version of a room . Example: inside a pit See also: room | box |","title":"Box (object)"},{"location":"metaphysic/obj/box/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/box/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/box/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/box/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/box/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/box/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/box/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/box/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/box/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/box/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/box/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/channel/","text":"Channel (object) | channel | | An exclusive sub-section of a workspace , sometimes referred to as a conversation | or channel physic environmental chacater Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Channel (object)"},{"location":"metaphysic/obj/channel/#channel-object","text":"| channel | | An exclusive sub-section of a workspace , sometimes referred to as a conversation | or channel physic environmental chacater","title":"Channel (object)"},{"location":"metaphysic/obj/channel/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/channel/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/channel/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/channel/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/channel/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/channel/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/channel/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/channel/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/channel/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/channel/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/channel/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/clepe/","text":"Clepe (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Clepe (object)"},{"location":"metaphysic/obj/clepe/#clepe-object","text":"","title":"Clepe (object)"},{"location":"metaphysic/obj/clepe/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/clepe/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/clepe/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/clepe/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/clepe/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/clepe/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/clepe/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/clepe/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/clepe/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/clepe/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/clepe/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/cloud/","text":"Cloud (object) Puffs puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Cloud (object)"},{"location":"metaphysic/obj/cloud/#cloud-object","text":"","title":"Cloud (object)"},{"location":"metaphysic/obj/cloud/#puffs","text":"puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room","title":" Puffs"},{"location":"metaphysic/obj/cloud/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/cloud/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/cloud/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/cloud/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/cloud/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/cloud/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/cloud/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/cloud/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/cloud/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/cloud/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/cloud/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/cognomen/","text":"Cognomen (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Cognomen (object)"},{"location":"metaphysic/obj/cognomen/#cognomen-object","text":"","title":"Cognomen (object)"},{"location":"metaphysic/obj/cognomen/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/cognomen/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/cognomen/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/cognomen/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/cognomen/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/cognomen/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/cognomen/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/cognomen/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/cognomen/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/cognomen/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/cognomen/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/consens/","text":"set_consensus Sets the consensus to be used in polls and decisions. The scope of the set_consensus settings is determined by the set_consensus command location in the diego code. If the set_consensus command is placed after the go_diego command but before any instruct the consensus setting will be applied to the whole diego, unless overridden by the next set_consensus command in the diego code flow. If the set_consensus command is placed after a begin_instruct command, the scope of consensus will be applied to the instruct , unless overridden by the next set_consensus command (in the same instruct or a nested instruct ) in the diego code flow. The lowest level of override occurs with the _with_consensus sub command, available on most decision commands. The set_consensus command has privilege definition ability using both and each of the _for and _not sub commands. If the set_consensus command is never used, the consensus is defaulted to unanimous . The set_consensus command does not set consensus on elections, only on polls and robot decisions. set_consensus( consensus_type ) Sets the consensus of consensus_type : | consensus_type | Description | |--|--| | unanimous_wait_for_the_dead | Decisions are made only when there is a unanimous result but only after all dead robots have been resurrected and then resulted. | | unanimous | Decisions are made on an unanimous result, any dead robots are disregarded. | | authority | Decisions are based on the result of the highest authority robot(s) (using set_authority command). | | human_only | Decisions can only be made by a human(s). If there are no humans alive, consensus will automatically change to authority then back to human_only when one or more humans are resurrected. | | majority_wait_for_the_dead | Decisions are made on a majority (>=50%) basis of the results over the number of robot members but only after enough resurrected robots have resulted to make the majority (if required). | | majority | Decisions are made on a majority (>=50%) basis of the results over the number of robot members. | | decisive | Decisions are made on the majority results when the decisiveness limit (defaulted to 5 secs or the value set with the set_decisiveness command) has expired. | | first | Decisions are made on the first result. | set_consensus( consensus_type )_for( moniker1 , n... ) Consensus of consensus_type will apply only to the whitelist of ( moniker1 , n... ) of monikers (robots, swarms, labels of). set_consensus( consensus_type )_not(( moniker1 , n... ) Consensus of consensus_type will not apply to the blacklist of ( moniker1 , n... ) of monikers (robots, swarms, labels of). The defaulted or last known consensus will apply to those blacklist monikers. set_consensus( consensus_type )_for( moniker1 , n... )_not( moniker1 , n... ) An apply-list with a no-apply-list of monikers (robots, swarms, labels of) for consensus of consensus_type .","title":"Consens"},{"location":"metaphysic/obj/consens/#set_consensus","text":"Sets the consensus to be used in polls and decisions. The scope of the set_consensus settings is determined by the set_consensus command location in the diego code. If the set_consensus command is placed after the go_diego command but before any instruct the consensus setting will be applied to the whole diego, unless overridden by the next set_consensus command in the diego code flow. If the set_consensus command is placed after a begin_instruct command, the scope of consensus will be applied to the instruct , unless overridden by the next set_consensus command (in the same instruct or a nested instruct ) in the diego code flow. The lowest level of override occurs with the _with_consensus sub command, available on most decision commands. The set_consensus command has privilege definition ability using both and each of the _for and _not sub commands. If the set_consensus command is never used, the consensus is defaulted to unanimous . The set_consensus command does not set consensus on elections, only on polls and robot decisions.","title":"set_consensus"},{"location":"metaphysic/obj/consens/#set_consensusconsensus_type","text":"Sets the consensus of consensus_type : | consensus_type | Description | |--|--| | unanimous_wait_for_the_dead | Decisions are made only when there is a unanimous result but only after all dead robots have been resurrected and then resulted. | | unanimous | Decisions are made on an unanimous result, any dead robots are disregarded. | | authority | Decisions are based on the result of the highest authority robot(s) (using set_authority command). | | human_only | Decisions can only be made by a human(s). If there are no humans alive, consensus will automatically change to authority then back to human_only when one or more humans are resurrected. | | majority_wait_for_the_dead | Decisions are made on a majority (>=50%) basis of the results over the number of robot members but only after enough resurrected robots have resulted to make the majority (if required). | | majority | Decisions are made on a majority (>=50%) basis of the results over the number of robot members. | | decisive | Decisions are made on the majority results when the decisiveness limit (defaulted to 5 secs or the value set with the set_decisiveness command) has expired. | | first | Decisions are made on the first result. |","title":"set_consensus(consensus_type)"},{"location":"metaphysic/obj/consens/#set_consensusconsensus_type_formoniker1-n","text":"Consensus of consensus_type will apply only to the whitelist of ( moniker1 , n... ) of monikers (robots, swarms, labels of).","title":"set_consensus(consensus_type)_for(moniker1, n...)"},{"location":"metaphysic/obj/consens/#set_consensusconsensus_type_notmoniker1-n","text":"Consensus of consensus_type will not apply to the blacklist of ( moniker1 , n... ) of monikers (robots, swarms, labels of). The defaulted or last known consensus will apply to those blacklist monikers.","title":"set_consensus(consensus_type)_not((moniker1, n...)"},{"location":"metaphysic/obj/consens/#set_consensusconsensus_type_formoniker1-n_notmoniker1-n","text":"An apply-list with a no-apply-list of monikers (robots, swarms, labels of) for consensus of consensus_type .","title":"set_consensus(consensus_type)_for(moniker1, n...)_not(moniker1, n...)"},{"location":"metaphysic/obj/console/","text":"Console (object) log_console()_msg(Hello world!); Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Console (object)"},{"location":"metaphysic/obj/console/#console-object","text":"log_console()_msg(Hello world!);","title":"Console (object)"},{"location":"metaphysic/obj/console/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/console/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/console/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/console/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/console/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/console/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/console/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/console/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/console/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/console/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/console/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/coords/","text":"Coordinates (object) | _coords() _coords_( x_lat1 , y_long1 ) _coords_( x_lat1 , y_long1 , z_alt ) | Provides coordinates from proceeding object Provides two-dimensional coordinates of x_lat1 , y_long1 *Provides three-dimensional coordinates of x_lat1 , y_long1 , z_alt | coords | http://epsg.io/transform Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Coordinates (object)"},{"location":"metaphysic/obj/coords/#coordinates-object","text":"| _coords() _coords_( x_lat1 , y_long1 ) _coords_( x_lat1 , y_long1 , z_alt ) | Provides coordinates from proceeding object Provides two-dimensional coordinates of x_lat1 , y_long1 *Provides three-dimensional coordinates of x_lat1 , y_long1 , z_alt | coords | http://epsg.io/transform","title":"Coordinates (object)"},{"location":"metaphysic/obj/coords/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/coords/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/coords/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/coords/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/coords/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/coords/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/coords/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/coords/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/coords/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/coords/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/coords/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/corridor/","text":"Corridor (object) | corridor | A thing representation of physically defined 3d space, designed for a human, to manoeuvre inside, predominately along a single plane. There should be an attempt for physical (real-world) borders. The human version of a pipe . See also: arena ; fence ; pipe ; zone | corridor | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Corridor (object)"},{"location":"metaphysic/obj/corridor/#corridor-object","text":"| corridor | A thing representation of physically defined 3d space, designed for a human, to manoeuvre inside, predominately along a single plane. There should be an attempt for physical (real-world) borders. The human version of a pipe . See also: arena ; fence ; pipe ; zone | corridor |","title":"Corridor (object)"},{"location":"metaphysic/obj/corridor/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/corridor/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/corridor/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/corridor/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/corridor/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/corridor/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/corridor/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/corridor/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/corridor/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/corridor/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/corridor/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/course/","text":"Course (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Course (object)"},{"location":"metaphysic/obj/course/#course-object","text":"","title":"Course (object)"},{"location":"metaphysic/obj/course/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/course/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/course/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/course/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/course/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/course/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/course/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/course/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/course/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/course/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/course/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/device/","text":"Device (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Device (object)"},{"location":"metaphysic/obj/device/#device-object","text":"","title":"Device (object)"},{"location":"metaphysic/obj/device/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/device/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/device/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/device/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/device/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/device/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/device/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/device/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/device/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/device/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/device/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/displacem/","text":"Displacement | _displacemto( tomoniker ) _displacemto(\u276c unit \u276d, tomoniker ) | Provides the displacement from preceeding object to tomoniker object Provides the displacement from preceeding object to tomoniker object with specified unit | displacem | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Displacement"},{"location":"metaphysic/obj/displacem/#displacement","text":"| _displacemto( tomoniker ) _displacemto(\u276c unit \u276d, tomoniker ) | Provides the displacement from preceeding object to tomoniker object Provides the displacement from preceeding object to tomoniker object with specified unit | displacem |","title":"Displacement"},{"location":"metaphysic/obj/displacem/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/displacem/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/displacem/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/displacem/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/displacem/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/displacem/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/displacem/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/displacem/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/displacem/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/displacem/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/displacem/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/display/","text":"Display (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Display (object)"},{"location":"metaphysic/obj/display/#display-object","text":"","title":"Display (object)"},{"location":"metaphysic/obj/display/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/display/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/display/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/display/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/display/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/display/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/display/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/display/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/display/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/display/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/display/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/distan/","text":"Distance (object) Distance is the scalar quantity of the total length travelled by an object from one point to another. In abstract Diego the points will be point , in metaphysical Diego points will be either waypoint , pose , or, goal . In physical Diego points will be landmark or poi . Distance can be represented as both an object and a property . For a vector quantity for the distance from one point to another, refer to displacem . Distance vs. Displacement Credits: Stannered , CC BY-SA 3.0 , via Wikimedia Commons Syntax The default declaration syntax, for the distan object, is to provide at least a moniker . The lengthened version of distance can also be used: add_distan( moniker ); add_distance( moniker ); The distance object can be attached to a preceeding object , or many preceeding objects by just appending the distan object as it child. For example: add_distan(a-to-z-distance)_value({km},4.2); add_route(a-to-z)_distance(a-to-z-distance); log_console()_distan(a-to-z-distance); // 4.2km In addition to a direct declaration, the distan object can be declared from the moniker of another object , if that object used a distan property . The object-type is implied or can be provided (or cast): add_distan( ofmoniker ); add_distance( ofmoniker ); add_distance({ objtype }, ofmoniker ); add_distance({ objtype }, ofmoniker ); For example: add_route(a-to-b)_distance({m},34.2); add_route(b-to-c); log_console()_distan(a-to-b); // 34.2m log_console()_distan({route},b-to-c); // no distan defined // callee will return with_log()_distan({route},b-to-c)_err(no distan defined);","title":"Distance (object)"},{"location":"metaphysic/obj/distan/#distance-object","text":"Distance is the scalar quantity of the total length travelled by an object from one point to another. In abstract Diego the points will be point , in metaphysical Diego points will be either waypoint , pose , or, goal . In physical Diego points will be landmark or poi . Distance can be represented as both an object and a property . For a vector quantity for the distance from one point to another, refer to displacem . Distance vs. Displacement Credits: Stannered , CC BY-SA 3.0 , via Wikimedia Commons","title":"Distance (object)"},{"location":"metaphysic/obj/distan/#syntax","text":"The default declaration syntax, for the distan object, is to provide at least a moniker . The lengthened version of distance can also be used: add_distan( moniker ); add_distance( moniker ); The distance object can be attached to a preceeding object , or many preceeding objects by just appending the distan object as it child. For example: add_distan(a-to-z-distance)_value({km},4.2); add_route(a-to-z)_distance(a-to-z-distance); log_console()_distan(a-to-z-distance); // 4.2km In addition to a direct declaration, the distan object can be declared from the moniker of another object , if that object used a distan property . The object-type is implied or can be provided (or cast): add_distan( ofmoniker ); add_distance( ofmoniker ); add_distance({ objtype }, ofmoniker ); add_distance({ objtype }, ofmoniker ); For example: add_route(a-to-b)_distance({m},34.2); add_route(b-to-c); log_console()_distan(a-to-b); // 34.2m log_console()_distan({route},b-to-c); // no distan defined // callee will return with_log()_distan({route},b-to-c)_err(no distan defined);","title":"Syntax"},{"location":"metaphysic/obj/duct/","text":"Duct (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Duct (object)"},{"location":"metaphysic/obj/duct/#duct-object","text":"","title":"Duct (object)"},{"location":"metaphysic/obj/duct/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/duct/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/duct/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/duct/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/duct/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/duct/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/duct/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/duct/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/duct/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/duct/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/duct/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/euler/","text":"Euler (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Euler (object)"},{"location":"metaphysic/obj/euler/#euler-object","text":"","title":"Euler (object)"},{"location":"metaphysic/obj/euler/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/euler/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/euler/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/euler/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/euler/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/euler/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/euler/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/euler/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/euler/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/euler/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/euler/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/excurs/","text":"Excursions (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Excursions (object)"},{"location":"metaphysic/obj/excurs/#excursions-object","text":"","title":"Excursions (object)"},{"location":"metaphysic/obj/excurs/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/excurs/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/excurs/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/excurs/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/excurs/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/excurs/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/excurs/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/excurs/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/excurs/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/excurs/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/excurs/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/floor/","text":"Floor (object) | floor / level | | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Floor (object)"},{"location":"metaphysic/obj/floor/#floor-object","text":"| floor / level | |","title":"Floor (object)"},{"location":"metaphysic/obj/floor/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/floor/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/floor/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/floor/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/floor/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/floor/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/floor/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/floor/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/floor/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/floor/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/floor/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/fog/","text":"Fog (object) Puffs puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Fog (object)"},{"location":"metaphysic/obj/fog/#fog-object","text":"","title":"Fog (object)"},{"location":"metaphysic/obj/fog/#puffs","text":"puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room","title":" Puffs"},{"location":"metaphysic/obj/fog/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/fog/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/fog/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/fog/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/fog/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/fog/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/fog/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/fog/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/fog/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/fog/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/fog/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/foreign/","text":"Foreigner (object) | foreign [er] | | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Foreigner (object)"},{"location":"metaphysic/obj/foreign/#foreigner-object","text":"| foreign [er] | |","title":"Foreigner (object)"},{"location":"metaphysic/obj/foreign/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/foreign/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/foreign/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/foreign/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/foreign/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/foreign/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/foreign/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/foreign/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/foreign/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/foreign/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/foreign/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/funnel/","text":"Data Communication Management time management notes examples API funnel lennuf https://arxiv.org/pdf/1906.10641.pdf mavlink https://docs.wpilib.org/en/stable/docs/romi-robot/index.html https://www.bigocheatsheet.com/ Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Funnel"},{"location":"metaphysic/obj/funnel/#data-communication-management","text":"time management notes examples API funnel lennuf https://arxiv.org/pdf/1906.10641.pdf mavlink https://docs.wpilib.org/en/stable/docs/romi-robot/index.html https://www.bigocheatsheet.com/","title":" Data Communication Management"},{"location":"metaphysic/obj/funnel/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/funnel/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/funnel/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/funnel/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/funnel/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/funnel/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/funnel/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/funnel/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/funnel/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/funnel/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/funnel/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/gait/","text":"Gait (object) The gait object represents the learnt gait of a thingy. | gait | The thing version of stride | add_gait(hop) ; Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Gait (object)"},{"location":"metaphysic/obj/gait/#gait-object","text":"The gait object represents the learnt gait of a thingy. | gait | The thing version of stride | add_gait(hop) ;","title":"Gait (object)"},{"location":"metaphysic/obj/gait/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/gait/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/gait/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/gait/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/gait/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/gait/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/gait/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/gait/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/gait/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/gait/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/gait/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/gate/","text":"Gate (object) | gate | | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Gate (object)"},{"location":"metaphysic/obj/gate/#gate-object","text":"| gate | |","title":"Gate (object)"},{"location":"metaphysic/obj/gate/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/gate/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/gate/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/gate/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/gate/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/gate/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/gate/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/gate/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/gate/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/gate/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/gate/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/geofence/","text":"Geofence (object) | [geo-] fence | | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Geofence (object)"},{"location":"metaphysic/obj/geofence/#geofence-object","text":"| [geo-] fence | |","title":"Geofence (object)"},{"location":"metaphysic/obj/geofence/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/geofence/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/geofence/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/geofence/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/geofence/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/geofence/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/geofence/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/geofence/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/geofence/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/geofence/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/geofence/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/ghost/","text":"Ghost (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Ghost (object)"},{"location":"metaphysic/obj/ghost/#ghost-object","text":"","title":"Ghost (object)"},{"location":"metaphysic/obj/ghost/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/ghost/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/ghost/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/ghost/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/ghost/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/ghost/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/ghost/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/ghost/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/ghost/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/ghost/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/ghost/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/goal/","text":"Goal (object) The goal object is a representation of a temporal event in an orientation at a physical point. goal s require a moniker;, a current position (i.e. a waypoint); an orientation coorespondence to their waypoint (i.e. a pose), and temporal coordinates. The goal is at the lowest hierarchical level of the 'Route Matrix', being similar to a waypoint and a goposeal . Route Matrix In the family of 'location-and-orientation-and-time' based navigation objects, one tour has many journ s, one journ has many trip s, and, one trip has many goals s. Declaration The default declaration of the goal object is to at least provide a moniker , however, at declaration it is common to provide a temporal coordingate using the _boutat posit. The _boutat posits accepts a bout object, and so uses the same bout child posits. add_goal( moniker ); add_goal( moniker1 , moniker2 ,...); add_goal( moniker )_orientat( x , y , z ); add_pose( moniker )_orientat( x , y , z , w ); add_pose( moniker )_orientat({ order }, x , y , z , w ); add_pose( moniker )_orientat(\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat({ order },\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat( x , y , z )_euler( order )_angles( unit ); add_pose( moniker )_orientat( x , y , z , w )_quatern( order )_angles( unit ); goal _navresult({0|1|2|3}) _navresult({unknown|succeeded|canceled|failed})","title":"Goal (object)"},{"location":"metaphysic/obj/goal/#goal-object","text":"The goal object is a representation of a temporal event in an orientation at a physical point. goal s require a moniker;, a current position (i.e. a waypoint); an orientation coorespondence to their waypoint (i.e. a pose), and temporal coordinates. The goal is at the lowest hierarchical level of the 'Route Matrix', being similar to a waypoint and a goposeal . Route Matrix In the family of 'location-and-orientation-and-time' based navigation objects, one tour has many journ s, one journ has many trip s, and, one trip has many goals s.","title":"Goal (object)"},{"location":"metaphysic/obj/goal/#declaration","text":"The default declaration of the goal object is to at least provide a moniker , however, at declaration it is common to provide a temporal coordingate using the _boutat posit. The _boutat posits accepts a bout object, and so uses the same bout child posits. add_goal( moniker ); add_goal( moniker1 , moniker2 ,...); add_goal( moniker )_orientat( x , y , z ); add_pose( moniker )_orientat( x , y , z , w ); add_pose( moniker )_orientat({ order }, x , y , z , w ); add_pose( moniker )_orientat(\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat({ order },\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat( x , y , z )_euler( order )_angles( unit ); add_pose( moniker )_orientat( x , y , z , w )_quatern( order )_angles( unit ); goal _navresult({0|1|2|3}) _navresult({unknown|succeeded|canceled|failed})","title":"Declaration"},{"location":"metaphysic/obj/instruct/","text":"Instructors Instructor commands package other commands into sets, effectively an instruct is a set of instructions . An instruct can be called, looped and ended using instructor commands. begin_instruct The begin_instruct command marks the start of an instruct and monikers it for reference. Internally the begin_instruct command also sets up all the default declaration for the instruct . The begin_instruct command cannot be parameter-less, it must contain a unique (to the diego ) ' instruct_moniker '. The begin_instruct command has no privilege definition ability, however, its associated start_instruct command has privilege definition ability. An instruct is delimited by the loop_instruct and end_instruct commands, either of which must be present. The instruct is not allowed to bled. begin_instruct( instruct_moniker ) The start of a instruct used to package commands under the label of instruct_moinker . Note begin_instruct only declares an instruct , to start (initiate) an instruct use start_instruct( instruct_moniker ) . An instruct_moniker is required in order for the instruct to start (using start_instruct( instruct_moniker ) ). Linking & Events do_diego hey_diego oh_diego events: start_instruct loop_instruct end_instruct errors from oh_diego-less commands err_instruct cmds: \u2705 allowed \u2705 allowed The do_diego event can only be initiated with the start_instruct command with matching instruct_moniker . A hey_diego event is not triggered on begin_instruct , only through loop_instruct or end_instruct elsewhere in the diego code. An oh_diego event is initiated when any error from an oh_diego-less command, inside the instruct 'bubbles up'; or, on err_instruct( instruct_moniker ) explicit command, whichever comes first. Both hey_diego and oh_diego commands are optional, and can be useful for robots to report progress/counters/warnings/errors of the instruct to humans or other robots. Example In this example we are going to instruct a robot(s) to go back and forth along a route called ' border ', until there is an error en-route on route ' border '. For every journey along border route and then back again along border route, the robot will announce how many times the ' patrol complete '. When a error occurs on the journey on route ' border ' the robot(s) will alert the human(s) of an ' issue on border patrol '. code: use_namespace(diego_sandbox); begin_instruct(border patrol); add_counter(patrol complete):; : alert_error(issue on border patrol); go_route(border)?:; ? goback_route(border)|?:; | with_counter(patrol complete)_inc(++); ? loop_instruct(border patrol); : err_instruct(border patrol); : err_instruct(border patrol); end_instruct(border patrol); start_instruct(border patrol)_forof(droid1)_you(droid1)?:; ? msg_human(Jim)_counter(patrol complete) : msg_human(Jim)_err(); flow: graph TD 1[\"go_diego()\"] --> 10[\"start_instruct(border patrol)\"] 10 --> 2[\"begin_instruct(border patrol)\"] 2 --:--> 4[\"alert_error(issue on border patrol)\"] 2 --- 5[\"go_route(border)\"] 5 --?--> 6[\"goback_route(border)\"] 6 --?--> 8[\"loop_instruct(border patrol)\"] 6 --:--> 7[\"err_instruct(border patrol)\"] 8 --> 3[\"call_counter(patrol complete)\"] 7 --> 4 4 --> 9[\"end_instruct(border patrol)\"] loop_instruct loop_instruct( instruct_moniker ) end_instruct end_instruct( instruct_moniker ) The finisher of an instruct ends with end_instruct( instruct_moniker ) , with no sub command the instruct will end for all monikers (robots, swarms, labels of). Privileges end_instruct( instruct_moniker ) [...] _for( moniker1 , n... ) A whitelist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that should only be allowed to finish the instruct_moniker instruct . end_instruct( instruct_moniker ) [...] _not(( moniker1 , n... ) A blacklist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that are denied to finish the instruct_moniker instruct . end_instruct( instruct_moniker ) [...] _for( moniker1 , n... )_not( moniker1 , n... ) A whitelist with blacklist of monikers (robots, swarms, labels of) that allowed/denied to finish the instruct_moniker instruct . start_instruct Where a duplicate start_instruct (with the same signature) exists the first start_instruct command in the diego flow will be executed and later duplicates will restart the instruct at begin_instuct with no hey_diego__ nor _oh_diego events triggered. start_instruct( instruct_moniker ) The initiation of an instruct starts with start_instruct( instruct_moniker ) , with no sub command the instruct will start for all monikers (robots, swarms, labels of). Sub Commands start_instruct( instruct_moniker )_for( moniker1 , n... ) An whitelist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that should only be allowed to initiate the instruct_moniker instruct . start_instruct( instruct_moniker )_not(( moniker1 , n... ) A blacklist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that are denied to initiate the instruct_moniker instruct . Procedural Structuring procedural notes examples API instruct , instruction instruct proc , procedure proc prog , program , programme prog action action","title":"Instructors"},{"location":"metaphysic/obj/instruct/#instructors","text":"Instructor commands package other commands into sets, effectively an instruct is a set of instructions . An instruct can be called, looped and ended using instructor commands.","title":"Instructors"},{"location":"metaphysic/obj/instruct/#begin_instruct","text":"The begin_instruct command marks the start of an instruct and monikers it for reference. Internally the begin_instruct command also sets up all the default declaration for the instruct . The begin_instruct command cannot be parameter-less, it must contain a unique (to the diego ) ' instruct_moniker '. The begin_instruct command has no privilege definition ability, however, its associated start_instruct command has privilege definition ability. An instruct is delimited by the loop_instruct and end_instruct commands, either of which must be present. The instruct is not allowed to bled.","title":"begin_instruct"},{"location":"metaphysic/obj/instruct/#begin_instructinstruct_moniker","text":"The start of a instruct used to package commands under the label of instruct_moinker . Note begin_instruct only declares an instruct , to start (initiate) an instruct use start_instruct( instruct_moniker ) . An instruct_moniker is required in order for the instruct to start (using start_instruct( instruct_moniker ) ).","title":"begin_instruct(instruct_moniker)"},{"location":"metaphysic/obj/instruct/#linking-events","text":"do_diego hey_diego oh_diego events: start_instruct loop_instruct end_instruct errors from oh_diego-less commands err_instruct cmds: \u2705 allowed \u2705 allowed The do_diego event can only be initiated with the start_instruct command with matching instruct_moniker . A hey_diego event is not triggered on begin_instruct , only through loop_instruct or end_instruct elsewhere in the diego code. An oh_diego event is initiated when any error from an oh_diego-less command, inside the instruct 'bubbles up'; or, on err_instruct( instruct_moniker ) explicit command, whichever comes first. Both hey_diego and oh_diego commands are optional, and can be useful for robots to report progress/counters/warnings/errors of the instruct to humans or other robots.","title":"Linking &amp; Events"},{"location":"metaphysic/obj/instruct/#example","text":"In this example we are going to instruct a robot(s) to go back and forth along a route called ' border ', until there is an error en-route on route ' border '. For every journey along border route and then back again along border route, the robot will announce how many times the ' patrol complete '. When a error occurs on the journey on route ' border ' the robot(s) will alert the human(s) of an ' issue on border patrol '. code: use_namespace(diego_sandbox); begin_instruct(border patrol); add_counter(patrol complete):; : alert_error(issue on border patrol); go_route(border)?:; ? goback_route(border)|?:; | with_counter(patrol complete)_inc(++); ? loop_instruct(border patrol); : err_instruct(border patrol); : err_instruct(border patrol); end_instruct(border patrol); start_instruct(border patrol)_forof(droid1)_you(droid1)?:; ? msg_human(Jim)_counter(patrol complete) : msg_human(Jim)_err(); flow: graph TD 1[\"go_diego()\"] --> 10[\"start_instruct(border patrol)\"] 10 --> 2[\"begin_instruct(border patrol)\"] 2 --:--> 4[\"alert_error(issue on border patrol)\"] 2 --- 5[\"go_route(border)\"] 5 --?--> 6[\"goback_route(border)\"] 6 --?--> 8[\"loop_instruct(border patrol)\"] 6 --:--> 7[\"err_instruct(border patrol)\"] 8 --> 3[\"call_counter(patrol complete)\"] 7 --> 4 4 --> 9[\"end_instruct(border patrol)\"]","title":"Example"},{"location":"metaphysic/obj/instruct/#loop_instruct","text":"","title":"loop_instruct"},{"location":"metaphysic/obj/instruct/#loop_instructinstruct_moniker","text":"","title":"loop_instruct(instruct_moniker)"},{"location":"metaphysic/obj/instruct/#end_instruct","text":"","title":"end_instruct"},{"location":"metaphysic/obj/instruct/#end_instructinstruct_moniker","text":"The finisher of an instruct ends with end_instruct( instruct_moniker ) , with no sub command the instruct will end for all monikers (robots, swarms, labels of).","title":"end_instruct(instruct_moniker)"},{"location":"metaphysic/obj/instruct/#privileges","text":"","title":"Privileges"},{"location":"metaphysic/obj/instruct/#end_instructinstruct_moniker_formoniker1-n","text":"A whitelist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that should only be allowed to finish the instruct_moniker instruct .","title":"end_instruct(instruct_moniker)[...]_for(moniker1, n...)"},{"location":"metaphysic/obj/instruct/#end_instructinstruct_moniker_notmoniker1-n","text":"A blacklist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that are denied to finish the instruct_moniker instruct .","title":"end_instruct(instruct_moniker)[...]_not((moniker1, n...)"},{"location":"metaphysic/obj/instruct/#end_instructinstruct_moniker_formoniker1-n_notmoniker1-n","text":"A whitelist with blacklist of monikers (robots, swarms, labels of) that allowed/denied to finish the instruct_moniker instruct .","title":"end_instruct(instruct_moniker)[...]_for(moniker1, n...)_not(moniker1, n...)"},{"location":"metaphysic/obj/instruct/#start_instruct","text":"Where a duplicate start_instruct (with the same signature) exists the first start_instruct command in the diego flow will be executed and later duplicates will restart the instruct at begin_instuct with no hey_diego__ nor _oh_diego events triggered.","title":"start_instruct"},{"location":"metaphysic/obj/instruct/#start_instructinstruct_moniker","text":"The initiation of an instruct starts with start_instruct( instruct_moniker ) , with no sub command the instruct will start for all monikers (robots, swarms, labels of).","title":"start_instruct(instruct_moniker)"},{"location":"metaphysic/obj/instruct/#sub-commands","text":"","title":"Sub Commands"},{"location":"metaphysic/obj/instruct/#start_instructinstruct_moniker_formoniker1-n","text":"An whitelist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that should only be allowed to initiate the instruct_moniker instruct .","title":"start_instruct(instruct_moniker)_for(moniker1, n...)"},{"location":"metaphysic/obj/instruct/#start_instructinstruct_moniker_notmoniker1-n","text":"A blacklist ( moniker1 , n... ) of monikers (robots, swarms, labels of) that are denied to initiate the instruct_moniker instruct .","title":"start_instruct(instruct_moniker)_not((moniker1, n...)"},{"location":"metaphysic/obj/instruct/#procedural-structuring","text":"procedural notes examples API instruct , instruction instruct proc , procedure proc prog , program , programme prog action action","title":" Procedural Structuring"},{"location":"metaphysic/obj/itiner/","text":"Itinerary (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Itinerary (object)"},{"location":"metaphysic/obj/itiner/#itinerary-object","text":"","title":"Itinerary (object)"},{"location":"metaphysic/obj/itiner/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/itiner/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/itiner/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/itiner/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/itiner/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/itiner/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/itiner/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/itiner/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/itiner/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/itiner/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/itiner/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/ject/","text":"ject(ob) ject(sub) Signs Signs are using in traffic object recognition. Instincts Current instincts availble for sign are in apt_instinct(sign); \\* ** Instincts for `sign` ** {\"version\":\"1.0\"} ** */ // All `sign`s are obs with_ject(ob)_toobject(sign); // Provide best-matching class if non-existant with_sign()_posit(class)_exists(false)?; ? with_sign()_class(other); // Provide locale with_sign()_locale()_me(); V4UMW+AV idontcare1234567@ object notes vision , fov field of view, a 3d spacial zone where pose from camera position and angle range should trigger a find, fix, finish procedure. with_vision()_current()?: use the vectors of the current vision to determine which signs to find, fix and finish. fov - field of view also: vision vision - vector( x , y , z , magnitude-value )_magnitude( scalar )_unit( unit ) vector(23.42335, -28.44076, 0.20290, 64.3)_magnitude(cadence)_unit(rpm) PIOSEE PIOSEE - Acronym for decision making. P - Problem identify I - Information anailable O - Options S - Select option E - Execute option E - Evaluate begin_poisee()_prob()_info()_opt()_select()_exec()_eval(); end_poisee();","title":"Ject"},{"location":"metaphysic/obj/ject/#signs","text":"Signs are using in traffic object recognition.","title":"Signs"},{"location":"metaphysic/obj/ject/#instincts","text":"Current instincts availble for sign are in apt_instinct(sign); \\* ** Instincts for `sign` ** {\"version\":\"1.0\"} ** */ // All `sign`s are obs with_ject(ob)_toobject(sign); // Provide best-matching class if non-existant with_sign()_posit(class)_exists(false)?; ? with_sign()_class(other); // Provide locale with_sign()_locale()_me(); V4UMW+AV idontcare1234567@ object notes vision , fov field of view, a 3d spacial zone where pose from camera position and angle range should trigger a find, fix, finish procedure. with_vision()_current()?: use the vectors of the current vision to determine which signs to find, fix and finish. fov - field of view also: vision vision - vector( x , y , z , magnitude-value )_magnitude( scalar )_unit( unit ) vector(23.42335, -28.44076, 0.20290, 64.3)_magnitude(cadence)_unit(rpm) PIOSEE PIOSEE - Acronym for decision making. P - Problem identify I - Information anailable O - Options S - Select option E - Execute option E - Evaluate begin_poisee()_prob()_info()_opt()_select()_exec()_eval(); end_poisee();","title":"Instincts"},{"location":"metaphysic/obj/journ/","text":"Journey (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Journey (object)"},{"location":"metaphysic/obj/journ/#journey-object","text":"","title":"Journey (object)"},{"location":"metaphysic/obj/journ/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/journ/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/journ/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/journ/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/journ/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/journ/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/journ/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/journ/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/journ/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/journ/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/journ/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/lease/","text":"Lease (object) acquire_lease() retain_lease() -- Source: https://dev.bostondynamics.com/docs/concepts/lease_service Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Lease (object)"},{"location":"metaphysic/obj/lease/#lease-object","text":"acquire_lease() retain_lease() -- Source: https://dev.bostondynamics.com/docs/concepts/lease_service","title":"Lease (object)"},{"location":"metaphysic/obj/lease/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/lease/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/lease/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/lease/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/lease/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/lease/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/lease/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/lease/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/lease/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/lease/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/lease/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/lennuf/","text":"Lennuf (object) Data Communication Management time management notes examples API funnel lennuf https://arxiv.org/pdf/1906.10641.pdf mavlink https://docs.wpilib.org/en/stable/docs/romi-robot/index.html https://www.bigocheatsheet.com/ Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Lennuf (object)"},{"location":"metaphysic/obj/lennuf/#lennuf-object","text":"","title":"Lennuf (object)"},{"location":"metaphysic/obj/lennuf/#data-communication-management","text":"time management notes examples API funnel lennuf https://arxiv.org/pdf/1906.10641.pdf mavlink https://docs.wpilib.org/en/stable/docs/romi-robot/index.html https://www.bigocheatsheet.com/","title":" Data Communication Management"},{"location":"metaphysic/obj/lennuf/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/lennuf/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/lennuf/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/lennuf/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/lennuf/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/lennuf/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/lennuf/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/lennuf/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/lennuf/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/lennuf/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/lennuf/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/liken/","text":"Liken (object) A compartive metric of a thingy, used to compare performance, or test, through comparison, an identical object off two or more similar thingies. A liken object is a detrivative of the abstract object lexikon . Sytnax add_liken( moniker ) _toliken( moniker ) _metric( moniker ) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Liken (object)"},{"location":"metaphysic/obj/liken/#liken-object","text":"A compartive metric of a thingy, used to compare performance, or test, through comparison, an identical object off two or more similar thingies. A liken object is a detrivative of the abstract object lexikon .","title":"Liken (object)"},{"location":"metaphysic/obj/liken/#sytnax","text":"add_liken( moniker ) _toliken( moniker ) _metric( moniker )","title":"Sytnax"},{"location":"metaphysic/obj/liken/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/liken/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/liken/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/liken/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/liken/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/liken/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/liken/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/liken/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/liken/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/liken/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/liken/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/litsan/","text":"Line in the Sand (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Line in the Sand (object)"},{"location":"metaphysic/obj/litsan/#line-in-the-sand-object","text":"","title":"Line in the Sand (object)"},{"location":"metaphysic/obj/litsan/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/litsan/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/litsan/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/litsan/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/litsan/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/litsan/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/litsan/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/litsan/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/litsan/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/litsan/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/litsan/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/map/","text":"Map add_const(ext_wall_width)_v(\u276cm\u276d,0.8); add_const(int_wall_width)_v(\u276cm\u276d,0.4); build_map({2d},{wl},{xy},{boat},\u276cm\u276d,primrose2d) ()_origin(0,0); add_layer(rooms) ()_origin(0,0); ()_room({bed},bed2)_rect(4.2,3.0)_coord([],[])_calc(0+[ext_wall_width]); ()_room({bed},bed1)_rect(3.8,4.0)+coord([x],[y]) _calc(x,[ext_wall_width]+[bed2.width]+[int_wall_width]) _calc(y,[ext_wall_width]) ; ()_room({bath},bath)_rect(3.0,1.8)_coord([x],[y]) _calc(x,[ext_wall_width]) _calc(y,[ext_wall_width]+[bed2.length]+) ; ()_wall(bed2_ext_stern)_rect([w],[l]) _calc(w,[ext_wall_width]+[bed2.width]+([int_wall_width]/2)) _calc(l,[ext_wall_width]) ?_stern(); ?_exterior(); ; ()_wall(bed2_ext_starb)_rect([w],[l]) _calc(w,[ext_wall_width]) _calc(l,[ext_wall_width]+[bed2.length]+([int_wall_width]/2)) ?_starb(); ?_exterior(); ; ()_wall(bed1_bed2_int)_rect([w],[l]) _calc(w,[int_wall_width]) _calc(h,[bed2.length]+[int_wall_width]) ; 3.783783784 Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Map"},{"location":"metaphysic/obj/map/#map","text":"add_const(ext_wall_width)_v(\u276cm\u276d,0.8); add_const(int_wall_width)_v(\u276cm\u276d,0.4); build_map({2d},{wl},{xy},{boat},\u276cm\u276d,primrose2d) ()_origin(0,0); add_layer(rooms) ()_origin(0,0); ()_room({bed},bed2)_rect(4.2,3.0)_coord([],[])_calc(0+[ext_wall_width]); ()_room({bed},bed1)_rect(3.8,4.0)+coord([x],[y]) _calc(x,[ext_wall_width]+[bed2.width]+[int_wall_width]) _calc(y,[ext_wall_width]) ; ()_room({bath},bath)_rect(3.0,1.8)_coord([x],[y]) _calc(x,[ext_wall_width]) _calc(y,[ext_wall_width]+[bed2.length]+) ; ()_wall(bed2_ext_stern)_rect([w],[l]) _calc(w,[ext_wall_width]+[bed2.width]+([int_wall_width]/2)) _calc(l,[ext_wall_width]) ?_stern(); ?_exterior(); ; ()_wall(bed2_ext_starb)_rect([w],[l]) _calc(w,[ext_wall_width]) _calc(l,[ext_wall_width]+[bed2.length]+([int_wall_width]/2)) ?_starb(); ?_exterior(); ; ()_wall(bed1_bed2_int)_rect([w],[l]) _calc(w,[int_wall_width]) _calc(h,[bed2.length]+[int_wall_width]) ; 3.783783784","title":"Map"},{"location":"metaphysic/obj/map/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/map/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/map/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/map/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/map/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/map/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/map/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/map/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/map/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/map/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/map/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/marack/","text":"Marack (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Marack (object)"},{"location":"metaphysic/obj/marack/#marack-object","text":"","title":"Marack (object)"},{"location":"metaphysic/obj/marack/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/marack/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/marack/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/marack/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/marack/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/marack/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/marack/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/marack/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/marack/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/marack/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/marack/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/metric/","text":"Metric (object) add_metric({name/uuid}) _scalar({scalar}[, {unit}]) _unit({unit}) _for({name/uuid_1}[, ...{name/uuid_n}]) _pulse() _tracker() add_metric( moniker ) add_metric( moniker )_set(...) set_metric( moniker ,settings...) Properties property datatype / unit description scalar {id} / {id_3}[^3btyehex] A 3 Byte hexidecimal unique idendifier used in adsb messaging Posits posit datatype / unit description _scalar( moniker ) _scalar({dt}, moniker ) {id} / {id_3}[^3btyehex] A 3 Byte hexidecimal unique idendifier used in adsb messaging Data Management data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":"Metric (object)"},{"location":"metaphysic/obj/metric/#metric-object","text":"add_metric({name/uuid}) _scalar({scalar}[, {unit}]) _unit({unit}) _for({name/uuid_1}[, ...{name/uuid_n}]) _pulse() _tracker() add_metric( moniker ) add_metric( moniker )_set(...) set_metric( moniker ,settings...)","title":"Metric (object)"},{"location":"metaphysic/obj/metric/#properties","text":"property datatype / unit description scalar {id} / {id_3}[^3btyehex] A 3 Byte hexidecimal unique idendifier used in adsb messaging","title":"Properties"},{"location":"metaphysic/obj/metric/#posits","text":"posit datatype / unit description _scalar( moniker ) _scalar({dt}, moniker ) {id} / {id_3}[^3btyehex] A 3 Byte hexidecimal unique idendifier used in adsb messaging","title":"Posits"},{"location":"metaphysic/obj/metric/#data-management","text":"data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":" Data Management"},{"location":"metaphysic/obj/mission/","text":"Mission (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Mission (object)"},{"location":"metaphysic/obj/mission/#mission-object","text":"","title":"Mission (object)"},{"location":"metaphysic/obj/mission/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/mission/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/mission/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/mission/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/mission/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/mission/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/mission/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/mission/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/mission/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/mission/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/mission/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/mist/","text":"Mist (object) Puffs puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Mist (object)"},{"location":"metaphysic/obj/mist/#mist-object","text":"","title":"Mist (object)"},{"location":"metaphysic/obj/mist/#puffs","text":"puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room","title":" Puffs"},{"location":"metaphysic/obj/mist/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/mist/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/mist/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/mist/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/mist/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/mist/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/mist/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/mist/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/mist/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/mist/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/mist/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/mode/","text":"Mode (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Mode (object)"},{"location":"metaphysic/obj/mode/#mode-object","text":"","title":"Mode (object)"},{"location":"metaphysic/obj/mode/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/mode/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/mode/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/mode/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/mode/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/mode/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/mode/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/mode/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/mode/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/mode/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/mode/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/moniker/","text":"Moniker (object) | moniker unique one moniker to one thingy Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Moniker (object)"},{"location":"metaphysic/obj/moniker/#moniker-object","text":"| moniker unique one moniker to one thingy","title":"Moniker (object)"},{"location":"metaphysic/obj/moniker/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/moniker/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/moniker/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/moniker/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/moniker/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/moniker/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/moniker/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/moniker/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/moniker/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/moniker/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/moniker/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/msg/","text":"Message (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Message (object)"},{"location":"metaphysic/obj/msg/#message-object","text":"","title":"Message (object)"},{"location":"metaphysic/obj/msg/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/msg/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/msg/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/msg/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/msg/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/msg/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/msg/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/msg/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/msg/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/msg/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/msg/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/ob/","text":"Ob (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Ob (object)"},{"location":"metaphysic/obj/ob/#ob-object","text":"","title":"Ob (object)"},{"location":"metaphysic/obj/ob/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/ob/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/ob/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/ob/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/ob/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/ob/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/ob/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/ob/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/ob/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/ob/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/ob/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/obstacle/","text":"Obstacle (object) The obstacle object is derived from the ob and stacle objects representing a stationary object that blocks a route/path/way of a thingy. The sibling of an substacle , and the cousin of an object . flowchart LR ob(ob) <--> stacle(stacle) sub(sub) <--> stacle stacle --> obstacle([obstacle]) stacle --> substacle(substacle) ob <--> ject(ject) sub <--> ject ject --> object(object) ject --> subject(subject) Stacle & Ject Hierarchy Declaration The default declaration of the obstacle object is to at least provide a moniker . The derived objects can be declared by name. The obstacle object can also be declared by casting ob or stacle . add_obstacle( moniker ); add_stacle({ ob }, moniker ); add_ob({stacle}, moniker ); A type ( {ob} or {sub} ) can be provided at declaration using curly brackets ( {} ).","title":"Obstacle (object)"},{"location":"metaphysic/obj/obstacle/#obstacle-object","text":"The obstacle object is derived from the ob and stacle objects representing a stationary object that blocks a route/path/way of a thingy. The sibling of an substacle , and the cousin of an object . flowchart LR ob(ob) <--> stacle(stacle) sub(sub) <--> stacle stacle --> obstacle([obstacle]) stacle --> substacle(substacle) ob <--> ject(ject) sub <--> ject ject --> object(object) ject --> subject(subject) Stacle & Ject Hierarchy","title":"Obstacle (object)"},{"location":"metaphysic/obj/obstacle/#declaration","text":"The default declaration of the obstacle object is to at least provide a moniker . The derived objects can be declared by name. The obstacle object can also be declared by casting ob or stacle . add_obstacle( moniker ); add_stacle({ ob }, moniker ); add_ob({stacle}, moniker ); A type ( {ob} or {sub} ) can be provided at declaration using curly brackets ( {} ).","title":"Declaration"},{"location":"metaphysic/obj/path/","text":"Path (object) The path object is a representation of a pair of two physical point and there relationship between them. path s require a moniker and two waypoints. The path is at the preultimate lowest hierarchical level of the 'Route Matrix', being similar to a way and a trip . Route Matrix In the family of 'location' based navigation objects, one itiner has many route s, one route has many path s, and, one path has a pair of waypoints s. Declaration The default declaration of the path object is to at least provide a moniker , however, at declaration it is common to provide two locations using either: a child waypoint (or shortened wp ) assignment; or, using the _coords posit. add_path( moniker ); add_path( moniker1 , moniker2 ,...); add_path( moniker )_wp( moniker )_wp( moniker ); add_waypoint( moniker )_coords( x_lat , y_long , z_alt )_coords( x_lat , y_long , z_alt ); The parameters of _coords are numeric, when not specified they will be implied to be {double} . Providing x_lat and y_long only implies a two-dimensional waypoint, and adding the z_alt parameter implies a three-dimensional waypoint. waypoint can be shortened to wp , both terms are syntactically the same and can be used freely and interchangabily. When a waypoint object comes after a path object it is assigned as its child. Any more than two waypoints added, and the path will be recast as route object . The paths will then be paired off as children of the route . The newly formed path forsake their moniker to their parent route , for example: add_path(path_or_route)_wp(wp1)_wp(wp2); log_console()_path(path_or_route)_typeof(); // {path} with_path(path_or_route)_wp(wp3); log_console()[]: [])_nameof()_typeof(path_or_route); // path_or_route: {route} log_console([]: [])_nameof()_rosaryof(path_or_route); // path_or_route: [wp1]\u2194[wp2]\u2194[wp3] log_console([]: [])_nameof()_pathof(path_or_route); // : [wp1]\u2194[wp2],: [wp2]\u2194[wp3] Relationship The path object is used to hold information on the relationship between the pair of waypoints. It should be noted that the relationship only provide scalar values and the relationship is bijective, as dipicted with the left-right arrow ( \u2194 ). The relationship of the left waypoint to the right waypoint is the same as the relationship of the right waypoint to the left. Physical Distance (metaphorical pathway - path of least resistance) Desired Path Planar Distance with_path( moniker )_distan_(\u276c unit \u276d, value ); with_path( moniker )_distan( value ); with_path( moniker )_distan(, value )_unit( unit ); https://en.wikipedia.org/wiki/Path_of_least_resistance#:~:text=The%20path%20of%20least%20resistance,entity%20takes%20a%20given%20path. https://en.wikipedia.org/wiki/Desire_path extimated Breath - length = interspace = gap = extene = range = reach Great Circle Distance Note, that even if the distance to travel has a one-way gate (diode) then this is ignored. Geodesic Distance https://owlcation.com/social-sciences/Measuring-Distances-on-Earth Absolute Altitude Difference with_path( moniker )_absaltdiff_(\u276c unit \u276d, value ); with_path( moniker )_absaltdiff( value ); with_path( moniker )_absaltdiff(, value )_unit( unit ); Absolute Elevation Difference with_path( moniker )_abselevdiff_(\u276c unit \u276d, value ); with_path( moniker )_abselevdiff( value ); with_path( moniker )_abselevdiff(, value )_unit( unit ); purlieus, environs or neighborhood. ambit rosary log_console()_itiner(itiner1)_rosary(); // wp1\u2192wp2\u2192wp3\u2192wp4\u2192wp5\u2192wp6,wp5\u2192wp4,wp4\u2192wp3,wp10\u2192wp2,wp3\u2192wp7\u2192wp8,wp7\u2192wp9,wp9\u2192wp7 /* log_console()_itiner(itiner1)_rosary()_mermaid({code}\u276d); wp1 --> wp2 --> wp3 --> wp4 --> wp5 --> wp6 => wp5 --> wp4 => wp4 --> wp3 => wp10 --> wp2 => wp3 --> wp7 --> wp8 => wp7 --> wp9 => wp9 --> wp7 /* log_console()_itiner(itiner1)_rosary()_mermaid({lr}); graph LR wp1 --> wp2 --> wp3 --> wp4 --> wp5 --> wp6 wp5 --> wp4 wp4 --> wp3 wp10 --> wp2 wp3 --> wp7 --> wp8 wp7 --> wp9 wp9 --> wp7","title":"Path (object)"},{"location":"metaphysic/obj/path/#path-object","text":"The path object is a representation of a pair of two physical point and there relationship between them. path s require a moniker and two waypoints. The path is at the preultimate lowest hierarchical level of the 'Route Matrix', being similar to a way and a trip . Route Matrix In the family of 'location' based navigation objects, one itiner has many route s, one route has many path s, and, one path has a pair of waypoints s.","title":"Path (object)"},{"location":"metaphysic/obj/path/#declaration","text":"The default declaration of the path object is to at least provide a moniker , however, at declaration it is common to provide two locations using either: a child waypoint (or shortened wp ) assignment; or, using the _coords posit. add_path( moniker ); add_path( moniker1 , moniker2 ,...); add_path( moniker )_wp( moniker )_wp( moniker ); add_waypoint( moniker )_coords( x_lat , y_long , z_alt )_coords( x_lat , y_long , z_alt ); The parameters of _coords are numeric, when not specified they will be implied to be {double} . Providing x_lat and y_long only implies a two-dimensional waypoint, and adding the z_alt parameter implies a three-dimensional waypoint. waypoint can be shortened to wp , both terms are syntactically the same and can be used freely and interchangabily. When a waypoint object comes after a path object it is assigned as its child. Any more than two waypoints added, and the path will be recast as route object . The paths will then be paired off as children of the route . The newly formed path forsake their moniker to their parent route , for example: add_path(path_or_route)_wp(wp1)_wp(wp2); log_console()_path(path_or_route)_typeof(); // {path} with_path(path_or_route)_wp(wp3); log_console()[]: [])_nameof()_typeof(path_or_route); // path_or_route: {route} log_console([]: [])_nameof()_rosaryof(path_or_route); // path_or_route: [wp1]\u2194[wp2]\u2194[wp3] log_console([]: [])_nameof()_pathof(path_or_route); // : [wp1]\u2194[wp2],: [wp2]\u2194[wp3]","title":"Declaration"},{"location":"metaphysic/obj/path/#relationship","text":"The path object is used to hold information on the relationship between the pair of waypoints. It should be noted that the relationship only provide scalar values and the relationship is bijective, as dipicted with the left-right arrow ( \u2194 ). The relationship of the left waypoint to the right waypoint is the same as the relationship of the right waypoint to the left. Physical Distance (metaphorical pathway - path of least resistance) Desired Path Planar Distance with_path( moniker )_distan_(\u276c unit \u276d, value ); with_path( moniker )_distan( value ); with_path( moniker )_distan(, value )_unit( unit ); https://en.wikipedia.org/wiki/Path_of_least_resistance#:~:text=The%20path%20of%20least%20resistance,entity%20takes%20a%20given%20path. https://en.wikipedia.org/wiki/Desire_path extimated Breath - length = interspace = gap = extene = range = reach Great Circle Distance Note, that even if the distance to travel has a one-way gate (diode) then this is ignored. Geodesic Distance https://owlcation.com/social-sciences/Measuring-Distances-on-Earth Absolute Altitude Difference with_path( moniker )_absaltdiff_(\u276c unit \u276d, value ); with_path( moniker )_absaltdiff( value ); with_path( moniker )_absaltdiff(, value )_unit( unit ); Absolute Elevation Difference with_path( moniker )_abselevdiff_(\u276c unit \u276d, value ); with_path( moniker )_abselevdiff( value ); with_path( moniker )_abselevdiff(, value )_unit( unit ); purlieus, environs or neighborhood. ambit rosary log_console()_itiner(itiner1)_rosary(); // wp1\u2192wp2\u2192wp3\u2192wp4\u2192wp5\u2192wp6,wp5\u2192wp4,wp4\u2192wp3,wp10\u2192wp2,wp3\u2192wp7\u2192wp8,wp7\u2192wp9,wp9\u2192wp7 /* log_console()_itiner(itiner1)_rosary()_mermaid({code}\u276d); wp1 --> wp2 --> wp3 --> wp4 --> wp5 --> wp6 => wp5 --> wp4 => wp4 --> wp3 => wp10 --> wp2 => wp3 --> wp7 --> wp8 => wp7 --> wp9 => wp9 --> wp7 /* log_console()_itiner(itiner1)_rosary()_mermaid({lr}); graph LR wp1 --> wp2 --> wp3 --> wp4 --> wp5 --> wp6 wp5 --> wp4 wp4 --> wp3 wp10 --> wp2 wp3 --> wp7 --> wp8 wp7 --> wp9 wp9 --> wp7","title":"Relationship"},{"location":"metaphysic/obj/payload/","text":"load_payload( payload_moniker ) unload_payload( payload_moniker ) call_payload( payload_moniker ) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Payload"},{"location":"metaphysic/obj/payload/#load_payloadpayload_moniker","text":"","title":"load_payload(payload_moniker)"},{"location":"metaphysic/obj/payload/#unload_payloadpayload_moniker","text":"","title":"unload_payload(payload_moniker)"},{"location":"metaphysic/obj/payload/#call_payloadpayload_moniker","text":"","title":"call_payload(payload_moniker)"},{"location":"metaphysic/obj/payload/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/payload/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/payload/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/payload/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/payload/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/payload/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/payload/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/payload/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/payload/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/payload/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/payload/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/pipe/","text":"Pipe (object) | pipe | The thing version of a corridor | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Pipe (object)"},{"location":"metaphysic/obj/pipe/#pipe-object","text":"| pipe | The thing version of a corridor |","title":"Pipe (object)"},{"location":"metaphysic/obj/pipe/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/pipe/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/pipe/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/pipe/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/pipe/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/pipe/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/pipe/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/pipe/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/pipe/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/pipe/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/pipe/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/poll/","text":"Poll (object) The poll object is used to conduct polls with thingies to come to consensus decisions or information. The poll_ verb is used in conjunction with the poll object . Declaration The default declaration of the poll object is to at least provide a moniker . add_poll( moniker ); add_poll({ type }, moniker ); Referencing Referencing a poll object is achieved with the with verb, or the shortened ( poll_moniker ) syntax. with_poll( moniker ); ( poll_moniker ); Assignment Verbing verb_ description API with_ Reference to proceeding object . with _ . with ( moniker ) Reference to object moniker . _ . _ . _ . _ . _ . _ . _ . Typing There are eight primitive types of the poll object . {type} description API {opin} {opinion} The collection of a series of questions to then extrapolate generalities from responses in ratio or within confidence intervals. {bmark} {benchmark} Minimal (usually one) questions given with no deliberation required or base only on available information of the thingies at the time of the poll. {bfire} {bushfire} A collection of questions given to specific subsets at irregular frequencies. {track} {tracking} A frequently repeated collection of questions. {entr} {entrance} A small collection of questions asked before any deliberation, used to compare with exit poll. {exit} A small collection of questions (the same as an associated entrance poll) asked after deliberation, used to compare with entrance poll. {deliberat} {deliberative} . {pull} . {push} . {straw} . Casting Syntax: add_call({poll_name}); with_poll({poll_name}); run_poll({poll_name}); freqent_poll({poll_name})_freq({frequency_millisecs})_until({milliseconds/datetime}); Example: Three robots (alef,bet,gimel) have all been introduced to each other (i.e. they believe in each others existence and therefore presume each other is listening). They are left alone in a garage of a house ( room(garage) ) with all the doors closed. They are free (and encouraged) to look around the garage and investigate. However, there is one charge station ( object(tav) ) which must be shared amongst the three robots. add_poll({track},charger_share) ()_quest(energy_level)_gauge({nrg})_v(\u276curgency\u276d); ()_freq(\"quarter_hr\",\u276cmin\u276d,15); ; _calc(\"m\",lkdsjalkj) sequenceDiagram autonumber participant alef participant bet participant gimel par df88accd->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 344d4c22 | 086a || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | c9477eb6 | 9ff5 || \u2193ce1c | + end par df88accd->>344d4c22: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_point(Door)#59; | 344d4c22 | d02c || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_point(Door)#59; | c9477eb6 | cc18 || \u2193ce1c | + end 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = In this example three things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ; and, c9477eb6-1328-4c10-8755-913d41a6e0e1 , c9477eb6 ) are in the same universe; they have all been introduced to each other (i.e. they believe in each others existence and therefore presume each other is listening); they presume they are the only ones left in this universe... sequenceDiagram autonumber participant df88accd participant 344d4c22 participant c9477eb6 par df88accd->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 344d4c22 | 086a || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | c9477eb6 | 9ff5 || \u2193ce1c | + end par df88accd->>344d4c22: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_point(Door)#59; | 344d4c22 | d02c || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_point(Door)#59; | c9477eb6 | cc18 || \u2193ce1c | + end 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call .","title":"Poll (object)"},{"location":"metaphysic/obj/poll/#poll-object","text":"The poll object is used to conduct polls with thingies to come to consensus decisions or information. The poll_ verb is used in conjunction with the poll object .","title":"Poll (object)"},{"location":"metaphysic/obj/poll/#declaration","text":"The default declaration of the poll object is to at least provide a moniker . add_poll( moniker ); add_poll({ type }, moniker );","title":"Declaration"},{"location":"metaphysic/obj/poll/#referencing","text":"Referencing a poll object is achieved with the with verb, or the shortened ( poll_moniker ) syntax. with_poll( moniker ); ( poll_moniker );","title":"Referencing"},{"location":"metaphysic/obj/poll/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/poll/#verbing","text":"verb_ description API with_ Reference to proceeding object . with _ . with ( moniker ) Reference to object moniker . _ . _ . _ . _ . _ . _ . _ .","title":"Verbing"},{"location":"metaphysic/obj/poll/#typing","text":"There are eight primitive types of the poll object . {type} description API {opin} {opinion} The collection of a series of questions to then extrapolate generalities from responses in ratio or within confidence intervals. {bmark} {benchmark} Minimal (usually one) questions given with no deliberation required or base only on available information of the thingies at the time of the poll. {bfire} {bushfire} A collection of questions given to specific subsets at irregular frequencies. {track} {tracking} A frequently repeated collection of questions. {entr} {entrance} A small collection of questions asked before any deliberation, used to compare with exit poll. {exit} A small collection of questions (the same as an associated entrance poll) asked after deliberation, used to compare with entrance poll. {deliberat} {deliberative} . {pull} . {push} . {straw} .","title":"Typing"},{"location":"metaphysic/obj/poll/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/poll/#syntax","text":"add_call({poll_name}); with_poll({poll_name}); run_poll({poll_name}); freqent_poll({poll_name})_freq({frequency_millisecs})_until({milliseconds/datetime});","title":"Syntax:"},{"location":"metaphysic/obj/poll/#example","text":"Three robots (alef,bet,gimel) have all been introduced to each other (i.e. they believe in each others existence and therefore presume each other is listening). They are left alone in a garage of a house ( room(garage) ) with all the doors closed. They are free (and encouraged) to look around the garage and investigate. However, there is one charge station ( object(tav) ) which must be shared amongst the three robots. add_poll({track},charger_share) ()_quest(energy_level)_gauge({nrg})_v(\u276curgency\u276d); ()_freq(\"quarter_hr\",\u276cmin\u276d,15); ; _calc(\"m\",lkdsjalkj) sequenceDiagram autonumber participant alef participant bet participant gimel par df88accd->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 344d4c22 | 086a || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | c9477eb6 | 9ff5 || \u2193ce1c | + end par df88accd->>344d4c22: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_point(Door)#59; | 344d4c22 | d02c || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_point(Door)#59; | c9477eb6 | cc18 || \u2193ce1c | + end 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = In this example three things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ; and, c9477eb6-1328-4c10-8755-913d41a6e0e1 , c9477eb6 ) are in the same universe; they have all been introduced to each other (i.e. they believe in each others existence and therefore presume each other is listening); they presume they are the only ones left in this universe... sequenceDiagram autonumber participant df88accd participant 344d4c22 participant c9477eb6 par df88accd->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 344d4c22 | 086a || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | c9477eb6 | 9ff5 || \u2193ce1c | + end par df88accd->>344d4c22: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_point(Door)#59; | 344d4c22 | d02c || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_point(Door)#59; | c9477eb6 | cc18 || \u2193ce1c | + end 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call .","title":"Example:"},{"location":"metaphysic/obj/pose/","text":"Pose (object) The pose object is a representation of an orientation at a physical point. Pose s require a moniker; a current position (i.e. a waypoint); and an orientation coorespondence to their waypoint. The can be referred to their extended syntax, posepoint . The pose is at the lowest hierarchical level of the 'Route Matrix', being similar to a waypoint and a goal . Route Matrix In the family of 'location-and-orientation' based navigation objects, one excurs has many course s, one course has many way s, and, one way has many poses s. pose can be extended to posepoint , both terms are syntactically the same and can be used freely and interchangabily. Declaration The default declaration of the pose object is to at least provide a moniker , however, at declaration it is common to provide a orientation using the _orientat posit. The _orientat has two signatures, one accepts Euler angles, the other accepts quaternions. The Euler angles can be provided in radians or decimal degrees, so the thingies need to come to an agreement. The units can be set at declaration using angle brackets or wider scoped using set_angles( angleunit ) . The order of Euler angles and quaternion paramaters can also be set at declartion or with the setters, set_euler( order ) and set_quatern( order ) , or directly in the declarations using curly brackets. Orientation add_posepoint( moniker ); add_pose( moniker1 , moniker2 ,...); add_pose( moniker )_orientat( x , y , z ); add_pose( moniker )_orientat( x , y , z , w ); add_pose( moniker )_orientat({ order }, x , y , z , w ); add_pose( moniker )_orientat(\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat({ order },\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat( x , y , z )_euler( order )_angles( unit ); add_pose( moniker )_orientat( x , y , z , w )_quatern( order )_angles( unit ); A orientation can also be declared using the euler or quaternion objects. add_pose( moniker )_euler( moniker ); add_pose( moniker )_euler( x , y , z ); add_pose( moniker )_quatern( moniker ); add_pose( moniker )_quatern( x , y , z , w ); Declaration & Assignment A pose is not complete unless it has a waypoint child or a declared waypoint child using the _coords posit. The parameters of _coords , x_lat , y_long , and, z_alt , all numeric. When datatype of the _coords parameter are not specified, they will be implied to be {double} . Alternatively a previous waypoint can be appended or cast from. add_pose( moniker )_orientat( x , y , z , w )_coords( x_lat , y_long , z_alt ); with_pose( moniker )_coords( x_lat , y_long , z_alt ); with_pose( posemoniker )_waypoint( waypointmoniker ); with_pose( moniker )_wp([ variablename ); Referencing & Assignment Referencing a pose is achieved with the with verb, or the shortened ( moniker ) syntax. The with_pose (or expanded with_posepoint ) command can be expanded to create multiple poses s using a coma-spearated list of moniker s and mutliple _orientat posits. The position in the moniker list corresponds to the same order of appended _orientat posits. with_pose( moniker1 , moniker2 ,...)_orientat( x , y , z , w )_orientat( x , y , z , w )... For easy of reading for humans, either a beginwith ... endwith syntax, or a nested statement approach can be taken. beginwith_pose( moniker1 , moniker2 ,...); ( moniker1 )_orientat( x , y , z ); ( moniker2 )_orientat( x , y , z , w ); ... endwith_wp(); with_pose( moniker1 , moniker2 ,...) ( moniker1 )_orientat( x , y , z ); ( moniker2 )_orientat( x , y , z , w ); ... ; Casting Casting to pose s sibling, waypoint and goal , is the safest and most commonly used cast of pose , as they are related. Casting can be achieved by specifing the datatype using curly brackets ( {} ), or with the with verb. with_pose({goal}, posemoniker ); with_goal( goalmoniker ); with_pose({wp}, posemoniker ); with_wp( posemoniker ); with_wp({pose}, waypointpmoniker ); with_landmark( waypointmoniker ); with_wp({goal}, waypointpmoniker ); with_poi( waypointmoniker ); Verbs verb description API add_ <pose> Declaration of object add go_ <pose> goto_ <pose> The proceeding object will go to the pose go with_ <pose> ( moniker ) Referencing object with Posits posit description API _parse() _parse( string ) _parse({lang}, string ) Parses proceeding object Parses the string and determines language Parses string following language lang parse _coords() _coords_( x_lat1 , y_long1 , z_alt ) Provides coordinates from proceeding object Provides three-dimensional coordinates of x_lat1 , y_long1 , z_alt coords _geojson( geojsonstring ) Direct parse of geoJSON geojsonstring geojson _shapefile( shapefilestring ) Direct parse of Shapefile shapefilestring shapefile _kml( kmlstring ) Direct parse of KML kmlstring kml _displacemto( tomoniker ) _displacemto([ variablename ]) _displacemto(\u276c unit \u276d, tomoniker ) Provides the displacement from preceeding object to tomoniker object Provides the displacement from preceeding object to object monikered to the value of variablename Provides the displacement from preceeding object to tomoniker object with specified unit displacem _around() Reference to a zone of preceeding object defined by proceeding object around _x() , _x( x ) _y() , _y( y ) _z() , _z( z ) , _w( w ) Gets and sets the x, y, and z coordinates and w real part for quaternions, repsectively xyz _lat() , _lat( lat ) _lng() , _lng( lng ) _alt() , _alt( alt ) Gets and sets the x, y, and z coordinates (repsectively) of the preceeding object xyz _elev() _elevation( elev ) Gets and sets the elevation of the preceeding object elev _waitat() _waitat( moniker ) Wait at proceeding object Wait at pose moniker waitat _loiterat() _loiterat( moniker ) Loiter at proceeding object Loiter at pose moniker loiterat References set_euler ; set_quatern euler ; [ quatern (./quatern.md) waypoint ; goal","title":"Pose (object)"},{"location":"metaphysic/obj/pose/#pose-object","text":"The pose object is a representation of an orientation at a physical point. Pose s require a moniker; a current position (i.e. a waypoint); and an orientation coorespondence to their waypoint. The can be referred to their extended syntax, posepoint . The pose is at the lowest hierarchical level of the 'Route Matrix', being similar to a waypoint and a goal . Route Matrix In the family of 'location-and-orientation' based navigation objects, one excurs has many course s, one course has many way s, and, one way has many poses s. pose can be extended to posepoint , both terms are syntactically the same and can be used freely and interchangabily.","title":"Pose (object)"},{"location":"metaphysic/obj/pose/#declaration","text":"The default declaration of the pose object is to at least provide a moniker , however, at declaration it is common to provide a orientation using the _orientat posit. The _orientat has two signatures, one accepts Euler angles, the other accepts quaternions. The Euler angles can be provided in radians or decimal degrees, so the thingies need to come to an agreement. The units can be set at declaration using angle brackets or wider scoped using set_angles( angleunit ) . The order of Euler angles and quaternion paramaters can also be set at declartion or with the setters, set_euler( order ) and set_quatern( order ) , or directly in the declarations using curly brackets. Orientation add_posepoint( moniker ); add_pose( moniker1 , moniker2 ,...); add_pose( moniker )_orientat( x , y , z ); add_pose( moniker )_orientat( x , y , z , w ); add_pose( moniker )_orientat({ order }, x , y , z , w ); add_pose( moniker )_orientat(\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat({ order },\u276c unit \u276d x , y , z , w ); add_pose( moniker )_orientat( x , y , z )_euler( order )_angles( unit ); add_pose( moniker )_orientat( x , y , z , w )_quatern( order )_angles( unit ); A orientation can also be declared using the euler or quaternion objects. add_pose( moniker )_euler( moniker ); add_pose( moniker )_euler( x , y , z ); add_pose( moniker )_quatern( moniker ); add_pose( moniker )_quatern( x , y , z , w );","title":"Declaration"},{"location":"metaphysic/obj/pose/#declaration-assignment","text":"A pose is not complete unless it has a waypoint child or a declared waypoint child using the _coords posit. The parameters of _coords , x_lat , y_long , and, z_alt , all numeric. When datatype of the _coords parameter are not specified, they will be implied to be {double} . Alternatively a previous waypoint can be appended or cast from. add_pose( moniker )_orientat( x , y , z , w )_coords( x_lat , y_long , z_alt ); with_pose( moniker )_coords( x_lat , y_long , z_alt ); with_pose( posemoniker )_waypoint( waypointmoniker ); with_pose( moniker )_wp([ variablename );","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/pose/#referencing-assignment","text":"Referencing a pose is achieved with the with verb, or the shortened ( moniker ) syntax. The with_pose (or expanded with_posepoint ) command can be expanded to create multiple poses s using a coma-spearated list of moniker s and mutliple _orientat posits. The position in the moniker list corresponds to the same order of appended _orientat posits. with_pose( moniker1 , moniker2 ,...)_orientat( x , y , z , w )_orientat( x , y , z , w )... For easy of reading for humans, either a beginwith ... endwith syntax, or a nested statement approach can be taken. beginwith_pose( moniker1 , moniker2 ,...); ( moniker1 )_orientat( x , y , z ); ( moniker2 )_orientat( x , y , z , w ); ... endwith_wp(); with_pose( moniker1 , moniker2 ,...) ( moniker1 )_orientat( x , y , z ); ( moniker2 )_orientat( x , y , z , w ); ... ;","title":"Referencing &amp; Assignment"},{"location":"metaphysic/obj/pose/#casting","text":"Casting to pose s sibling, waypoint and goal , is the safest and most commonly used cast of pose , as they are related. Casting can be achieved by specifing the datatype using curly brackets ( {} ), or with the with verb. with_pose({goal}, posemoniker ); with_goal( goalmoniker ); with_pose({wp}, posemoniker ); with_wp( posemoniker ); with_wp({pose}, waypointpmoniker ); with_landmark( waypointmoniker ); with_wp({goal}, waypointpmoniker ); with_poi( waypointmoniker );","title":"Casting"},{"location":"metaphysic/obj/pose/#verbs","text":"verb description API add_ <pose> Declaration of object add go_ <pose> goto_ <pose> The proceeding object will go to the pose go with_ <pose> ( moniker ) Referencing object with","title":"Verbs"},{"location":"metaphysic/obj/pose/#posits","text":"posit description API _parse() _parse( string ) _parse({lang}, string ) Parses proceeding object Parses the string and determines language Parses string following language lang parse _coords() _coords_( x_lat1 , y_long1 , z_alt ) Provides coordinates from proceeding object Provides three-dimensional coordinates of x_lat1 , y_long1 , z_alt coords _geojson( geojsonstring ) Direct parse of geoJSON geojsonstring geojson _shapefile( shapefilestring ) Direct parse of Shapefile shapefilestring shapefile _kml( kmlstring ) Direct parse of KML kmlstring kml _displacemto( tomoniker ) _displacemto([ variablename ]) _displacemto(\u276c unit \u276d, tomoniker ) Provides the displacement from preceeding object to tomoniker object Provides the displacement from preceeding object to object monikered to the value of variablename Provides the displacement from preceeding object to tomoniker object with specified unit displacem _around() Reference to a zone of preceeding object defined by proceeding object around _x() , _x( x ) _y() , _y( y ) _z() , _z( z ) , _w( w ) Gets and sets the x, y, and z coordinates and w real part for quaternions, repsectively xyz _lat() , _lat( lat ) _lng() , _lng( lng ) _alt() , _alt( alt ) Gets and sets the x, y, and z coordinates (repsectively) of the preceeding object xyz _elev() _elevation( elev ) Gets and sets the elevation of the preceeding object elev _waitat() _waitat( moniker ) Wait at proceeding object Wait at pose moniker waitat _loiterat() _loiterat( moniker ) Loiter at proceeding object Loiter at pose moniker loiterat","title":"Posits"},{"location":"metaphysic/obj/pose/#references","text":"set_euler ; set_quatern euler ; [ quatern (./quatern.md) waypoint ; goal","title":"References"},{"location":"metaphysic/obj/printer/","text":"Printer (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Printer (object)"},{"location":"metaphysic/obj/printer/#printer-object","text":"","title":"Printer (object)"},{"location":"metaphysic/obj/printer/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/printer/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/printer/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/printer/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/printer/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/printer/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/printer/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/printer/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/printer/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/printer/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/printer/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/proc/","text":"Procedure (object) | proc [edure] | || proc [edure] | || proc [edure] | || proc [edure] | || proc [edure] | | Procedural Structuring procedural notes examples API instruct , instruction instruct proc , procedure proc prog , program , programme prog action action Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Procedure (object)"},{"location":"metaphysic/obj/proc/#procedure-object","text":"| proc [edure] | || proc [edure] | || proc [edure] | || proc [edure] | || proc [edure] | |","title":"Procedure (object)"},{"location":"metaphysic/obj/proc/#procedural-structuring","text":"procedural notes examples API instruct , instruction instruct proc , procedure proc prog , program , programme prog action action","title":" Procedural Structuring"},{"location":"metaphysic/obj/proc/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/proc/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/proc/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/proc/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/proc/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/proc/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/proc/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/proc/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/proc/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/proc/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/proc/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/prog/","text":"Programme (object) | prog [ramme] | | Procedural Structuring procedural notes examples API instruct , instruction instruct proc , procedure proc prog , program , programme prog action action Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Programme (object)"},{"location":"metaphysic/obj/prog/#programme-object","text":"| prog [ramme] | |","title":"Programme (object)"},{"location":"metaphysic/obj/prog/#procedural-structuring","text":"procedural notes examples API instruct , instruction instruct proc , procedure proc prog , program , programme prog action action","title":" Procedural Structuring"},{"location":"metaphysic/obj/prog/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/prog/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/prog/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/prog/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/prog/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/prog/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/prog/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/prog/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/prog/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/prog/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/prog/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/puff/","text":"Puff Objects / Child Objects The parent object is the puff which acts as a classifications of six objects where are departmentalised upon their range. | {obj} | range | examples | |---|---|---|---| | mist | < 1m | wired systems | add_puff({moniker|uuid})_type(mist); add_mist({moniker|uuid}); | | fog | < 10m | RFID | add_puff({moniker|uuid})_type(fog); add_fog({moniker|uuid}); | | smog | < 100m | Wi-Fi, Bluetooth, BLE, Radio | | murk | < 1km | HaLow | | yonder | 1km + | LPWAN, Cellular | | cloud | indefinite | (carriers: twitter, slack, discord) | The puff and its six children can be created using the add_ verb: Creation Direct add_ creation can be accomplished in a variety of ways. The parent object, puff , can be created with the add_ verb and will act as a generic type ^\u2663^. The children objects of a puff can be created via {puff_type} ^\u2663^. Also, the puff children can be created with the add_ verb^\u2663^: add_puff({moniker|uuid}); add_puff({moniker|uuid})_type({puff_type}); add_{obj}({moniker|uuid}); Where: | {puff_type} , {obj} | commands | |---|---| | mist | add_puff({moniker|uuid})_type(mist); add_mist({moniker|uuid}); | | fog | add_puff({moniker|uuid})_type(fog); add_fog({moniker|uuid}); | | smog | | | murk | | | yonder | | cloud | | The puff children can also be assembled^\u2663^: add_puff({moniker|uuid}); add_mist({moniker|uuid}); add_fog({moniker|uuid}); add_smog({moniker|uuid}); add_murk({moniker|uuid}); add_yonder({moniker|uuid}); add_cloud({moniker|uuid}); with_puff({moniker|uuid})_mist({moniker|uuid}); with_puff({moniker|uuid})_fog({moniker|uuid}); with_puff({moniker|uuid})_smog({moniker|uuid}); with_puff({moniker|uuid})_murk({moniker|uuid}); with_puff({moniker|uuid})_yonder({moniker|uuid}); with_puff({moniker|uuid})_cloud({moniker|uuid}); \u2663 All the above commands, without any discrimination, will create their puff for anyone who hears the command, then anyone who hears the command will automatically be nodes to the puff . Use discrimination postpositions to specify nodes. Existence The puff and its children should not be brought into existence without creation. If a thingy finds the existence of a puff it will try and find its creation using with_{puff}({moniker|uuid}_bithof(); for similar syntax^\u2660^: \u2192 add_puff({moniker|uuid}); \u2192 with_puff({moniker|uuid})_mist({moniker|uuid}); \u2192 with_puff({moniker|uuid})_fog({moniker|uuid}); \u2192 with_puff({moniker|uuid})_smog({moniker|uuid}); \u2192 with_puff({moniker|uuid})_murk({moniker|uuid}); \u2192 with_puff({moniker|uuid})_yonder({moniker|uuid}); \u2192 with_puff({moniker|uuid})_cloud({moniker|uuid}); \u2190 with_mist({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(mist)_specificto({moniker|uuid}; \u2190 with_fog({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(fog)_specificto({moniker|uuid}; \u2190 with_smog({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(smog)_specificto({moniker|uuid}; \u2190 with_murk({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(murk)_specificto({moniker|uuid}; \u2190 with_yonder({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(yonder)_specificto({moniker|uuid}; \u2190 with_cloud({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(cloud)_specificto({moniker|uuid}; \u2660 The creation command and existence commands are without any discrimination, this will create their puff for anyone who hears the command, then anyone who hears the command will automatically be nodes to the puff. Use discrimination postpositions to specify nodes. Without any reply to the _bithof enquiry, the callee will remember commands of the puff but not act upon those commands until the respective add_ verb has been found. The callee will remember this as an error: me_err({err_num}, {err_desc})_appliedto({obj|child_obj})_specificto({moniker|uuid})[_forwhat({moniker|uuid})]; . Since, in this examples, no discimination has been applied, any thingy (with knowledge of the 'puff's creation) can respond to the _birthof() enquiry even if they are not the creator. Solutions Syntax: _solut({solut_type}[, {generation}]) The solution _solut postposition add_smog({moniker|uuid})_solut({solut_type}[, {generation}])_protocol({protocol}); Where: {solut_type} {generation} description rfid RFID wi_fi 4 5 6 7 halow lte-m r ... mythings Hijacking Google Chat Google Chat can be hijacked to provide a communication cloud to allow thingy s to communicate. Just as a human, each thingy will require a Google account, an email address, and access to the Google Chat API. As a demonstration/example we have two robots, alif and bahh . Each robot knows the credentials ( i.e. where to meet ) of the Google chat room and each others email address. They are best of friends, i.e. they know each other . alif will create the channel (called rooms in Google Chat) and send an invite to bahh . We will start with alif , just going over (for the sake of this demonstration) some setting-up it did as a child... alif add_email(alif@diegolang.org)_linkto(google)_me(); ...and bahh ... bahh add_email(bahh@diegolang.org)_linkto(google)_me(); add_cloud(google_chat)_solut(google_chat)_me(); begin_instruct(listen_on_google_chat); add_listener(listen_for_invites_on_google_chat)_appliedto(cloud)_specificto(google_chat)_forwhat(invite) ? with_channel()_specificto()_accept() : exit_instruct(listen_on_google_chat); ping_thingy()_cloud(google_chat)_thingy(); end_instruct(listen_on_google_chat); exec_instruct(listen_on_google)_chat)_me(); Now alif (and bahh ) have to set-up their Google Chat connectivity as a cloud ... alif add_cloud(google_chat)_solut(google_chat)_me(); add_channel(diego_test_room_001)_me(); with_cloud(google_chat)_channel(diego_text_room_001)_me(); with_channel(diego_text_room_001)_invite(bahh); ping_thingy()_cloud(google_chat)_thingy(); pong_robot(alif)_for(bah); ...and bahh ... bahh ping_thingy()_cloud(google_chat)_thingy()_for(alif); pong_robot(alif)_for(bah); channel fanal - a beacon for guiding ships funnel <-> fennul","title":"Puff"},{"location":"metaphysic/obj/puff/#puff","text":"","title":"Puff"},{"location":"metaphysic/obj/puff/#objects-child-objects","text":"The parent object is the puff which acts as a classifications of six objects where are departmentalised upon their range. | {obj} | range | examples | |---|---|---|---| | mist | < 1m | wired systems | add_puff({moniker|uuid})_type(mist); add_mist({moniker|uuid}); | | fog | < 10m | RFID | add_puff({moniker|uuid})_type(fog); add_fog({moniker|uuid}); | | smog | < 100m | Wi-Fi, Bluetooth, BLE, Radio | | murk | < 1km | HaLow | | yonder | 1km + | LPWAN, Cellular | | cloud | indefinite | (carriers: twitter, slack, discord) | The puff and its six children can be created using the add_ verb:","title":"Objects / Child Objects"},{"location":"metaphysic/obj/puff/#creation","text":"Direct add_ creation can be accomplished in a variety of ways. The parent object, puff , can be created with the add_ verb and will act as a generic type ^\u2663^. The children objects of a puff can be created via {puff_type} ^\u2663^. Also, the puff children can be created with the add_ verb^\u2663^: add_puff({moniker|uuid}); add_puff({moniker|uuid})_type({puff_type}); add_{obj}({moniker|uuid}); Where: | {puff_type} , {obj} | commands | |---|---| | mist | add_puff({moniker|uuid})_type(mist); add_mist({moniker|uuid}); | | fog | add_puff({moniker|uuid})_type(fog); add_fog({moniker|uuid}); | | smog | | | murk | | | yonder | | cloud | | The puff children can also be assembled^\u2663^: add_puff({moniker|uuid}); add_mist({moniker|uuid}); add_fog({moniker|uuid}); add_smog({moniker|uuid}); add_murk({moniker|uuid}); add_yonder({moniker|uuid}); add_cloud({moniker|uuid}); with_puff({moniker|uuid})_mist({moniker|uuid}); with_puff({moniker|uuid})_fog({moniker|uuid}); with_puff({moniker|uuid})_smog({moniker|uuid}); with_puff({moniker|uuid})_murk({moniker|uuid}); with_puff({moniker|uuid})_yonder({moniker|uuid}); with_puff({moniker|uuid})_cloud({moniker|uuid}); \u2663 All the above commands, without any discrimination, will create their puff for anyone who hears the command, then anyone who hears the command will automatically be nodes to the puff . Use discrimination postpositions to specify nodes.","title":"Creation"},{"location":"metaphysic/obj/puff/#existence","text":"The puff and its children should not be brought into existence without creation. If a thingy finds the existence of a puff it will try and find its creation using with_{puff}({moniker|uuid}_bithof(); for similar syntax^\u2660^: \u2192 add_puff({moniker|uuid}); \u2192 with_puff({moniker|uuid})_mist({moniker|uuid}); \u2192 with_puff({moniker|uuid})_fog({moniker|uuid}); \u2192 with_puff({moniker|uuid})_smog({moniker|uuid}); \u2192 with_puff({moniker|uuid})_murk({moniker|uuid}); \u2192 with_puff({moniker|uuid})_yonder({moniker|uuid}); \u2192 with_puff({moniker|uuid})_cloud({moniker|uuid}); \u2190 with_mist({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(mist)_specificto({moniker|uuid}; \u2190 with_fog({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(fog)_specificto({moniker|uuid}; \u2190 with_smog({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(smog)_specificto({moniker|uuid}; \u2190 with_murk({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(murk)_specificto({moniker|uuid}; \u2190 with_yonder({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(yonder)_specificto({moniker|uuid}; \u2190 with_cloud({moniker|uuid})_birthof(); * me_err(c102,existance_with_no_found_creation)_appliedto(cloud)_specificto({moniker|uuid}; \u2660 The creation command and existence commands are without any discrimination, this will create their puff for anyone who hears the command, then anyone who hears the command will automatically be nodes to the puff. Use discrimination postpositions to specify nodes. Without any reply to the _bithof enquiry, the callee will remember commands of the puff but not act upon those commands until the respective add_ verb has been found. The callee will remember this as an error: me_err({err_num}, {err_desc})_appliedto({obj|child_obj})_specificto({moniker|uuid})[_forwhat({moniker|uuid})]; . Since, in this examples, no discimination has been applied, any thingy (with knowledge of the 'puff's creation) can respond to the _birthof() enquiry even if they are not the creator.","title":"Existence"},{"location":"metaphysic/obj/puff/#solutions","text":"Syntax: _solut({solut_type}[, {generation}]) The solution _solut postposition add_smog({moniker|uuid})_solut({solut_type}[, {generation}])_protocol({protocol}); Where: {solut_type} {generation} description rfid RFID wi_fi 4 5 6 7 halow lte-m r ... mythings","title":"Solutions"},{"location":"metaphysic/obj/puff/#hijacking-google-chat","text":"Google Chat can be hijacked to provide a communication cloud to allow thingy s to communicate. Just as a human, each thingy will require a Google account, an email address, and access to the Google Chat API. As a demonstration/example we have two robots, alif and bahh . Each robot knows the credentials ( i.e. where to meet ) of the Google chat room and each others email address. They are best of friends, i.e. they know each other . alif will create the channel (called rooms in Google Chat) and send an invite to bahh . We will start with alif , just going over (for the sake of this demonstration) some setting-up it did as a child...","title":"Hijacking Google Chat"},{"location":"metaphysic/obj/puff/#alif","text":"add_email(alif@diegolang.org)_linkto(google)_me(); ...and bahh ...","title":"alif"},{"location":"metaphysic/obj/puff/#bahh","text":"add_email(bahh@diegolang.org)_linkto(google)_me(); add_cloud(google_chat)_solut(google_chat)_me(); begin_instruct(listen_on_google_chat); add_listener(listen_for_invites_on_google_chat)_appliedto(cloud)_specificto(google_chat)_forwhat(invite) ? with_channel()_specificto()_accept() : exit_instruct(listen_on_google_chat); ping_thingy()_cloud(google_chat)_thingy(); end_instruct(listen_on_google_chat); exec_instruct(listen_on_google)_chat)_me(); Now alif (and bahh ) have to set-up their Google Chat connectivity as a cloud ...","title":"bahh"},{"location":"metaphysic/obj/puff/#alif_1","text":"add_cloud(google_chat)_solut(google_chat)_me(); add_channel(diego_test_room_001)_me(); with_cloud(google_chat)_channel(diego_text_room_001)_me(); with_channel(diego_text_room_001)_invite(bahh); ping_thingy()_cloud(google_chat)_thingy(); pong_robot(alif)_for(bah); ...and bahh ...","title":"alif"},{"location":"metaphysic/obj/puff/#bahh_1","text":"ping_thingy()_cloud(google_chat)_thingy()_for(alif); pong_robot(alif)_for(bah); channel fanal - a beacon for guiding ships funnel <-> fennul","title":"bahh"},{"location":"metaphysic/obj/roi/","text":"Region of Interest (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Region of Interest (object)"},{"location":"metaphysic/obj/roi/#region-of-interest-object","text":"","title":"Region of Interest (object)"},{"location":"metaphysic/obj/roi/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/roi/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/roi/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/roi/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/roi/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/roi/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/roi/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/roi/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/roi/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/roi/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/roi/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/rosary/","text":"Rosary (object) A rosary object is looped chain of objects representing a physical ordered array of points to combine into a full route. In terms of orientation all physical coordinate locations follow the right-hand-rule. A rosary is similar to an ambit , execpt a rosary cannot have forks and the last locational object must loop back on the first locational object. The term 'linear ring' is often associated with the same principle of the rosary object. Definition & Assignment Operators operator unicode notes example \u2192 -> U+2192 Path to next point by best fit wp1\u2192wp2 \u21a0 ->> U+21A0 Path to next point by fastest means possible wp1\u21a0wp2 \u21a6 \\|-> U+21A6 Path to next point, wait at left point until ready \u2951 \\| U+2951 Termination of path, separator of paths wp1\u2192wp2\u2192wp3\u2951wp1\u2192wp3 Example // Set up route add_route(perimeter) add_waypoint(x0)_coords(-26.812298, 153.082254); add_waypoint(x1)_coords(-26.812298, 153.082254); add_waypoint(x2)_coords(-26.812298, 153.082254); add_waypoint(x3)_coords(-26.812298, 153.082254); add_waypoint(x4)_coords(-26.812298, 153.082254); add_waypoint(x5)_coords(-26.812298, 153.082254); add_waypoint(x6)_coords(-26.812298, 153.082254); add_waypoint(x7)_coords(-26.812298, 153.082254); add_waypoint(x8)_coords(-26.812298, 153.082254); add_waypoint(x9)_coords(-26.812298, 153.082254); // Set up paths (using rosary) add_rosary(x0\u2192x1\u2192x2\u2192x3\u2192x4\u2192x5\u2192x6\u2192x7\u2192x8\u2192x9\u2940); ; with_route(perimeter) add_rosary(x0\u2192x1\u2192x2\u2192x3\u2192x4\u2192x5\u2192x6\u2192x7\u2192x8\u2192x9\u2940); ; Rosary is a diriviative of path and way","title":"Rosary (object)"},{"location":"metaphysic/obj/rosary/#rosary-object","text":"A rosary object is looped chain of objects representing a physical ordered array of points to combine into a full route. In terms of orientation all physical coordinate locations follow the right-hand-rule. A rosary is similar to an ambit , execpt a rosary cannot have forks and the last locational object must loop back on the first locational object. The term 'linear ring' is often associated with the same principle of the rosary object.","title":"Rosary (object)"},{"location":"metaphysic/obj/rosary/#definition-assignment","text":"","title":"Definition &amp; Assignment"},{"location":"metaphysic/obj/rosary/#operators","text":"operator unicode notes example \u2192 -> U+2192 Path to next point by best fit wp1\u2192wp2 \u21a0 ->> U+21A0 Path to next point by fastest means possible wp1\u21a0wp2 \u21a6 \\|-> U+21A6 Path to next point, wait at left point until ready \u2951 \\| U+2951 Termination of path, separator of paths wp1\u2192wp2\u2192wp3\u2951wp1\u2192wp3 Example // Set up route add_route(perimeter) add_waypoint(x0)_coords(-26.812298, 153.082254); add_waypoint(x1)_coords(-26.812298, 153.082254); add_waypoint(x2)_coords(-26.812298, 153.082254); add_waypoint(x3)_coords(-26.812298, 153.082254); add_waypoint(x4)_coords(-26.812298, 153.082254); add_waypoint(x5)_coords(-26.812298, 153.082254); add_waypoint(x6)_coords(-26.812298, 153.082254); add_waypoint(x7)_coords(-26.812298, 153.082254); add_waypoint(x8)_coords(-26.812298, 153.082254); add_waypoint(x9)_coords(-26.812298, 153.082254); // Set up paths (using rosary) add_rosary(x0\u2192x1\u2192x2\u2192x3\u2192x4\u2192x5\u2192x6\u2192x7\u2192x8\u2192x9\u2940); ; with_route(perimeter) add_rosary(x0\u2192x1\u2192x2\u2192x3\u2192x4\u2192x5\u2192x6\u2192x7\u2192x8\u2192x9\u2940); ; Rosary is a diriviative of path and way","title":"Operators"},{"location":"metaphysic/obj/route/","text":"Finders find_route find_route( route_moniker , startpoint , endpoint ) find_route( route_moniker , startpoint , endpoint )_using( map_provider ) Routing Routing dipicts the autonomous motion of robots, and twelve objects are provided as interface. These twelve objects can be arranged in the route matrix: Route Matrix Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Finders"},{"location":"metaphysic/obj/route/#finders","text":"","title":"Finders"},{"location":"metaphysic/obj/route/#find_route","text":"","title":"find_route"},{"location":"metaphysic/obj/route/#find_routeroute_moniker-startpoint-endpoint","text":"","title":"find_route(route_moniker, startpoint, endpoint)"},{"location":"metaphysic/obj/route/#find_routeroute_moniker-startpoint-endpoint_usingmap_provider","text":"","title":"find_route(route_moniker, startpoint, endpoint)_using(map_provider)"},{"location":"metaphysic/obj/route/#routing","text":"Routing dipicts the autonomous motion of robots, and twelve objects are provided as interface. These twelve objects can be arranged in the route matrix: Route Matrix","title":"Routing"},{"location":"metaphysic/obj/route/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/route/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/route/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/route/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/route/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/route/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/route/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/route/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/route/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/route/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/route/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/scalar/","text":"Scalar (object) Data Management data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Scalar (object)"},{"location":"metaphysic/obj/scalar/#scalar-object","text":"","title":"Scalar (object)"},{"location":"metaphysic/obj/scalar/#data-management","text":"data management notes examples API attr , attribute Each attr is a immutable name-value pair ( {monniker|uuid} as the name, _value({value}) as the value). All data held in an attr should be immutable and have a one-to-one relationship (one name for one value). Example: add_attr(last_name)_value(Jones); See also: spec attr blob B inary L arge OB ject var , variable var dict , dictionary metric metric scalar array","title":" Data Management"},{"location":"metaphysic/obj/scalar/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/scalar/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/scalar/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/scalar/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/scalar/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/scalar/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/scalar/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/scalar/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/scalar/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/scalar/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/scalar/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/sensor/","text":"call_sensor( sensor_moniker ) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Sensor"},{"location":"metaphysic/obj/sensor/#call_sensorsensor_moniker","text":"","title":"call_sensor(sensor_moniker)"},{"location":"metaphysic/obj/sensor/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/sensor/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/sensor/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/sensor/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/sensor/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/sensor/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/sensor/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/sensor/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/sensor/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/sensor/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/sensor/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/sobriquet/","text":"Sobriquet (object) | sobriquet one each thingy can have one sobriquet with verb _sobri() Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Sobriquet (object)"},{"location":"metaphysic/obj/sobriquet/#sobriquet-object","text":"| sobriquet one each thingy can have one sobriquet with verb _sobri()","title":"Sobriquet (object)"},{"location":"metaphysic/obj/sobriquet/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/sobriquet/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/sobriquet/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/sobriquet/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/sobriquet/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/sobriquet/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/sobriquet/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/sobriquet/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/sobriquet/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/sobriquet/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/sobriquet/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/spec/","text":"Specification (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Specification (object)"},{"location":"metaphysic/obj/spec/#specification-object","text":"","title":"Specification (object)"},{"location":"metaphysic/obj/spec/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/spec/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/spec/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/spec/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/spec/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/spec/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/spec/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/spec/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/spec/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/spec/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/spec/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/spine/","text":"Spine (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Spine (object)"},{"location":"metaphysic/obj/spine/#spine-object","text":"","title":"Spine (object)"},{"location":"metaphysic/obj/spine/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/spine/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/spine/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/spine/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/spine/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/spine/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/spine/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/spine/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/spine/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/spine/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/spine/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/spox/","text":"Spox (object) A spokesperson elected to speak for a group of thingies. Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Spox (object)"},{"location":"metaphysic/obj/spox/#spox-object","text":"A spokesperson elected to speak for a group of thingies.","title":"Spox (object)"},{"location":"metaphysic/obj/spox/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/spox/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/spox/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/spox/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/spox/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/spox/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/spox/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/spox/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/spox/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/spox/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/spox/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/stacle/","text":"Stacle (object) The primitive object representing a stationary object ( obstacle ) or a moving object ( substacle ) that blocks a route/path/way of a thingy. The converse of a ject . flowchart LR ob(ob) <--> stacle([stacle]) sub(sub) <--> stacle stacle --> obstacle(obstacle) stacle --> substacle(substacle) ob <--> ject(ject) sub <--> ject ject --> object(object) ject --> subject(subject) Stacle & Ject Hierarchy Declaration The default declaration of the stacle object is to at least provide a moniker . A type ( {ob} or {sub} ) can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. The cellphone object can also be declared by casting mobot . add_stacle( moniker ); add_stacle({ ob }, moniker ); add_stacle({ sub }, moniker ); add_ob({stacle}, moniker ); add_sub({stacle}, moniker ); Declaration & Assignment Referencing Referencing a stacle object is achieved with the with verb (or shortened >_ ), or the shortened ( stacle_moniker ) syntax using brackets ( () ). For inside expressions use square brackets ( [] ) as in [ stacle_moniker ] . with_stacle( moniker ); >_stacle( moniker ); ( stacle_moniker ); \u27e6 ... [ stacle_moniker ] ... \u27e7 Typing There are only two types of stacles: {ob} representing obstacles, stationary objects that block a thingy's path; and, {sub} representing substacles, moving objects that black a thingy's path. add_stacle({ ob }, moniker ); with_stacle({ ob }, moniker ); with_stacle( moniker )_type( ob ); add_stacle({ sub }, moniker ); with_stacle({ sub }, moniker ); with_stacle( moniker )_type( sub ); Casting Posits Operators","title":"Stacle (object)"},{"location":"metaphysic/obj/stacle/#stacle-object","text":"The primitive object representing a stationary object ( obstacle ) or a moving object ( substacle ) that blocks a route/path/way of a thingy. The converse of a ject . flowchart LR ob(ob) <--> stacle([stacle]) sub(sub) <--> stacle stacle --> obstacle(obstacle) stacle --> substacle(substacle) ob <--> ject(ject) sub <--> ject ject --> object(object) ject --> subject(subject) Stacle & Ject Hierarchy","title":"Stacle (object)"},{"location":"metaphysic/obj/stacle/#declaration","text":"The default declaration of the stacle object is to at least provide a moniker . A type ( {ob} or {sub} ) can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. The cellphone object can also be declared by casting mobot . add_stacle( moniker ); add_stacle({ ob }, moniker ); add_stacle({ sub }, moniker ); add_ob({stacle}, moniker ); add_sub({stacle}, moniker );","title":"Declaration"},{"location":"metaphysic/obj/stacle/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/stacle/#referencing","text":"Referencing a stacle object is achieved with the with verb (or shortened >_ ), or the shortened ( stacle_moniker ) syntax using brackets ( () ). For inside expressions use square brackets ( [] ) as in [ stacle_moniker ] . with_stacle( moniker ); >_stacle( moniker ); ( stacle_moniker ); \u27e6 ... [ stacle_moniker ] ... \u27e7","title":"Referencing"},{"location":"metaphysic/obj/stacle/#typing","text":"There are only two types of stacles: {ob} representing obstacles, stationary objects that block a thingy's path; and, {sub} representing substacles, moving objects that black a thingy's path. add_stacle({ ob }, moniker ); with_stacle({ ob }, moniker ); with_stacle( moniker )_type( ob ); add_stacle({ sub }, moniker ); with_stacle({ sub }, moniker ); with_stacle( moniker )_type( sub );","title":"Typing"},{"location":"metaphysic/obj/stacle/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/stacle/#posits","text":"","title":"Posits"},{"location":"metaphysic/obj/stacle/#operators","text":"","title":"Operators"},{"location":"metaphysic/obj/stance/","text":"Stance (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Stance (object)"},{"location":"metaphysic/obj/stance/#stance-object","text":"","title":"Stance (object)"},{"location":"metaphysic/obj/stance/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/stance/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/stance/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/stance/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/stance/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/stance/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/stance/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/stance/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/stance/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/stance/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/stance/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/sub/","text":"Sub (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Sub (object)"},{"location":"metaphysic/obj/sub/#sub-object","text":"","title":"Sub (object)"},{"location":"metaphysic/obj/sub/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/sub/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/sub/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/sub/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/sub/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/sub/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/sub/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/sub/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/sub/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/sub/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/sub/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/substacle/","text":"Substacle (object) The substacle object is derived from the sub and stacle objects representing a moving object that blocks a route/path/way of a thingy. The sibling of an obstacle , and the cousin of an subject and an sobject . flowchart LR ob(ob) <--> stacle(stacle) sub(sub) <--> stacle sob(sob) <--> stacle stacle --> obstacle(obstacle) stacle --> substacle([substacle]) stacle --> sobstacle(sostacle) ob <--> ject(ject) sub <--> ject sob <--> ject ject --> object(object) ject --> subject(subject) ject --> sobject(sobject) Stacle & Ject Hierarchy Declaration The default declaration of the substacle object is to at least provide a moniker . The derived objects can be declared by name. The substacle object can also be declared by casting subb or stacle . add_substacle( moniker ); add_stacle({ sub }, moniker ); add_sub({stacle}, moniker );","title":"Substacle (object)"},{"location":"metaphysic/obj/substacle/#substacle-object","text":"The substacle object is derived from the sub and stacle objects representing a moving object that blocks a route/path/way of a thingy. The sibling of an obstacle , and the cousin of an subject and an sobject . flowchart LR ob(ob) <--> stacle(stacle) sub(sub) <--> stacle sob(sob) <--> stacle stacle --> obstacle(obstacle) stacle --> substacle([substacle]) stacle --> sobstacle(sostacle) ob <--> ject(ject) sub <--> ject sob <--> ject ject --> object(object) ject --> subject(subject) ject --> sobject(sobject) Stacle & Ject Hierarchy","title":"Substacle (object)"},{"location":"metaphysic/obj/substacle/#declaration","text":"The default declaration of the substacle object is to at least provide a moniker . The derived objects can be declared by name. The substacle object can also be declared by casting subb or stacle . add_substacle( moniker ); add_stacle({ sub }, moniker ); add_sub({stacle}, moniker );","title":"Declaration"},{"location":"metaphysic/obj/swarm/","text":"Swarm (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Swarm (object)"},{"location":"metaphysic/obj/swarm/#swarm-object","text":"","title":"Swarm (object)"},{"location":"metaphysic/obj/swarm/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/swarm/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/swarm/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/swarm/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/swarm/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/swarm/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/swarm/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/swarm/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/swarm/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/swarm/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/swarm/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/tour/","text":"Tour (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Tour (object)"},{"location":"metaphysic/obj/tour/#tour-object","text":"","title":"Tour (object)"},{"location":"metaphysic/obj/tour/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/tour/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/tour/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/tour/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/tour/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/tour/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/tour/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/tour/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/tour/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/tour/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/tour/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/track/","text":"Track (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Track (object)"},{"location":"metaphysic/obj/track/#track-object","text":"","title":"Track (object)"},{"location":"metaphysic/obj/track/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/track/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/track/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/track/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/track/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/track/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/track/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/track/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/track/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/track/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/track/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/tracker/","text":"Tracker NOTE: tracking a parcel! The tracker object is used to track a moving position of a thingy in space using location and /or time. There are four similar tracking objects for tracking thingies: object notes tracker Tracks the moving position of a thingy in space using location and/or time. locator Tracks the moving position of a thingy in space using only location. pulse Tracks a thingy (or any yielding object) using only regular time. calendar or tempus Tracks a thingy (or any yielding object) using irregular time. Construct add_tracker({moniker|uuid}); with_tracker({moniker|uuid}); begin_tracker({moniker|uuid}); ... end_tracker... To create and develop the tracker object use add_ , however, using with_ the first time will initiate construction. Similarly using begin_ ..._end_ for the first time will also initiate construction, but this approach is not recommended. The tracker does not automatically run/start upon construction, you need to explicitly start the tracker with run_ , start_ , or, exec_ . Disposal dispose_tracker({moniker|uuid}); dump_tracker({moniker|uuid}); forget_tracker({moniker|uuid}); To dispose of a tracker from primal memory use dispose_ , dump_ or forget_ . Development with_tracker({moniker|uuid}) Control run_tracker({name/uuid}); pause_tracker({name/uuid}); stop_tracker({name/uuid}); start_tracker({name/uuid}); halt_tracker({name/uuid}); go_tracker({name/uuid}); hold_tracker({name/uuid}); Various verbs are available to control a tracker as seen above. When a tracker is paused or stopped no trackpoint s will yield The tracker object can be controlled (started, paused and stopped) Disposal Event Trapping The tracker object can be event trapped with begin_ and end_ . begin_tracker({moniker|uuid}); ... end_tracker({moniker|uuid}); Options Discriminatory Options The tracker object has the standard discrimnatory options: _for ; _between ... _to ; _not . Tracker Specific There are various option available for the tracker object: option notes _freq({frequency}[, {unit}]) Reporting frequency of trackpoint s. The {unit} can only be of distance. The frequency and unit can be made default with set_tracker()_freq({default_freuency}); and set_tracker()_unit({default_unit)}); respectively. _lapat() _lapat({lap_value}[, {unit}]) _clepe({clepe_convention}) The clepe (naming) convention used for children ( trackpoint s). Clepe conventions available: cognomen e.g. {tracker_moniker}_1 , {tracker_moniker}_2 ...; dtstamp datetime stamp e.g. 2021-07-30T12:22:32Z (ISO 8601); utstamp unix time stamp; latin ; greek ; roman ; hex . Can be set with set_tracker()_clepe({default_clepe_convention}); _trackwidth({width}) Width of track used to depict track on human display. Using css syntax: medium I thin I length I initial I inherit _trackstyle({style}) Style of track used to depict track on human display. Uses css cyntax, with an additions breadcrumb value: none I hidden I dotted I dashed I solid I double I groove I ridge I breadcrumb I inset I outset I initial I inherit _trackcolour({colour}) color I transparent I initial I inherit _trackcss({css}) Uses border- css to style track. breadcrumbs !!! Funnels & Channels The 'tracker` object can be funnelled and channelled. Commonly used funnels and channels are: funnel/channel example notes _channel(ros2,NavSatFix) Channels yield s into ros2 messages using the NatSatFix.msg format. Note blockchaining is not supported. _channel(file,gpx) Channels yield s into blob file(s) in gpx format. Note blockchaining is provided. _funnel(ros2,NavSatFix) Funnels ros2 messages using the NatSatFix.msg format into ump s. Statistical (aggregate) collation is supported. _funnel(file,gpx) Funnels file(s) and/or blobc in gpx format into yield s. Note blockchaining is provided. Events event notes yield_tracker({moniker|uuid})_trackpoint({moniker|uuid})_value({value}[, {unit{]) The yield from the tracker to report the trackpoint . begin_tracker({moniker|uuid}) ... end_tracker({moniker|uuid}) A tracker has a definable event trap object dimension tracker spatial pulse tempus temporal and spatial tracker/pulse 3e86d0be-08bd-493d-9ecb-ecfcef3c91c8 Beatrice (Luke's old phone) 189510f2-6050-49db-9f5b-82d121d245c2 Rapunzel (Tav's new phone) 2f92326d-1294-4529-afcd-2ce0676a8dd0 Nicola (Tav's old phone) 52793991-8a85-46ee-967d-99d4e5660117 EAFE02127 (E-Bike) fe92f2cc-ec36-47a2-865f-8afc176f5341 Galaxy Watch (Tav's) 10bb3e28-be00-48e5-97ce-55d920f266ac Raspberyy Pi tracker trackpoint pulse pulsepoint 27db61e5-2ab4-4d45-ada2-d9d800c31748 marker https://www.qrcode-monkey.com/?ut_source=google_c&ut_medium=cpc&ut_campaign=&ut_content=&ut_term=create%20qr%20code%20free_p&gclid=CjwKCAjwi9-HBhACEiwAPzUhHA7HC_ZnhP0I9dAtfigt2NMOfESFpJCHNGeWsldoTajODV0aDDsi4hoCkqYQAvD_BwE#text Foreground Colour:#000000 Background Colour: #FCF414 add_pulse({name/uuid}) _freq({frequency}) _ add_stat({name/uuid}) _scalar({scalar}[, {unit}]) _vector({vector}[, {unit}]) _array({array}[, {unit}]) _type({type}[, {unit}]) _unit({unit}) _for({name/uuid_1}[, ...{name/uuid_n}]) _pulse() _tracker() add_metric({name/uuid}) _scalar({scalar}[, {unit}]) _unit({unit}) _for({name/uuid_1}[, ...{name/uuid_n}]) _pulse() _tracker() Prepositions with (roll)call \u2194 here, pong ping \u2194 pong ask \u2194 tell rem(meber) \u2194 recall fetch \u2194 back set \u2194 get where \u2194 here poll \u2194 result req(uest) \u2194 resp(onse) go \u2194 stop add \u2194 minus look \u2194 see listen \u2194 h Nouns tracker pulse point snapshot vidshot gnss battery sensor actuat(or) trackpoint pulsepoint metric stat route path marker Postpositions _for({name/uuid_1}[, ...{name/uuid_n}]) _on({map}, {coordinates}[, unit}]) _at({datetime}) _au({point_coordinates}) _between({scalar_1})_and({scalar_n}) _greaterthan({scalar}) _lessthan({scalar}) _equalto({scalar})) _like({like_string}) _regexp({regexpression}) Genera human ai robot mobot organic thing console object subject Options: Setup: add_metric({name/uuid}); with_metric({name/uuid}); add_metric({name/uuid}[, {unit}]) _scalar({name/uuid}[, {unit}]) _tracker({name/uuid}); _to({name/uuid}) _for({name/uuid_1}[, ...{name/uuid_n}]) _between({name/uuid_1})_and({name/uuid}) Metric Scalar {metric}_scalar({name/uuid}[, {unit}]) Scalar Units Area square metre Data Transfer Digital Storage Energy Frequency Fuel Economy Length Mass Plane Angle Pressure Speed Temperature Time Volume Run: Pause: End: Example: In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe, both things know each other, and are up-to-date with each other. Thing df88accd has a GPS sensor called df_gps , thing 344d4c22 has a heartbeat monitor attached to a human called bert ( 73e4f567-952c-463a-a3d7-bc26c8053e54 ). Bert is accessing the mist using a console (not shown in this example)... In this example bert is going to set up a tracker to be shared by df88accd and 344d4c22 , df88accd will provide GPS coordinates & elevation and 344d4c22 will provide bert s heartbeat. sequenceDiagram autonumber participant bert participant df88accd participant 344d4c22 Note over bert,344d4c22: ...create tracker... bert->344d4c22: add_tracker(walk to park)_for(df88accd,344d4c22)#59; bert->344d4c22: with_tracker(walk to park)_freq(2,sec)_lapat()#59; Note over bert,df88accd: ...add metrics, append to tracker, append to provider (df88accd)... bert->>bert: add_gps(gps)_scalar(DD); bert->>df88accd: with_gps(gps)_tracker(walk to park)_for(df88accd)#59; bert->>bert: add_metric(elev)_scalar(elevation,m)#59; bert->>df88accd: with_metric(elev)_tracker(walk to park)_for(df88accd)#59; Note over bert,344d4c22: ...add metric, append to tracker, append to provider (344d4c22)... bert->>344d4c22: add_metric(heartbeat)_scalar(heartbeat,bpm)_for(344d4c22)#59; bert->>344d4c22: with_metric(heartbeat)_tracker(walk to park)#59; Note over bert,344d4c22: ...initiate tracker (now)... bert->344d4c22: run_tracker(walk to park)#59; Note over bert,df88accd: ...df88accd provides trackpoint and appends metrics... df88accd->>df88accd: add_trackpoint(d244)_tracker(walk to park)_datetime(2021-07-15T07:06:30Z)_hash(094f)#59; df88accd->>bert: with_trackpoint(d244)_gps(gps)_value(-26.8025640,153.1338770)#59; df88accd->>bert: with_trackpoint(d244)_metric(elev)_value(14.6)#59; Note over bert,344d4c22: ...344d4c22 appends metric to trackpoint... 344d4c22->>bert: with_trackpoint(d244)_metric(heartbeat)_value(90)#59; Note over bert,344d4c22: ...344d4c22 provides trackpoint and appends metric... 344d4c22->>344d4c22: add_trackpoint(4b2b)_tracker(walk to park)_datetime(2021-07-15T07:06:32Z)_hash(93f0)#59; 344d4c22->>bert: with_trackpoint(4b2b)_gps(gps)_metric(heartbeat)_value(92)#59; Note over bert,df88accd: ...df88accd appends metrics to trackpoint... df88accd->>bert: with_trackpoint(4b2b)_gps(gps)_value(-26.8025640,153.1338770)#59; df88accd->>bert: with_trackpoint(4b2b)_metric(elev)_value(14.6)#59; \u2460 bert creates the tracker, called walk to park with command: add_tracker(walk to park)_for(df88accd,344d4c22); . As default everyone in the mist will pick up and remember, however, things df88accd and 344d4c22 are targeted, so they will be the only things to act upon tracker, \u2461 Bert now sets up the tracker with a frequency of track-points set to every 2 sec 'onds to publish and no laps, with command: with_tracker(walk to park)_freq(2,sec)_lapat(); . Now the tracker has been created, bert now sets up the metrics for the tracker to use\u2462. With the command, add_gps(gps)_scalar(DD); , the GPS metric (called gps ) is created. The GPS metric is a predefined metric. The scalar (measurement system) is specified as decimal degrees ( DD ). Everyone in the mist will pick up the command, including df88accd and 344d4c22 . Since df88accd has a GPS sensor it will be responsible for tracking its coordinates, so bert assigns the GPS metric ( gps ) to the walk to park tracker and df88accd in the same command: add_tracker(walk to park)_for(df88accd,344d4c22); \u2463. Another metric, elevation, is created \u2464, measured in metres ( m ). The elevation metric is then assigned to the walk to park tracker and thing df88accd \u2465, . bert->>344d4c22: add_metric(heartbeat)_scalar(heartbeat,bpm)_for(344d4c22)#59; bert->>344d4c22: with_metric(heartbeat)_tracker(walk to park)#59; Note over bert,344d4c22: ...add metric, append to tracker, append to provider (344d4c22)... bert->344d4c22: run_tracker(walk to park)#59; Note over bert,df88accd: ...df88accd provides trackpoint and appends metrics... df88accd->>df88accd: add_trackpoint(d244)_tracker(walk to park)_hash(094f)#59; df88accd->>bert: with_trackpoint(d244)_gps(gps)_value(-26.7937,153.0848)#59; df88accd->>bert: with_trackpoint(d244)_metric(elev)_value(10.1)#59; Note over bert,344d4c22: ...344d4c22 appends metric to trackpoint... 344d4c22->>bert: with_trackpoint(d244)_metric(heartbeat)_value(90)#59; Note over bert,344d4c22: ...344d4c22 provides trackpoint and appends metric... 344d4c22->>344d4c22: add_trackpoint(4b2b)_tracker(walk to park)_hash(93f0)#59; 344d4c22->>bert: with_trackpoint(4b2b)_gps(gps)_metric(heartbeat)_value(92)#59; Note over bert,df88accd: ...df88accd appends metrics to trackpoint... df88accd->>bert: with_trackpoint(4b2b)_gps(gps)_value(-26.7937,153.0848)#59; df88accd->>bert: with_trackpoint(4b2b)_metric(elev)_value(10.1)#59; <?xml version=\"1.0\" encoding=\"UTF-8\"?> <gpx creator=\"StravaGPX Android\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\"> <metadata> <time>2021-07-15T07:05:44Z</time> </metadata> <trk> <name>Afternoon Activity</name> <type>18</type> <trkseg> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:30Z</time> </trkpt> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:32Z</time> </trkpt> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:34Z</time> </trkpt> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:36Z</time> </trkpt> </trkseg> </trk> </gpx> add_tracker(Afternoon Activity)_dict(type,18)_datetime(2021-07-15T07:05:44Z); add_gps(trkpt)_unt(DD)_tracker(Afternoon Activity); add_metric(ele)_scalar(elevat)_unit(m)_tracker(Afternoon Activity); with_tracker(Afternoon Activity)_freq(2,sec); run_tracker(Afternoon Activity); add_lap(4693)_tracker(Afternoon Activity); add_trackpoint(9b4a)_hash(4693); with_trackpoint(9b4a)_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint(9b4a)_metric(ele)_value(14.6); with_trackpoint(9b4a)_datetime(2021-07-15T07:06:30Z); add_trackpoint(a059)_hash(9b4a); with_trackpoint(a059)_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint(a059)_metric(ele)_value(14.6); with_trackpoint(a059)_datetime(2021-07-15T07:06:32Z); add_trackpoint(1c8b)_hash(a059); with_trackpoint()_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint()_metric(ele)_value(14.6); with_trackpoint()_datetime(2021-07-15T07:06:34Z); add_trackpoint(eb64)_hash(1c8b); with_trackpoint()_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint()_metric(ele)_value(14.6); with_trackpoint()_datetime(2021-07-15T07:06:36Z); end_tracker(Afternoon Activity); Implicit Call The implicit [roll]call is a request for existence of other types in its known universe, Syntax: call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console(); Explicit Call Syntax: call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Collection Call Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); ---b8da-59c35467963b 57e7-3869--a16f-97cad6b4e14c 68937890----63dc25646e30 35dccb9d 9543ebae call()_what(); call()_only(); (rolll)call \u2194 pong, here ping \u2194 pong ask \u2194 tell rem(meber) \u2194 recall fetch \u2194 back set \u2194 get df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid} GNSS Global Positioning System (United States) GLONASS (Russia) Galileo (EU) BeiDou (China) QZSS (Japan) IRNSS \u2015 NAVIC (India) A spatial reference system ( SRS ) or coordinate reference system ( CRS ) is a coordinate-based local, regional or global system used to locate geographical entities. Universal Transverse Mercator coordinate system British national grid reference system Chinese Global Navigation Grid Code Hellenic Geodetic Reference System 1987 Irish grid reference system Irish Transverse Mercator Israeli Transverse Mercator Israeli Cassini Soldner Jordan Transverse Mercator Lambert conformal conic projection International mapcode system Military Grid Reference System United States National Grid","title":"Tracker"},{"location":"metaphysic/obj/tracker/#tracker","text":"NOTE: tracking a parcel! The tracker object is used to track a moving position of a thingy in space using location and /or time. There are four similar tracking objects for tracking thingies: object notes tracker Tracks the moving position of a thingy in space using location and/or time. locator Tracks the moving position of a thingy in space using only location. pulse Tracks a thingy (or any yielding object) using only regular time. calendar or tempus Tracks a thingy (or any yielding object) using irregular time.","title":"Tracker"},{"location":"metaphysic/obj/tracker/#construct","text":"add_tracker({moniker|uuid}); with_tracker({moniker|uuid}); begin_tracker({moniker|uuid}); ... end_tracker... To create and develop the tracker object use add_ , however, using with_ the first time will initiate construction. Similarly using begin_ ..._end_ for the first time will also initiate construction, but this approach is not recommended. The tracker does not automatically run/start upon construction, you need to explicitly start the tracker with run_ , start_ , or, exec_ .","title":"Construct"},{"location":"metaphysic/obj/tracker/#disposal","text":"dispose_tracker({moniker|uuid}); dump_tracker({moniker|uuid}); forget_tracker({moniker|uuid}); To dispose of a tracker from primal memory use dispose_ , dump_ or forget_ .","title":"Disposal"},{"location":"metaphysic/obj/tracker/#development","text":"with_tracker({moniker|uuid})","title":"Development"},{"location":"metaphysic/obj/tracker/#control","text":"run_tracker({name/uuid}); pause_tracker({name/uuid}); stop_tracker({name/uuid}); start_tracker({name/uuid}); halt_tracker({name/uuid}); go_tracker({name/uuid}); hold_tracker({name/uuid}); Various verbs are available to control a tracker as seen above. When a tracker is paused or stopped no trackpoint s will yield The tracker object can be controlled (started, paused and stopped) Disposal","title":"Control"},{"location":"metaphysic/obj/tracker/#event-trapping","text":"The tracker object can be event trapped with begin_ and end_ . begin_tracker({moniker|uuid}); ... end_tracker({moniker|uuid});","title":"Event Trapping"},{"location":"metaphysic/obj/tracker/#options","text":"","title":"Options"},{"location":"metaphysic/obj/tracker/#discriminatory-options","text":"The tracker object has the standard discrimnatory options: _for ; _between ... _to ; _not .","title":"Discriminatory Options"},{"location":"metaphysic/obj/tracker/#tracker-specific","text":"There are various option available for the tracker object: option notes _freq({frequency}[, {unit}]) Reporting frequency of trackpoint s. The {unit} can only be of distance. The frequency and unit can be made default with set_tracker()_freq({default_freuency}); and set_tracker()_unit({default_unit)}); respectively. _lapat() _lapat({lap_value}[, {unit}]) _clepe({clepe_convention}) The clepe (naming) convention used for children ( trackpoint s). Clepe conventions available: cognomen e.g. {tracker_moniker}_1 , {tracker_moniker}_2 ...; dtstamp datetime stamp e.g. 2021-07-30T12:22:32Z (ISO 8601); utstamp unix time stamp; latin ; greek ; roman ; hex . Can be set with set_tracker()_clepe({default_clepe_convention}); _trackwidth({width}) Width of track used to depict track on human display. Using css syntax: medium I thin I length I initial I inherit _trackstyle({style}) Style of track used to depict track on human display. Uses css cyntax, with an additions breadcrumb value: none I hidden I dotted I dashed I solid I double I groove I ridge I breadcrumb I inset I outset I initial I inherit _trackcolour({colour}) color I transparent I initial I inherit _trackcss({css}) Uses border- css to style track. breadcrumbs !!!","title":"Tracker Specific"},{"location":"metaphysic/obj/tracker/#funnels-channels","text":"The 'tracker` object can be funnelled and channelled. Commonly used funnels and channels are: funnel/channel example notes _channel(ros2,NavSatFix) Channels yield s into ros2 messages using the NatSatFix.msg format. Note blockchaining is not supported. _channel(file,gpx) Channels yield s into blob file(s) in gpx format. Note blockchaining is provided. _funnel(ros2,NavSatFix) Funnels ros2 messages using the NatSatFix.msg format into ump s. Statistical (aggregate) collation is supported. _funnel(file,gpx) Funnels file(s) and/or blobc in gpx format into yield s. Note blockchaining is provided.","title":"Funnels &amp; Channels"},{"location":"metaphysic/obj/tracker/#events","text":"event notes yield_tracker({moniker|uuid})_trackpoint({moniker|uuid})_value({value}[, {unit{]) The yield from the tracker to report the trackpoint . begin_tracker({moniker|uuid}) ... end_tracker({moniker|uuid}) A tracker has a definable event trap object dimension tracker spatial pulse tempus temporal and spatial","title":"Events"},{"location":"metaphysic/obj/tracker/#trackerpulse","text":"3e86d0be-08bd-493d-9ecb-ecfcef3c91c8 Beatrice (Luke's old phone) 189510f2-6050-49db-9f5b-82d121d245c2 Rapunzel (Tav's new phone) 2f92326d-1294-4529-afcd-2ce0676a8dd0 Nicola (Tav's old phone) 52793991-8a85-46ee-967d-99d4e5660117 EAFE02127 (E-Bike) fe92f2cc-ec36-47a2-865f-8afc176f5341 Galaxy Watch (Tav's) 10bb3e28-be00-48e5-97ce-55d920f266ac Raspberyy Pi tracker trackpoint pulse pulsepoint 27db61e5-2ab4-4d45-ada2-d9d800c31748 marker https://www.qrcode-monkey.com/?ut_source=google_c&ut_medium=cpc&ut_campaign=&ut_content=&ut_term=create%20qr%20code%20free_p&gclid=CjwKCAjwi9-HBhACEiwAPzUhHA7HC_ZnhP0I9dAtfigt2NMOfESFpJCHNGeWsldoTajODV0aDDsi4hoCkqYQAvD_BwE#text Foreground Colour:#000000 Background Colour: #FCF414 add_pulse({name/uuid}) _freq({frequency}) _ add_stat({name/uuid}) _scalar({scalar}[, {unit}]) _vector({vector}[, {unit}]) _array({array}[, {unit}]) _type({type}[, {unit}]) _unit({unit}) _for({name/uuid_1}[, ...{name/uuid_n}]) _pulse() _tracker() add_metric({name/uuid}) _scalar({scalar}[, {unit}]) _unit({unit}) _for({name/uuid_1}[, ...{name/uuid_n}]) _pulse() _tracker()","title":"tracker/pulse"},{"location":"metaphysic/obj/tracker/#prepositions","text":"with (roll)call \u2194 here, pong ping \u2194 pong ask \u2194 tell rem(meber) \u2194 recall fetch \u2194 back set \u2194 get where \u2194 here poll \u2194 result req(uest) \u2194 resp(onse) go \u2194 stop add \u2194 minus look \u2194 see listen \u2194 h","title":"Prepositions"},{"location":"metaphysic/obj/tracker/#nouns","text":"tracker pulse point snapshot vidshot gnss battery sensor actuat(or) trackpoint pulsepoint metric stat route path marker","title":"Nouns"},{"location":"metaphysic/obj/tracker/#postpositions","text":"_for({name/uuid_1}[, ...{name/uuid_n}]) _on({map}, {coordinates}[, unit}]) _at({datetime}) _au({point_coordinates}) _between({scalar_1})_and({scalar_n}) _greaterthan({scalar}) _lessthan({scalar}) _equalto({scalar})) _like({like_string}) _regexp({regexpression})","title":"Postpositions"},{"location":"metaphysic/obj/tracker/#genera","text":"human ai robot mobot organic thing console object subject","title":"Genera"},{"location":"metaphysic/obj/tracker/#options_1","text":"","title":"Options:"},{"location":"metaphysic/obj/tracker/#setup","text":"add_metric({name/uuid}); with_metric({name/uuid}); add_metric({name/uuid}[, {unit}]) _scalar({name/uuid}[, {unit}]) _tracker({name/uuid}); _to({name/uuid}) _for({name/uuid_1}[, ...{name/uuid_n}]) _between({name/uuid_1})_and({name/uuid})","title":"Setup:"},{"location":"metaphysic/obj/tracker/#metric-scalar","text":"{metric}_scalar({name/uuid}[, {unit}]) Scalar Units Area square metre Data Transfer Digital Storage Energy Frequency Fuel Economy Length Mass Plane Angle Pressure Speed Temperature Time Volume","title":"Metric Scalar"},{"location":"metaphysic/obj/tracker/#run","text":"","title":"Run:"},{"location":"metaphysic/obj/tracker/#pause","text":"","title":"Pause:"},{"location":"metaphysic/obj/tracker/#end","text":"","title":"End:"},{"location":"metaphysic/obj/tracker/#example","text":"In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe, both things know each other, and are up-to-date with each other. Thing df88accd has a GPS sensor called df_gps , thing 344d4c22 has a heartbeat monitor attached to a human called bert ( 73e4f567-952c-463a-a3d7-bc26c8053e54 ). Bert is accessing the mist using a console (not shown in this example)... In this example bert is going to set up a tracker to be shared by df88accd and 344d4c22 , df88accd will provide GPS coordinates & elevation and 344d4c22 will provide bert s heartbeat. sequenceDiagram autonumber participant bert participant df88accd participant 344d4c22 Note over bert,344d4c22: ...create tracker... bert->344d4c22: add_tracker(walk to park)_for(df88accd,344d4c22)#59; bert->344d4c22: with_tracker(walk to park)_freq(2,sec)_lapat()#59; Note over bert,df88accd: ...add metrics, append to tracker, append to provider (df88accd)... bert->>bert: add_gps(gps)_scalar(DD); bert->>df88accd: with_gps(gps)_tracker(walk to park)_for(df88accd)#59; bert->>bert: add_metric(elev)_scalar(elevation,m)#59; bert->>df88accd: with_metric(elev)_tracker(walk to park)_for(df88accd)#59; Note over bert,344d4c22: ...add metric, append to tracker, append to provider (344d4c22)... bert->>344d4c22: add_metric(heartbeat)_scalar(heartbeat,bpm)_for(344d4c22)#59; bert->>344d4c22: with_metric(heartbeat)_tracker(walk to park)#59; Note over bert,344d4c22: ...initiate tracker (now)... bert->344d4c22: run_tracker(walk to park)#59; Note over bert,df88accd: ...df88accd provides trackpoint and appends metrics... df88accd->>df88accd: add_trackpoint(d244)_tracker(walk to park)_datetime(2021-07-15T07:06:30Z)_hash(094f)#59; df88accd->>bert: with_trackpoint(d244)_gps(gps)_value(-26.8025640,153.1338770)#59; df88accd->>bert: with_trackpoint(d244)_metric(elev)_value(14.6)#59; Note over bert,344d4c22: ...344d4c22 appends metric to trackpoint... 344d4c22->>bert: with_trackpoint(d244)_metric(heartbeat)_value(90)#59; Note over bert,344d4c22: ...344d4c22 provides trackpoint and appends metric... 344d4c22->>344d4c22: add_trackpoint(4b2b)_tracker(walk to park)_datetime(2021-07-15T07:06:32Z)_hash(93f0)#59; 344d4c22->>bert: with_trackpoint(4b2b)_gps(gps)_metric(heartbeat)_value(92)#59; Note over bert,df88accd: ...df88accd appends metrics to trackpoint... df88accd->>bert: with_trackpoint(4b2b)_gps(gps)_value(-26.8025640,153.1338770)#59; df88accd->>bert: with_trackpoint(4b2b)_metric(elev)_value(14.6)#59; \u2460 bert creates the tracker, called walk to park with command: add_tracker(walk to park)_for(df88accd,344d4c22); . As default everyone in the mist will pick up and remember, however, things df88accd and 344d4c22 are targeted, so they will be the only things to act upon tracker, \u2461 Bert now sets up the tracker with a frequency of track-points set to every 2 sec 'onds to publish and no laps, with command: with_tracker(walk to park)_freq(2,sec)_lapat(); . Now the tracker has been created, bert now sets up the metrics for the tracker to use\u2462. With the command, add_gps(gps)_scalar(DD); , the GPS metric (called gps ) is created. The GPS metric is a predefined metric. The scalar (measurement system) is specified as decimal degrees ( DD ). Everyone in the mist will pick up the command, including df88accd and 344d4c22 . Since df88accd has a GPS sensor it will be responsible for tracking its coordinates, so bert assigns the GPS metric ( gps ) to the walk to park tracker and df88accd in the same command: add_tracker(walk to park)_for(df88accd,344d4c22); \u2463. Another metric, elevation, is created \u2464, measured in metres ( m ). The elevation metric is then assigned to the walk to park tracker and thing df88accd \u2465, . bert->>344d4c22: add_metric(heartbeat)_scalar(heartbeat,bpm)_for(344d4c22)#59; bert->>344d4c22: with_metric(heartbeat)_tracker(walk to park)#59; Note over bert,344d4c22: ...add metric, append to tracker, append to provider (344d4c22)... bert->344d4c22: run_tracker(walk to park)#59; Note over bert,df88accd: ...df88accd provides trackpoint and appends metrics... df88accd->>df88accd: add_trackpoint(d244)_tracker(walk to park)_hash(094f)#59; df88accd->>bert: with_trackpoint(d244)_gps(gps)_value(-26.7937,153.0848)#59; df88accd->>bert: with_trackpoint(d244)_metric(elev)_value(10.1)#59; Note over bert,344d4c22: ...344d4c22 appends metric to trackpoint... 344d4c22->>bert: with_trackpoint(d244)_metric(heartbeat)_value(90)#59; Note over bert,344d4c22: ...344d4c22 provides trackpoint and appends metric... 344d4c22->>344d4c22: add_trackpoint(4b2b)_tracker(walk to park)_hash(93f0)#59; 344d4c22->>bert: with_trackpoint(4b2b)_gps(gps)_metric(heartbeat)_value(92)#59; Note over bert,df88accd: ...df88accd appends metrics to trackpoint... df88accd->>bert: with_trackpoint(4b2b)_gps(gps)_value(-26.7937,153.0848)#59; df88accd->>bert: with_trackpoint(4b2b)_metric(elev)_value(10.1)#59; <?xml version=\"1.0\" encoding=\"UTF-8\"?> <gpx creator=\"StravaGPX Android\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\"> <metadata> <time>2021-07-15T07:05:44Z</time> </metadata> <trk> <name>Afternoon Activity</name> <type>18</type> <trkseg> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:30Z</time> </trkpt> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:32Z</time> </trkpt> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:34Z</time> </trkpt> <trkpt lat=\"-26.8025640\" lon=\"153.1338770\"> <ele>14.6</ele> <time>2021-07-15T07:06:36Z</time> </trkpt> </trkseg> </trk> </gpx> add_tracker(Afternoon Activity)_dict(type,18)_datetime(2021-07-15T07:05:44Z); add_gps(trkpt)_unt(DD)_tracker(Afternoon Activity); add_metric(ele)_scalar(elevat)_unit(m)_tracker(Afternoon Activity); with_tracker(Afternoon Activity)_freq(2,sec); run_tracker(Afternoon Activity); add_lap(4693)_tracker(Afternoon Activity); add_trackpoint(9b4a)_hash(4693); with_trackpoint(9b4a)_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint(9b4a)_metric(ele)_value(14.6); with_trackpoint(9b4a)_datetime(2021-07-15T07:06:30Z); add_trackpoint(a059)_hash(9b4a); with_trackpoint(a059)_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint(a059)_metric(ele)_value(14.6); with_trackpoint(a059)_datetime(2021-07-15T07:06:32Z); add_trackpoint(1c8b)_hash(a059); with_trackpoint()_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint()_metric(ele)_value(14.6); with_trackpoint()_datetime(2021-07-15T07:06:34Z); add_trackpoint(eb64)_hash(1c8b); with_trackpoint()_gps(trkpt)_value(-26.8025640,153.1338770); with_trackpoint()_metric(ele)_value(14.6); with_trackpoint()_datetime(2021-07-15T07:06:36Z); end_tracker(Afternoon Activity);","title":"Example:"},{"location":"metaphysic/obj/tracker/#implicit-call","text":"The implicit [roll]call is a request for existence of other types in its known universe,","title":"Implicit Call"},{"location":"metaphysic/obj/tracker/#syntax","text":"call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console();","title":"Syntax:"},{"location":"metaphysic/obj/tracker/#explicit-call","text":"","title":"Explicit Call"},{"location":"metaphysic/obj/tracker/#syntax_1","text":"call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Syntax:"},{"location":"metaphysic/obj/tracker/#collection-call","text":"Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); ---b8da-59c35467963b 57e7-3869--a16f-97cad6b4e14c 68937890----63dc25646e30 35dccb9d 9543ebae call()_what(); call()_only(); (rolll)call \u2194 pong, here ping \u2194 pong ask \u2194 tell rem(meber) \u2194 recall fetch \u2194 back set \u2194 get df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Collection Call"},{"location":"metaphysic/obj/tracker/#gnss","text":"","title":"GNSS"},{"location":"metaphysic/obj/tracker/#global-positioning-system-united-states","text":"","title":"Global Positioning System (United States)"},{"location":"metaphysic/obj/tracker/#glonass-russia","text":"","title":"GLONASS (Russia)"},{"location":"metaphysic/obj/tracker/#galileo-eu","text":"","title":"Galileo (EU)"},{"location":"metaphysic/obj/tracker/#beidou-china","text":"","title":"BeiDou (China)"},{"location":"metaphysic/obj/tracker/#qzss-japan","text":"","title":"QZSS (Japan)"},{"location":"metaphysic/obj/tracker/#irnss-navic-india","text":"A spatial reference system ( SRS ) or coordinate reference system ( CRS ) is a coordinate-based local, regional or global system used to locate geographical entities. Universal Transverse Mercator coordinate system British national grid reference system Chinese Global Navigation Grid Code Hellenic Geodetic Reference System 1987 Irish grid reference system Irish Transverse Mercator Israeli Transverse Mercator Israeli Cassini Soldner Jordan Transverse Mercator Lambert conformal conic projection International mapcode system Military Grid Reference System United States National Grid","title":"IRNSS \u2015 NAVIC (India)"},{"location":"metaphysic/obj/transmiss/","text":"Transmission (object) Thing Descriptor (Universal Robotic Description Format - URDF) thing descriptor notes API joint A structure that transforms spatial vectors between two or more link s. Most usually a joint 's state is managed through an actuat or. joint see also: link actuat link transmiss , transmission Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Transmission (object)"},{"location":"metaphysic/obj/transmiss/#transmission-object","text":"","title":"Transmission (object)"},{"location":"metaphysic/obj/transmiss/#thing-descriptor-universal-robotic-description-format-urdf","text":"thing descriptor notes API joint A structure that transforms spatial vectors between two or more link s. Most usually a joint 's state is managed through an actuat or. joint see also: link actuat link transmiss , transmission","title":"Thing Descriptor (Universal Robotic Description Format - URDF)"},{"location":"metaphysic/obj/transmiss/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/transmiss/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/transmiss/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/transmiss/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/transmiss/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/transmiss/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/transmiss/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/transmiss/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/transmiss/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/transmiss/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/transmiss/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/trip/","text":"Trip (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Trip (object)"},{"location":"metaphysic/obj/trip/#trip-object","text":"","title":"Trip (object)"},{"location":"metaphysic/obj/trip/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/trip/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/trip/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/trip/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/trip/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/trip/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/trip/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/trip/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/trip/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/trip/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/trip/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/valid/","text":"Valid (object) Auditing & Error Handling auditing notes examples API valid valid err , error err refuse wtf Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Valid (object)"},{"location":"metaphysic/obj/valid/#valid-object","text":"","title":"Valid (object)"},{"location":"metaphysic/obj/valid/#auditing-error-handling","text":"auditing notes examples API valid valid err , error err refuse wtf","title":" Auditing &amp; Error Handling"},{"location":"metaphysic/obj/valid/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/valid/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/valid/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/valid/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/valid/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/valid/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/valid/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/valid/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/valid/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/valid/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/valid/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/viapoint/","text":"Viapoint (object) Inheritance from waypoint The newly created waypoint from a spline calculation add_route( splinedmoniker )_route( moniker )_spline() ? log_console()_route( splinedmoniker )_waypoint({viapoint}); ; add_route( splinedmoniker )_route( moniker )_spline() ? log_console()_route( splinedmoniker )_viapoint(); ; Inheritance from stacle Both obstacle s and substacle s. An example of Cubic B-spline curve Shuai, Cheng & Xiao, Junhao & Lu, Huimin. (2014). Real-time obstacle avoidance using subtargets and Cubic B-spline for mobile robots. 2014 IEEE International Conference on Information and Automation, ICIA 2014. 634-639. 10.1109/ICInfA.2014.6932731. Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Viapoint (object)"},{"location":"metaphysic/obj/viapoint/#viapoint-object","text":"","title":"Viapoint (object)"},{"location":"metaphysic/obj/viapoint/#inheritance-from-waypoint","text":"The newly created waypoint from a spline calculation add_route( splinedmoniker )_route( moniker )_spline() ? log_console()_route( splinedmoniker )_waypoint({viapoint}); ; add_route( splinedmoniker )_route( moniker )_spline() ? log_console()_route( splinedmoniker )_viapoint(); ;","title":"Inheritance from waypoint"},{"location":"metaphysic/obj/viapoint/#inheritance-from-stacle","text":"Both obstacle s and substacle s. An example of Cubic B-spline curve Shuai, Cheng & Xiao, Junhao & Lu, Huimin. (2014). Real-time obstacle avoidance using subtargets and Cubic B-spline for mobile robots. 2014 IEEE International Conference on Information and Automation, ICIA 2014. 634-639. 10.1109/ICInfA.2014.6932731.","title":"Inheritance from stacle"},{"location":"metaphysic/obj/viapoint/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/viapoint/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/viapoint/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/viapoint/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/viapoint/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/viapoint/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/viapoint/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/viapoint/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/viapoint/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/viapoint/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/viapoint/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/way/","text":"Way (object) The way object is a representation of an orientation at two physical points and their relationship with each other. The way is at the penultimate lowest hierarchical level of the 'Route Matrix', being similar to a path and a trip . Route Matrix Declaration The default declaration of the way object is to at least provide a moniker , however, at declaration it is common to provide two locations using either: a child waypoint (or shortened wp ) assignment; or, using the _coords posit. add_way( moniker ); +_way( moniker1 , moniker2 ,...); add_way( way_moniker , way_uuid ) add_way( way_moniker , way_uuid , way_type ) human way way_type Description corridor tube road stairway pipe escalator travelator landing runway sidewalk / pavement cyclelane / sideroad add_pipe( pipe_moniker , pipe_uuid ) add_pipe( pipe_moniker , pipe_uuid , pipe_type ) pipe_type Description pipe tube non-human way (thing way) Written with StackEdit .","title":"Way (object)"},{"location":"metaphysic/obj/way/#way-object","text":"The way object is a representation of an orientation at two physical points and their relationship with each other. The way is at the penultimate lowest hierarchical level of the 'Route Matrix', being similar to a path and a trip . Route Matrix","title":"Way (object)"},{"location":"metaphysic/obj/way/#declaration","text":"The default declaration of the way object is to at least provide a moniker , however, at declaration it is common to provide two locations using either: a child waypoint (or shortened wp ) assignment; or, using the _coords posit. add_way( moniker ); +_way( moniker1 , moniker2 ,...); add_way( way_moniker , way_uuid ) add_way( way_moniker , way_uuid , way_type ) human way way_type Description corridor tube road stairway pipe escalator travelator landing runway sidewalk / pavement cyclelane / sideroad add_pipe( pipe_moniker , pipe_uuid ) add_pipe( pipe_moniker , pipe_uuid , pipe_type ) pipe_type Description pipe tube non-human way (thing way) Written with StackEdit .","title":"Declaration"},{"location":"metaphysic/obj/waypoint/","text":"Waypoint The waypoint object is a representation of an intermediate physical point or place on a map, place on a path, or route, or line of travel, or simply, a stopping point. Waypoint s contain, at least, a moniker, and, coordinates corresponding to a map object, whether in the form x, y , or form latitude, longitude for two dimensional coordinates, or an addition z, altitude property for three dimensional coordinates. A waypoint is at the lowest hierarchical level of the 'Route Matrix', being similar to a pose (sometimes called posepoint ) and a goal . Whereas, a waypoint is a point with location, pose is a point with location and orientation, then a goal is a point with location, orientation, and, timed elements. This is depicted in the 'Route Matrix'. Route Matrix In the family of 'location-only' based navigation objects, one itinerary has many route s, one route has many path s, and, one path has many waypoint s. Declaration & Assignment The default declaration of the waypoint object is to at least provide a moniker , however, at declaration it is common to provide a location using the _coords posit. The parameters of _coords are numeric, when not specified they will be implied to be {double} . Providing x_lat and y_long only implies a two-dimensional waypoint, and adding the z_alt parameter implies a three-dimensional waypoint. waypoint can be shortened to wp , both terms are syntactically the same and can be used freely and interchangabily. add_waypoint( moniker ); add_waypoint( moniker1 , moniker2 ,...); add_wp( moniker )_coords( x_lat , y_long ); add_waypoint( moniker )_coords( x_lat , y_long , z_alt ); Referencing & Assignment Referencing a waypoint is achieved with the with verb, or the shortened ( moniker ) syntax. The with_waypoint (or shortened with_wp ) command can be expanded to create multiple waypoint s using a coma-spearated list of moniker s and mutliple _coords posits. The position in the moniker list corresponds to the same order of appended _coords posits. add_waypoint( moniker ); with_wp( moniker1 , moniker2 ,...)_coords( x_lat1 , y_long1 )_coords( x_lat2 , y_long2 )... For easy of reading for humans, either a beginwith ... endwith syntax, or a nested statement approach can be taken. beginwith_waypoint( moniker1 , moniker2 ,...); ( moniker1 )_coords( x_lat1 , y_long1 ); ( moniker2 )_coords( x_lat1 , y_long1 ); ... endwith_wp(); with_wp( moniker1 , moniker2 ,...) ( moniker1 )_coords( x_lat1 , y_long1 ); ( moniker2 )_coords( x_lat1 , y_long1 ); ... ; Casting Casting to waypoint s sibling, pose and goal , is the safest and most commonly used cast of waypoint , as they are related. There are also two cousins of waypoint , landmark and poi , which can be safely cast into. Casting can be achieved by specifing the datatype using curly brackets ( {} ), or with the with verb. with_wp({pose}, waypointpmoniker ); with_pose( waypointmoniker ); with_wp({goal}, waypointpmoniker ); with_goal( waypointmoniker ); with_wp({pose}, waypointpmoniker ); with_landmark( waypointmoniker ); with_wp({goal}, waypointpmoniker ); with_poi( waypointmoniker ); Since pose , goal , landmark , and, poi are closely related, any extra circiculum posit will automatically imply the object has been recast. The moniker of the cast-from object will be given to the cast-to object , the moniker of the cast-from object will then be empty (unnamed). For example: add_wp(point1)_coords(4,2,8); log_console()_typeof(point1); // {waypoint} with_wp(point1)_orientat(0.229,-0.246,-0.785,-0.520); log_console([]: [])_nameof()_typeof(point1); // point1: {pose} log_console([]: [])_nameof()_typeof(point1)_wp(); // : {waypoint} Referencing Referencing the waypoint obejct can be achieved in the usual way with the with_ verb. with_waypoint( moniker )_... with_wp( moniker )_... Similar Objects The objects pose and goal are sibling objects in the route matrix, and behave in a similar way to the waypoint . The only difference is pose also includes orientation, whereas waypoint does not, and goal includes orientetion and time which waypoint does not. Two other objects, landmark and poi are use in the same manner as waypoint but are used in a specific way. Verbs verb description API add_ <waypoint> Declaration of object add go_ <waypoint> goto_ <waypoint> The proceeding object will go to the waypoint go with_ <waypoint> ( wpmoniker ) Referencing object with Posits posit description API _parse() _parse( string ) _parse({lang}, string ) Parses proceeding object Parses the string and determines language Parses string following language lang parse _coords() _coords_( x_lat1 , y_long1 ) _coords_( x_lat1 , y_long1 , z_alt ) Provides coordinates from proceeding object Provides two-dimensional coordinates of x_lat1 , y_long1 *Provides three-dimensional coordinates of x_lat1 , y_long1 , z_alt coords _geojson( geojsonstring ) Direct parse of geoJSON geojsonstring geojson _shapefile( shapefilestring ) Direct parse of Shapefile shapefilestring shapefile _kml( kmlstring ) Direct parse of KML kmlstring kml _displacemto( tomoniker ) _displacemto([ variablename ]) _displacemto(\u276c unit \u276d, tomoniker ) Provides the displacement from preceeding object to tomoniker object Provides the displacement from preceeding object to object monikered to the value of variablename Provides the displacement from preceeding object to tomoniker object with specified unit displacem _around() Reference to a zone of preceeding object defined by proceeding object around _x() , _x( x ) _y() , _y( y ) _z() , _z( z ) Gets and sets the x, y, and z coordinates, repsectively xyz _lat() , _lat( lat ) _lng() , _lng( lng ) _alt() , _alt( alt ) Gets and sets the x, y, and z coordinates (repsectively) of the preceeding object xyz _elev() _elevation( elev ) Gets and sets the elevation of the preceeding object elev _waitat() _waitat( wpmoniker ) Wait at proceeding object Wait at waypoint wpmoniker waitat _loiterat() _loiterat( wpmoniker ) Loiter at proceeding object Loiter at waypoint wpmoniker loiterat References pose ; goal","title":"Waypoint"},{"location":"metaphysic/obj/waypoint/#waypoint","text":"The waypoint object is a representation of an intermediate physical point or place on a map, place on a path, or route, or line of travel, or simply, a stopping point. Waypoint s contain, at least, a moniker, and, coordinates corresponding to a map object, whether in the form x, y , or form latitude, longitude for two dimensional coordinates, or an addition z, altitude property for three dimensional coordinates. A waypoint is at the lowest hierarchical level of the 'Route Matrix', being similar to a pose (sometimes called posepoint ) and a goal . Whereas, a waypoint is a point with location, pose is a point with location and orientation, then a goal is a point with location, orientation, and, timed elements. This is depicted in the 'Route Matrix'. Route Matrix In the family of 'location-only' based navigation objects, one itinerary has many route s, one route has many path s, and, one path has many waypoint s.","title":"Waypoint"},{"location":"metaphysic/obj/waypoint/#declaration-assignment","text":"The default declaration of the waypoint object is to at least provide a moniker , however, at declaration it is common to provide a location using the _coords posit. The parameters of _coords are numeric, when not specified they will be implied to be {double} . Providing x_lat and y_long only implies a two-dimensional waypoint, and adding the z_alt parameter implies a three-dimensional waypoint. waypoint can be shortened to wp , both terms are syntactically the same and can be used freely and interchangabily. add_waypoint( moniker ); add_waypoint( moniker1 , moniker2 ,...); add_wp( moniker )_coords( x_lat , y_long ); add_waypoint( moniker )_coords( x_lat , y_long , z_alt );","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/waypoint/#referencing-assignment","text":"Referencing a waypoint is achieved with the with verb, or the shortened ( moniker ) syntax. The with_waypoint (or shortened with_wp ) command can be expanded to create multiple waypoint s using a coma-spearated list of moniker s and mutliple _coords posits. The position in the moniker list corresponds to the same order of appended _coords posits. add_waypoint( moniker ); with_wp( moniker1 , moniker2 ,...)_coords( x_lat1 , y_long1 )_coords( x_lat2 , y_long2 )... For easy of reading for humans, either a beginwith ... endwith syntax, or a nested statement approach can be taken. beginwith_waypoint( moniker1 , moniker2 ,...); ( moniker1 )_coords( x_lat1 , y_long1 ); ( moniker2 )_coords( x_lat1 , y_long1 ); ... endwith_wp(); with_wp( moniker1 , moniker2 ,...) ( moniker1 )_coords( x_lat1 , y_long1 ); ( moniker2 )_coords( x_lat1 , y_long1 ); ... ;","title":"Referencing &amp; Assignment"},{"location":"metaphysic/obj/waypoint/#casting","text":"Casting to waypoint s sibling, pose and goal , is the safest and most commonly used cast of waypoint , as they are related. There are also two cousins of waypoint , landmark and poi , which can be safely cast into. Casting can be achieved by specifing the datatype using curly brackets ( {} ), or with the with verb. with_wp({pose}, waypointpmoniker ); with_pose( waypointmoniker ); with_wp({goal}, waypointpmoniker ); with_goal( waypointmoniker ); with_wp({pose}, waypointpmoniker ); with_landmark( waypointmoniker ); with_wp({goal}, waypointpmoniker ); with_poi( waypointmoniker ); Since pose , goal , landmark , and, poi are closely related, any extra circiculum posit will automatically imply the object has been recast. The moniker of the cast-from object will be given to the cast-to object , the moniker of the cast-from object will then be empty (unnamed). For example: add_wp(point1)_coords(4,2,8); log_console()_typeof(point1); // {waypoint} with_wp(point1)_orientat(0.229,-0.246,-0.785,-0.520); log_console([]: [])_nameof()_typeof(point1); // point1: {pose} log_console([]: [])_nameof()_typeof(point1)_wp(); // : {waypoint}","title":"Casting"},{"location":"metaphysic/obj/waypoint/#referencing","text":"Referencing the waypoint obejct can be achieved in the usual way with the with_ verb. with_waypoint( moniker )_... with_wp( moniker )_...","title":"Referencing"},{"location":"metaphysic/obj/waypoint/#similar-objects","text":"The objects pose and goal are sibling objects in the route matrix, and behave in a similar way to the waypoint . The only difference is pose also includes orientation, whereas waypoint does not, and goal includes orientetion and time which waypoint does not. Two other objects, landmark and poi are use in the same manner as waypoint but are used in a specific way.","title":"Similar Objects"},{"location":"metaphysic/obj/waypoint/#verbs","text":"verb description API add_ <waypoint> Declaration of object add go_ <waypoint> goto_ <waypoint> The proceeding object will go to the waypoint go with_ <waypoint> ( wpmoniker ) Referencing object with","title":"Verbs"},{"location":"metaphysic/obj/waypoint/#posits","text":"posit description API _parse() _parse( string ) _parse({lang}, string ) Parses proceeding object Parses the string and determines language Parses string following language lang parse _coords() _coords_( x_lat1 , y_long1 ) _coords_( x_lat1 , y_long1 , z_alt ) Provides coordinates from proceeding object Provides two-dimensional coordinates of x_lat1 , y_long1 *Provides three-dimensional coordinates of x_lat1 , y_long1 , z_alt coords _geojson( geojsonstring ) Direct parse of geoJSON geojsonstring geojson _shapefile( shapefilestring ) Direct parse of Shapefile shapefilestring shapefile _kml( kmlstring ) Direct parse of KML kmlstring kml _displacemto( tomoniker ) _displacemto([ variablename ]) _displacemto(\u276c unit \u276d, tomoniker ) Provides the displacement from preceeding object to tomoniker object Provides the displacement from preceeding object to object monikered to the value of variablename Provides the displacement from preceeding object to tomoniker object with specified unit displacem _around() Reference to a zone of preceeding object defined by proceeding object around _x() , _x( x ) _y() , _y( y ) _z() , _z( z ) Gets and sets the x, y, and z coordinates, repsectively xyz _lat() , _lat( lat ) _lng() , _lng( lng ) _alt() , _alt( alt ) Gets and sets the x, y, and z coordinates (repsectively) of the preceeding object xyz _elev() _elevation( elev ) Gets and sets the elevation of the preceeding object elev _waitat() _waitat( wpmoniker ) Wait at proceeding object Wait at waypoint wpmoniker waitat _loiterat() _loiterat( wpmoniker ) Loiter at proceeding object Loiter at waypoint wpmoniker loiterat","title":"Posits"},{"location":"metaphysic/obj/waypoint/#references","text":"pose ; goal","title":"References"},{"location":"metaphysic/obj/workspace/","text":"Workspace Puffs puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Workspace"},{"location":"metaphysic/obj/workspace/#workspace","text":"","title":"Workspace"},{"location":"metaphysic/obj/workspace/#puffs","text":"puffs notes<brexamples API channel An exclusive sub-section of a workspace , sometimes referred to as a conversation cloud A zone ( puff ) used for diego communication that utilises a cloud based platform like twitter, discord, slack, etc. fog A zone ( puff ) used for diego communication that relies on UDP mist A zone ( puff ) used for diego communication that relies on TCP workspace An exclusive section of a puff , sometimes called a room","title":" Puffs"},{"location":"metaphysic/obj/workspace/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/workspace/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/workspace/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/workspace/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/workspace/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/workspace/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/workspace/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/workspace/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/workspace/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/workspace/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/workspace/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/wtf/","text":"Where's The Fire [wtf] (object) Auditing & Error Handling auditing notes examples API valid valid err , error err refuse wtf Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Where's The Fire [wtf] (object)"},{"location":"metaphysic/obj/wtf/#wheres-the-fire-wtf-object","text":"","title":"Where's The Fire [wtf] (object)"},{"location":"metaphysic/obj/wtf/#auditing-error-handling","text":"auditing notes examples API valid valid err , error err refuse wtf","title":" Auditing &amp; Error Handling"},{"location":"metaphysic/obj/wtf/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/wtf/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/wtf/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/wtf/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/wtf/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/wtf/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/wtf/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/wtf/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/wtf/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/wtf/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/wtf/#examples","text":"","title":"Examples"},{"location":"metaphysic/obj/zone/","text":"Zone (object) | zone | The thing version of an arena | Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Zone (object)"},{"location":"metaphysic/obj/zone/#zone-object","text":"| zone | The thing version of an arena |","title":"Zone (object)"},{"location":"metaphysic/obj/zone/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/obj/zone/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/obj/zone/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/obj/zone/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/obj/zone/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/obj/zone/#typing","text":"","title":"Typing"},{"location":"metaphysic/obj/zone/#getting","text":"","title":"Getting"},{"location":"metaphysic/obj/zone/#setting","text":"","title":"Setting"},{"location":"metaphysic/obj/zone/#casting","text":"","title":"Casting"},{"location":"metaphysic/obj/zone/#properties","text":"","title":"Properties"},{"location":"metaphysic/obj/zone/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/distan/","text":"Distance (property) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Distance (property)"},{"location":"metaphysic/prop/distan/#distance-property","text":"","title":"Distance (property)"},{"location":"metaphysic/prop/distan/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/distan/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/distan/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/distan/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/distan/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/distan/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/distan/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/distan/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/distan/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/distan/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/distan/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/ergcon/","text":"Energy Consumption (property) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Energy Consumption (property)"},{"location":"metaphysic/prop/ergcon/#energy-consumption-property","text":"","title":"Energy Consumption (property)"},{"location":"metaphysic/prop/ergcon/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/ergcon/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/ergcon/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/ergcon/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/ergcon/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/ergcon/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/ergcon/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/ergcon/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/ergcon/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/ergcon/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/ergcon/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/ident/","text":"Identity (property) The ident property exposes the identity interface for most all objects, giving identity information in response to any requests such as _ask . Retrieval Retrieval of all ident properties require an empty parameter set of the _ident posit. The _id posit is syntactically identical to _ident and can be used freely and interchangeably. The use of the _value (or shortened _v ) posit is automatically implied and is not necessary. The default format of the output will be via a comma-separated list of key-value pairs, such as \" key1=value1,key2=value2,... \", alphabetical order. Formatting of the output can be achieved either by: using the _format posit; or, using the format as a type with curly brackets ( {} ). <object> _ident(); <object> _id(); <object> _id()_value(); <object> _id()_format( format ); <object> _id({ format }); The ident properties or subproperties can be pass to an abstract storage object using the _to <object> syntax. For instance for a variable ( var ) or an array ( ary ), the _tovar and _toary posit are use, respectively. <object> _id()_tovar( variable_name ); <object> _id()_toary( ary_name ); Granulation of the individual properties can be achieved with proceeding properties as posits. However, common subproperties of indent are automatically promoted, the use of _ident (and _id ) is not necessary. <object> _ident()_make(); <object> _id()_model(); <object> _model(); <object> _make()_model(); Declaration Declaration requires parameters (of various signatures). <object> _ident( manufacturer ); <object> _id( manufacturer ); <object> _id( manufacturer , model ); <object> _id( manufacturer , model , badge ); <object> _id( manufacturer , model , badge , serialnumber ); Common subproperties of indent are automatically promoted, so the _ident (and shortened _id ) posit, during declaration, can be ignored. <object> _manufacturer( manufacturer ); <object> _manufact()_value( manufacturer ); <object> _model( model ); <object> _model()_value( model ); <object> _badge( badge ); <object> _badge()_value( badge ); <object> _serialnumber( serialnumber ); <object> _sernum()_value( serialnumber ); Important Syntax can be switched from declaration to retrieval upon various verbs used, such as tell_ . This most often occurs with non-human communication. Commonality Uncommon posits require the _ident (or _id ) posits, in both retrieval and declaration. The moniker , and, nickname are all the moniker of the thingy passed through, as read-only. All uncommon posits for _ident (or _id ) are read-write-by-me. <object> _ident()_moniker(); <object> _id()_name(); <object> _id()_nickname(); <object> _id()_species(); <object> _id()_version(); <object> _id()_softwarerelease(); <object> _id()_name( name ); <object> _id()_species( species ); <object> _id()_version( version ); <object> _id()_softrel( _software_release ); <object> _id()_softrel([ variable_name ]); Example In this example, in the mist is robot rex , a Boston Dynamics spot robot. We (as a human call Diego, with moniker diego ) will ask rex to identify itself: ask_robot(rex)_ident(); rex responds as such: tell_human(diego)_moniker(rex)_ident(Boston Dynamics,spot,spot,d349-7273-32e2)_name(20190601)_nickname(rex)_species(spot)_version(2.0.1)_softrel(2.0.1); To see a human-friendly version: me_msg()_robot(rex)_ident({yaml}); The output: manufact: Boston Dynamics make: spot model: spot serialnumber: d349-7273-32e2 badge: spot name: 20190601 nickname: rex sofrel: 2.0.1 species: spot version: 2.0.1 Posits method description API _ident() Provides or sets identity information. ident Ident _type (id) The _type (id) postposition is used to assign identication to a thingy . It is only associated with the id() object. The syntax is: {verb}_{object}_id()_type({id_type}); {verb}_{object}_id()_type({id_type})_value({id_value)}); For the case of me the syntax: me_id()_type({id_type}); is included. The id_type s available are as follows: id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number, usually for cellphone type mobots imei _type(imei)_value({imei}); International Mobile Equipment Identity, usually for the cellphone type mobots","title":"Identity (property)"},{"location":"metaphysic/prop/ident/#identity-property","text":"The ident property exposes the identity interface for most all objects, giving identity information in response to any requests such as _ask .","title":"Identity (property)"},{"location":"metaphysic/prop/ident/#retrieval","text":"Retrieval of all ident properties require an empty parameter set of the _ident posit. The _id posit is syntactically identical to _ident and can be used freely and interchangeably. The use of the _value (or shortened _v ) posit is automatically implied and is not necessary. The default format of the output will be via a comma-separated list of key-value pairs, such as \" key1=value1,key2=value2,... \", alphabetical order. Formatting of the output can be achieved either by: using the _format posit; or, using the format as a type with curly brackets ( {} ). <object> _ident(); <object> _id(); <object> _id()_value(); <object> _id()_format( format ); <object> _id({ format }); The ident properties or subproperties can be pass to an abstract storage object using the _to <object> syntax. For instance for a variable ( var ) or an array ( ary ), the _tovar and _toary posit are use, respectively. <object> _id()_tovar( variable_name ); <object> _id()_toary( ary_name ); Granulation of the individual properties can be achieved with proceeding properties as posits. However, common subproperties of indent are automatically promoted, the use of _ident (and _id ) is not necessary. <object> _ident()_make(); <object> _id()_model(); <object> _model(); <object> _make()_model();","title":"Retrieval"},{"location":"metaphysic/prop/ident/#declaration","text":"Declaration requires parameters (of various signatures). <object> _ident( manufacturer ); <object> _id( manufacturer ); <object> _id( manufacturer , model ); <object> _id( manufacturer , model , badge ); <object> _id( manufacturer , model , badge , serialnumber ); Common subproperties of indent are automatically promoted, so the _ident (and shortened _id ) posit, during declaration, can be ignored. <object> _manufacturer( manufacturer ); <object> _manufact()_value( manufacturer ); <object> _model( model ); <object> _model()_value( model ); <object> _badge( badge ); <object> _badge()_value( badge ); <object> _serialnumber( serialnumber ); <object> _sernum()_value( serialnumber ); Important Syntax can be switched from declaration to retrieval upon various verbs used, such as tell_ . This most often occurs with non-human communication.","title":"Declaration"},{"location":"metaphysic/prop/ident/#commonality","text":"Uncommon posits require the _ident (or _id ) posits, in both retrieval and declaration. The moniker , and, nickname are all the moniker of the thingy passed through, as read-only. All uncommon posits for _ident (or _id ) are read-write-by-me. <object> _ident()_moniker(); <object> _id()_name(); <object> _id()_nickname(); <object> _id()_species(); <object> _id()_version(); <object> _id()_softwarerelease(); <object> _id()_name( name ); <object> _id()_species( species ); <object> _id()_version( version ); <object> _id()_softrel( _software_release ); <object> _id()_softrel([ variable_name ]);","title":"Commonality"},{"location":"metaphysic/prop/ident/#example","text":"In this example, in the mist is robot rex , a Boston Dynamics spot robot. We (as a human call Diego, with moniker diego ) will ask rex to identify itself: ask_robot(rex)_ident(); rex responds as such: tell_human(diego)_moniker(rex)_ident(Boston Dynamics,spot,spot,d349-7273-32e2)_name(20190601)_nickname(rex)_species(spot)_version(2.0.1)_softrel(2.0.1); To see a human-friendly version: me_msg()_robot(rex)_ident({yaml}); The output: manufact: Boston Dynamics make: spot model: spot serialnumber: d349-7273-32e2 badge: spot name: 20190601 nickname: rex sofrel: 2.0.1 species: spot version: 2.0.1","title":"Example"},{"location":"metaphysic/prop/ident/#posits","text":"method description API _ident() Provides or sets identity information. ident","title":"Posits"},{"location":"metaphysic/prop/ident/#ident","text":"","title":"Ident"},{"location":"metaphysic/prop/ident/#_type-id","text":"The _type (id) postposition is used to assign identication to a thingy . It is only associated with the id() object. The syntax is: {verb}_{object}_id()_type({id_type}); {verb}_{object}_id()_type({id_type})_value({id_value)}); For the case of me the syntax: me_id()_type({id_type}); is included. The id_type s available are as follows: id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number, usually for cellphone type mobots imei _type(imei)_value({imei}); International Mobile Equipment Identity, usually for the cellphone type mobots","title":"_type (id)"},{"location":"metaphysic/prop/impetus/","text":"Impetus (property) Impetus The types of drone are divided by their configuration of mechanisms for 'lift' and 'propulsion' and 'steer' ( pitch , roll , yaw ). lift propulsion steer {type} operator description API rotor tilt transverse rotor {} rotor tiltrotor transverse rotor {} rotor jet transverse rotor {} rotor-array rotor-array rotor-array {} a counterotor-array counterotor-array counterotor-array {} a rotor {} {} {} {} | rotor | rotor array | {} | | | | {bb} {blackberry} | :: | Cell phone running on Blackberry\u00ae operating system. | bb | | {ios} {iphone} {apple} | :: | Cell phone running on Apple\u00ae iOS\u2122. | ios | | {win} {ms} {microsoft} | :: | Cell phone running on Microsoft\u00ae Windows Mobile\u2122. | win | https://en.wikipedia.org/wiki/Tiltrotor https://en.wikipedia.org/wiki/Counter-rotating_propellers Objects Drones Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Impetus (property)"},{"location":"metaphysic/prop/impetus/#impetus-property","text":"","title":"Impetus (property)"},{"location":"metaphysic/prop/impetus/#impetus","text":"The types of drone are divided by their configuration of mechanisms for 'lift' and 'propulsion' and 'steer' ( pitch , roll , yaw ). lift propulsion steer {type} operator description API rotor tilt transverse rotor {} rotor tiltrotor transverse rotor {} rotor jet transverse rotor {} rotor-array rotor-array rotor-array {} a counterotor-array counterotor-array counterotor-array {} a rotor {} {} {} {} | rotor | rotor array | {} | | | | {bb} {blackberry} | :: | Cell phone running on Blackberry\u00ae operating system. | bb | | {ios} {iphone} {apple} | :: | Cell phone running on Apple\u00ae iOS\u2122. | ios | | {win} {ms} {microsoft} | :: | Cell phone running on Microsoft\u00ae Windows Mobile\u2122. | win | https://en.wikipedia.org/wiki/Tiltrotor https://en.wikipedia.org/wiki/Counter-rotating_propellers","title":"Impetus"},{"location":"metaphysic/prop/impetus/#objects","text":"","title":"Objects"},{"location":"metaphysic/prop/impetus/#drones","text":"","title":"Drones"},{"location":"metaphysic/prop/impetus/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/impetus/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/impetus/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/impetus/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/impetus/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/impetus/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/impetus/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/impetus/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/impetus/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/impetus/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/impetus/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/ios/","text":"Apple iOs (property) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Apple iOs (property)"},{"location":"metaphysic/prop/ios/#apple-ios-property","text":"","title":"Apple iOs (property)"},{"location":"metaphysic/prop/ios/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/ios/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/ios/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/ios/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/ios/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/ios/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/ios/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/ios/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/ios/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/ios/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/ios/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/kiwifruit/","text":"Kiwifruit (type) {kiwifruit} is a type of the organic object , representing a kiwifruit, a type of fruit with a thin hairy skin, green flesh, and black seeds. The syntax {chinese_gooseberry} can also be used. The {kiwifruit} type is a sub-type of {fruit} . In expressions the unicode 1F95D character ( \ud83e\udd5d ) is used. Declaration & Initialisation The declaration of a kiwifruit is as a type of organic . Monikerless declaration are permissable, the IDE will assign kiwifruit_ <uuid> , where <uuid> is the first four characters of its uuid declaration. It can be declared with other types, most usually {plant} and/or {vine} when growing, or {fruit} when prepared for eating . Hierarchial, although optional, {plant} usually comes before {vine} before {kiwifruit} ; and, {fruit} usually comes before {kiwifruit} . add_organic{kiwifruit}; add_organic({kiwifruit}); add_organic({kiwifruit}, moniker ); add_organic({plant},{kiwifruit}, moniker ); add_organic({vine},{kiwifruit}, moniker ); add_organic({plant},{vine},{kiwifruit}, moniker ); add_organic({fruit},{kiwifruit}, moniker ); Assignment An organic can be assigned a {kiwifruit} anytime after declaration. with_organic( organic_moniker ,{kiwifruit}); Referencing Referencing a kiwifruit organic object is achieved with the with verb (or shortened >_ notation), or the shortened ( moniker ) syntax. with_organic( kiwifruit_moniker ); >_organic( kiwifruit_moniker ); with_organic( kiwifruit_moniker1 , kiwifruit_moniker2 , ... ); ( kiwifruit_moniker ); Discernment, Discrimination, and, Swarming For discernment of {kiwifruit} s, use \ud83e\udd5d in expressions. ... \u27e6 ... \ud83e\udd5d ... \u27e7; Discrimination of {kiwifruit} s is possible using the _oftype function posit. ... _oftype{kiwifruit}; ... _oftype({kiwifruit}); Only collective swarming is available for {kiwifruit} . Expressions The unicode 1F95D character ( \ud83e\udd5d ) is used for kiwifruit in expressions. ... \u27e6 ... \ud83e\udd5d ... \u27e7; Examples","title":"Kiwifruit (type)"},{"location":"metaphysic/prop/kiwifruit/#kiwifruit-type","text":"{kiwifruit} is a type of the organic object , representing a kiwifruit, a type of fruit with a thin hairy skin, green flesh, and black seeds. The syntax {chinese_gooseberry} can also be used. The {kiwifruit} type is a sub-type of {fruit} . In expressions the unicode 1F95D character ( \ud83e\udd5d ) is used.","title":"Kiwifruit (type)"},{"location":"metaphysic/prop/kiwifruit/#declaration-initialisation","text":"The declaration of a kiwifruit is as a type of organic . Monikerless declaration are permissable, the IDE will assign kiwifruit_ <uuid> , where <uuid> is the first four characters of its uuid declaration. It can be declared with other types, most usually {plant} and/or {vine} when growing, or {fruit} when prepared for eating . Hierarchial, although optional, {plant} usually comes before {vine} before {kiwifruit} ; and, {fruit} usually comes before {kiwifruit} . add_organic{kiwifruit}; add_organic({kiwifruit}); add_organic({kiwifruit}, moniker ); add_organic({plant},{kiwifruit}, moniker ); add_organic({vine},{kiwifruit}, moniker ); add_organic({plant},{vine},{kiwifruit}, moniker ); add_organic({fruit},{kiwifruit}, moniker );","title":"Declaration &amp; Initialisation"},{"location":"metaphysic/prop/kiwifruit/#assignment","text":"An organic can be assigned a {kiwifruit} anytime after declaration. with_organic( organic_moniker ,{kiwifruit});","title":"Assignment"},{"location":"metaphysic/prop/kiwifruit/#referencing","text":"Referencing a kiwifruit organic object is achieved with the with verb (or shortened >_ notation), or the shortened ( moniker ) syntax. with_organic( kiwifruit_moniker ); >_organic( kiwifruit_moniker ); with_organic( kiwifruit_moniker1 , kiwifruit_moniker2 , ... ); ( kiwifruit_moniker );","title":"Referencing"},{"location":"metaphysic/prop/kiwifruit/#discernment-discrimination-and-swarming","text":"For discernment of {kiwifruit} s, use \ud83e\udd5d in expressions. ... \u27e6 ... \ud83e\udd5d ... \u27e7; Discrimination of {kiwifruit} s is possible using the _oftype function posit. ... _oftype{kiwifruit}; ... _oftype({kiwifruit}); Only collective swarming is available for {kiwifruit} .","title":"Discernment, Discrimination, and, Swarming"},{"location":"metaphysic/prop/kiwifruit/#expressions","text":"The unicode 1F95D character ( \ud83e\udd5d ) is used for kiwifruit in expressions. ... \u27e6 ... \ud83e\udd5d ... \u27e7;","title":"Expressions"},{"location":"metaphysic/prop/kiwifruit/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/make/","text":"Make (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Make (object)"},{"location":"metaphysic/prop/make/#make-object","text":"","title":"Make (object)"},{"location":"metaphysic/prop/make/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/make/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/make/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/make/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/make/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/make/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/make/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/make/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/make/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/make/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/make/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/model/","text":"Model (property) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Model (property)"},{"location":"metaphysic/prop/model/#model-property","text":"","title":"Model (property)"},{"location":"metaphysic/prop/model/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/model/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/model/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/model/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/model/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/model/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/model/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/model/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/model/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/model/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/model/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/month/","text":"Month (object) Declaration add_( moniker ); Declaration & Assignment Initialisation add_( moniker ); Assignment Referencing Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker ); Typing Getting Setting Casting Properties Examples","title":"Month (object)"},{"location":"metaphysic/prop/month/#month-object","text":"","title":"Month (object)"},{"location":"metaphysic/prop/month/#declaration","text":"add_( moniker );","title":"Declaration"},{"location":"metaphysic/prop/month/#declaration-assignment","text":"","title":"Declaration &amp; Assignment"},{"location":"metaphysic/prop/month/#initialisation","text":"add_( moniker );","title":"Initialisation"},{"location":"metaphysic/prop/month/#assignment","text":"","title":"Assignment"},{"location":"metaphysic/prop/month/#referencing","text":"Referencing a object is achieved with the with verb, or the shortened ( ) syntax. with_( moniker ); >_( moniker ); with_( moniker1 , moniker2 , ... ); ( _moniker );","title":"Referencing"},{"location":"metaphysic/prop/month/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/month/#getting","text":"","title":"Getting"},{"location":"metaphysic/prop/month/#setting","text":"","title":"Setting"},{"location":"metaphysic/prop/month/#casting","text":"","title":"Casting"},{"location":"metaphysic/prop/month/#properties","text":"","title":"Properties"},{"location":"metaphysic/prop/month/#examples","text":"","title":"Examples"},{"location":"metaphysic/prop/msg/","text":"Message (property)","title":"Message (property)"},{"location":"metaphysic/prop/msg/#message-property","text":"","title":"Message (property)"},{"location":"metaphysic/prop/opsys/","text":"Operating System (object) The opsys object represents the operating system of the preceding objects. An operating system is the software that manages computer hardware, software resources, and provides common services for computer programs. Some objects can have more than one (an array) of operating systems. Getting To get the operating system of the proceeding object, use the _opsys() posit. The return will be a comma separated list of operating system enumerator types . <object> _opsys(); For an object wil multiple operating systems, use the index or i posit to determine which operating system you are getting. <object> _opsys()_i( index_integer ); Setting When adding the operating system as a child of the preceding object , by using the posit _opsys , the operating system is effectively set. <object> _opsys( {operating_system} ); Some objects allow for multiple operating systems. To set more than one operating system, multiple opsys posit are required. Alternatively an array can be used to set operating systems in one opsys posit. <object> _opsys( {operating_system1} )_opsys( {operating_system2} )_ ... <object> _opsys([ operating_system_array_moniker ]); Casting Casting an operating system is identical syntax to setting an operating system, both one and more than operating systems. <object> _opsys( {operating_system_to_cast_to} ); <object> _opsys( {operating_system_to_cast_to} )_i( index_integer ); <object> _opsys([ operating_system_to_cast_to_array_moniker ]); Typing Posits Objects Computer The computer (also pc ) object allows for multiple operating systems, since a computer can be partitioned or use multiple hard drives to duel (multi) boot. The operating systems provided for the computer object are determined from user agent statistics from statcounter GlobalStats using 'Top 6 Desktop OSs from Jan - Dec 2021' ( eliminating 'unknown' and 'other' )`, as shown: Source: StatCounter Global Stats - OS Market Share {op_sys} description API {win} Microsoft\u00ae Windows\u2122. win {osx} {os_x} Apple\u00ae OS X\u2122. osx {linux} Linux. linux {chrome} {chrome_os} Google\u00ae Chrome OS\u2122. chrome Cell Phone The cellphone object only allows for one operating system. There are seven available operating system for cellphone object The operating systems provided for the cellphone object are determined from user agent statistics from statcounter GlobalStats using 'Top 8 Mobile OSs from Jan - Dec 2021' ( eliminating 'unknown' and 'other' )`, as shown: Source: StatCounter Global Stats - OS Market Share {op_sys} description API {android} {and} Google\u00ae Android\u2122. android {ios} {i_os} Apple\u00ae iOS\u2122. ios {tizen} {samsung} Samsung\u00ae Tizen\u2122. tizen {kaios} {kai_os} KaiOS\u2122. kaios {asha} {nokia} Nokia\u00ae Asha\u2122. asha {win} {win_mobile} Microsoft\u00ae Windows Mobile\u2122. win {linux} Linux. linux Tablet The tablet object allows for multiple operating systems. The operating systems provided for the tablet object are determined from user agent statistics from statcounter GlobalStats using 'Top 8 Tablet OSs from Jan - Dec 2021' ( eliminating 'other' )`, as shown: Source: StatCounter Global Stats - OS Market Share {op_sys} description API {ios} {i_os} Apple\u00ae iOS\u2122. ios {android} {and} Google\u00ae Android\u2122. android {win} Microsoft\u00ae Windows\u2122. win {linux} Linux. linux Robot The robot object only allows for one operating system. Although 'ROS2' is called an operating system, it is not considered an opsys property. However, the operating systems available for a robot object are taken from the options available from the lastest distribution of ROS2. There are three available operating systems for the robot object . {op_sys} description API {ubuntu} {ubuntu_linux} {linux} Ubuntu\u00ae Linux. linux {osx} {os_x} Apple\u00ae OS X\u2122. osx {win} Microsoft\u00ae Windows\u2122. win","title":"Operating System (object)"},{"location":"metaphysic/prop/opsys/#operating-system-object","text":"The opsys object represents the operating system of the preceding objects. An operating system is the software that manages computer hardware, software resources, and provides common services for computer programs. Some objects can have more than one (an array) of operating systems.","title":"Operating System (object)"},{"location":"metaphysic/prop/opsys/#getting","text":"To get the operating system of the proceeding object, use the _opsys() posit. The return will be a comma separated list of operating system enumerator types . <object> _opsys(); For an object wil multiple operating systems, use the index or i posit to determine which operating system you are getting. <object> _opsys()_i( index_integer );","title":"Getting"},{"location":"metaphysic/prop/opsys/#setting","text":"When adding the operating system as a child of the preceding object , by using the posit _opsys , the operating system is effectively set. <object> _opsys( {operating_system} ); Some objects allow for multiple operating systems. To set more than one operating system, multiple opsys posit are required. Alternatively an array can be used to set operating systems in one opsys posit. <object> _opsys( {operating_system1} )_opsys( {operating_system2} )_ ... <object> _opsys([ operating_system_array_moniker ]);","title":"Setting"},{"location":"metaphysic/prop/opsys/#casting","text":"Casting an operating system is identical syntax to setting an operating system, both one and more than operating systems. <object> _opsys( {operating_system_to_cast_to} ); <object> _opsys( {operating_system_to_cast_to} )_i( index_integer ); <object> _opsys([ operating_system_to_cast_to_array_moniker ]);","title":"Casting"},{"location":"metaphysic/prop/opsys/#typing","text":"","title":"Typing"},{"location":"metaphysic/prop/opsys/#posits","text":"","title":"Posits"},{"location":"metaphysic/prop/opsys/#objects","text":"","title":"Objects"},{"location":"metaphysic/prop/opsys/#computer","text":"The computer (also pc ) object allows for multiple operating systems, since a computer can be partitioned or use multiple hard drives to duel (multi) boot. The operating systems provided for the computer object are determined from user agent statistics from statcounter GlobalStats using 'Top 6 Desktop OSs from Jan - Dec 2021' ( eliminating 'unknown' and 'other' )`, as shown: Source: StatCounter Global Stats - OS Market Share {op_sys} description API {win} Microsoft\u00ae Windows\u2122. win {osx} {os_x} Apple\u00ae OS X\u2122. osx {linux} Linux. linux {chrome} {chrome_os} Google\u00ae Chrome OS\u2122. chrome","title":"Computer"},{"location":"metaphysic/prop/opsys/#cell-phone","text":"The cellphone object only allows for one operating system. There are seven available operating system for cellphone object The operating systems provided for the cellphone object are determined from user agent statistics from statcounter GlobalStats using 'Top 8 Mobile OSs from Jan - Dec 2021' ( eliminating 'unknown' and 'other' )`, as shown: Source: StatCounter Global Stats - OS Market Share {op_sys} description API {android} {and} Google\u00ae Android\u2122. android {ios} {i_os} Apple\u00ae iOS\u2122. ios {tizen} {samsung} Samsung\u00ae Tizen\u2122. tizen {kaios} {kai_os} KaiOS\u2122. kaios {asha} {nokia} Nokia\u00ae Asha\u2122. asha {win} {win_mobile} Microsoft\u00ae Windows Mobile\u2122. win {linux} Linux. linux","title":"Cell Phone"},{"location":"metaphysic/prop/opsys/#tablet","text":"The tablet object allows for multiple operating systems. The operating systems provided for the tablet object are determined from user agent statistics from statcounter GlobalStats using 'Top 8 Tablet OSs from Jan - Dec 2021' ( eliminating 'other' )`, as shown: Source: StatCounter Global Stats - OS Market Share {op_sys} description API {ios} {i_os} Apple\u00ae iOS\u2122. ios {android} {and} Google\u00ae Android\u2122. android {win} Microsoft\u00ae Windows\u2122. win {linux} Linux. linux","title":"Tablet"},{"location":"metaphysic/prop/opsys/#robot","text":"The robot object only allows for one operating system. Although 'ROS2' is called an operating system, it is not considered an opsys property. However, the operating systems available for a robot object are taken from the options available from the lastest distribution of ROS2. There are three available operating systems for the robot object . {op_sys} description API {ubuntu} {ubuntu_linux} {linux} Ubuntu\u00ae Linux. linux {osx} {os_x} Apple\u00ae OS X\u2122. osx {win} Microsoft\u00ae Windows\u2122. win","title":"Robot"},{"location":"metaphysic/prop/risk/","text":"Risk (enumerator) The {risk} enumerator provides six levels of risk, based on Wojtyto et al (2019) 1 . \u27eaenum\u27eb ENUM hex RGB byte_range (risk value) description \u27eaextreme\u27eb RISK_EXTREME #bf0000 #bf0000ff 512 - 1024 The highest risk, actions required to reduce risk. \u27eavhigh\u27eb \u27eav_high\u27eb \u27eavery_high\u27eb RISK_VERY_HIGH #ff0000 #ff0000ff 128 - 256 Very high risk, actions required to reduce risk. \u27eahigh\u27eb RISK_HIGH #ffc100 #ffc100 32 - 64 High risk, action to reduce the risk level and their coordination. \u27eamedium\u27eb RISK_MEDIUM #3566cd #3566cdff 8 - 16 Medium risk, mock drill of actions required. \u27ealow\u27eb RISK_LOW #ffff00 #ffff00 2 - 6 Low risk, acceptance and risk control. \u27eaneg\u27eb \u27eanegligible\u27eb RISK_NEGLIGIBLE #00b150 #00b150ff 1 Low risk, acceptance and risk control. Wojtyto, Dorota & Michalik, Joanna & Kobuszewska, Sandra. (2019). Risk Map for a Selected Organization. New Trends in Production Engineering. 2. 195-204. 10.2478/ntpe-2019-0084. \u21a9","title":"Risk (enumerator)"},{"location":"metaphysic/prop/risk/#risk-enumerator","text":"The {risk} enumerator provides six levels of risk, based on Wojtyto et al (2019) 1 . \u27eaenum\u27eb ENUM hex RGB byte_range (risk value) description \u27eaextreme\u27eb RISK_EXTREME #bf0000 #bf0000ff 512 - 1024 The highest risk, actions required to reduce risk. \u27eavhigh\u27eb \u27eav_high\u27eb \u27eavery_high\u27eb RISK_VERY_HIGH #ff0000 #ff0000ff 128 - 256 Very high risk, actions required to reduce risk. \u27eahigh\u27eb RISK_HIGH #ffc100 #ffc100 32 - 64 High risk, action to reduce the risk level and their coordination. \u27eamedium\u27eb RISK_MEDIUM #3566cd #3566cdff 8 - 16 Medium risk, mock drill of actions required. \u27ealow\u27eb RISK_LOW #ffff00 #ffff00 2 - 6 Low risk, acceptance and risk control. \u27eaneg\u27eb \u27eanegligible\u27eb RISK_NEGLIGIBLE #00b150 #00b150ff 1 Low risk, acceptance and risk control. Wojtyto, Dorota & Michalik, Joanna & Kobuszewska, Sandra. (2019). Risk Map for a Selected Organization. New Trends in Production Engineering. 2. 195-204. 10.2478/ntpe-2019-0084. \u21a9","title":"Risk (enumerator)"},{"location":"metaphysic/prop/serialnum/","text":"Serial Number (property)","title":"Serial Number (property)"},{"location":"metaphysic/prop/serialnum/#serial-number-property","text":"","title":"Serial Number (property)"},{"location":"metaphysic/prop/type/","text":"Type (property) The type property exposes the type or first category of the preceding object in physical and metaphysical contexts. In an abstract context, the type becomes the datatype of primitives. Retrieval Retrieval of the type property requires an empty parameter set of the _type posit. This will retrieve the type of the preceding object . The default format of the output will be via a type moniker surrounded in curly brackets ( {} ). The use of the _value (or shortened _v ) posit is automatically implied and is not necessary. For the type of a proceeding object , use type s ' sibling ' property, _typeof . <object> _type(); <object> _typeof( object_moniker ); <object> _type()_value(); The type properties can be passed to an abstract storage object using the _to <object> syntax. For instance for a variable ( var ) or an array ( ary ), the _tovar and _toary posit are use, respectively. <object> _type()_tovar( variable_name ); <object> _typeof( obj_moniker )_tovar( variable_name ); <object> _type()_toary( ary_name ); <object> _typeof( obj_moniker )_toary( ary_name ); Operator The of type and typeof properties also have the associated \u2296 operator for use in expressions. The \u2296 operator should be used in expressions. The \u2296 operator should not used for 'symmetric difference in set theory, which should only use delta ( \u0394 ). <expression_posit>( ...\u2296... * ); Declaration Declaration requires either, the use of: the _type posit; or, direct declaration (usually in the declaration of the object ) using curly brackets ( {} ). <object> _type( type ); add_ <object> ({ type }, obj_moniker ); Important Syntax can be switched from declaration to retrieval upon various verbs used, such as tell_ . This most often occurs with non-human communication. Objects The type property is a base fundamental property, so there are many associated preceding objects . object description API cellphone The operating system the cellphone is running on, is used as its type. cellphone thingy There are four types of thingy: human ; organic ; robot ; and, thing . thingy organic organic types are those objects derived from common objects used in machine-learning visacuity 1 . organic poll There are eight primitive type of poll , based on they way they function. poll `` `` `` `` `` `` Computer OS Market Share Source: StatCounter Global Stats {type} description API {win} Microsoft\u00ae Windows\u2122. win {osx} {os_x} Apple\u00ae OS X\u2122. osx {linux} Linux. linux {chrome} {chrome} {chrome_os} Google\u00ae Chrome OS\u2122. chrome A portmanteau of 'vision' and 'acuity', representing machine-learning of thingies to identify common object in context by graphic depiction. Formally known as 'computer vision'. \u21a9","title":"Type (property)"},{"location":"metaphysic/prop/type/#type-property","text":"The type property exposes the type or first category of the preceding object in physical and metaphysical contexts. In an abstract context, the type becomes the datatype of primitives.","title":"Type (property)"},{"location":"metaphysic/prop/type/#retrieval","text":"Retrieval of the type property requires an empty parameter set of the _type posit. This will retrieve the type of the preceding object . The default format of the output will be via a type moniker surrounded in curly brackets ( {} ). The use of the _value (or shortened _v ) posit is automatically implied and is not necessary. For the type of a proceeding object , use type s ' sibling ' property, _typeof . <object> _type(); <object> _typeof( object_moniker ); <object> _type()_value(); The type properties can be passed to an abstract storage object using the _to <object> syntax. For instance for a variable ( var ) or an array ( ary ), the _tovar and _toary posit are use, respectively. <object> _type()_tovar( variable_name ); <object> _typeof( obj_moniker )_tovar( variable_name ); <object> _type()_toary( ary_name ); <object> _typeof( obj_moniker )_toary( ary_name );","title":"Retrieval"},{"location":"metaphysic/prop/type/#operator","text":"The of type and typeof properties also have the associated \u2296 operator for use in expressions. The \u2296 operator should be used in expressions. The \u2296 operator should not used for 'symmetric difference in set theory, which should only use delta ( \u0394 ). <expression_posit>( ...\u2296... * );","title":"Operator"},{"location":"metaphysic/prop/type/#declaration","text":"Declaration requires either, the use of: the _type posit; or, direct declaration (usually in the declaration of the object ) using curly brackets ( {} ). <object> _type( type ); add_ <object> ({ type }, obj_moniker ); Important Syntax can be switched from declaration to retrieval upon various verbs used, such as tell_ . This most often occurs with non-human communication.","title":"Declaration"},{"location":"metaphysic/prop/type/#objects","text":"The type property is a base fundamental property, so there are many associated preceding objects . object description API cellphone The operating system the cellphone is running on, is used as its type. cellphone thingy There are four types of thingy: human ; organic ; robot ; and, thing . thingy organic organic types are those objects derived from common objects used in machine-learning visacuity 1 . organic poll There are eight primitive type of poll , based on they way they function. poll `` `` `` `` `` ``","title":"Objects"},{"location":"metaphysic/prop/type/#computer","text":"OS Market Share Source: StatCounter Global Stats {type} description API {win} Microsoft\u00ae Windows\u2122. win {osx} {os_x} Apple\u00ae OS X\u2122. osx {linux} Linux. linux {chrome} {chrome} {chrome_os} Google\u00ae Chrome OS\u2122. chrome A portmanteau of 'vision' and 'acuity', representing machine-learning of thingies to identify common object in context by graphic depiction. Formally known as 'computer vision'. \u21a9","title":"Computer"},{"location":"metaphysic/prop/urgency/","text":"Urgency (enumerator) The \u276curgency\u276d enumerator provides five levels of urgency for an action to take place to resolve the five levels of risk. \u27eakey\u27eb \u27e6enum\u27e7 [STATIC] hex RGB description \u27ea4\u27eb \u27e6emergent\u27e7 [URGENCY_EMERGENT] #ca0031 #ca0031ff The most urgent (critical) state, severe risk. \u27ea3\u27eb \u27e6exigent\u27e7 [URGENT_EXIGENT] #ff6400 #ff6400ff The high urgent state, high risk. \u27ea2\u27eb \u27e6urgent\u27e7 [URGENT_URGENT] #fce001 #fce001ff The elevated urgent state, elevated risk. \u27ea1\u27eb \u27e6infergent\u27e7 [URGENT_INFERGENT] #3566cd #3566cdff The low urgent state, low / guarded risk. \u27ea0\u27eb \u27e6nonurgent\u27e7 [URGENT_NON] #009a66 #009a66ff The non-urgent state, negligible risk. add_enum(\u27ea{int}\u27eb,\u27e6{str}\u27e7,urgency) ()_enum(\u27ea4\u27eb,\u27e6emergent\u27e7)_static(URGENCY_EMERGENT)_colour(red)_color({hex},#ca0031)_desc(The most urgent (critical) state, severe risk.); ()_enum(\u27ea3\u27eb,\u27e6exigent\u27e7)_static(URGENT_EXIGENT)_colour(orange)_color({hex},#ff6400)_desc(The high urgent state, high risk.); ()_enum(\u27ea2\u27eb,\u27e6urgent\u27e7)_static(URGENT_URGENT)_colour(yellow)_color({hex},#fce001)_desc(The elevated urgent state, elevated risk.); ()_enum(\u27ea1\u27eb,\u27e6infergent\u27e7)_static(URGENT_INFERGENT)_colour(blue)_color({hex},#3566cd)_desc(The low urgent state, low / guarded risk.); ()_enum(\u27ea0\u27eb,\u27e6nonurgent\u27e7)_static(URGENT_NON)_colour(green)_color({hex},#009a66)_desc(The non-urgent state, negligible risk.); ; add_enum(fruits,\u27e6apple,banana,cherry\u27e7);","title":"Urgency (enumerator)"},{"location":"metaphysic/prop/urgency/#urgency-enumerator","text":"The \u276curgency\u276d enumerator provides five levels of urgency for an action to take place to resolve the five levels of risk. \u27eakey\u27eb \u27e6enum\u27e7 [STATIC] hex RGB description \u27ea4\u27eb \u27e6emergent\u27e7 [URGENCY_EMERGENT] #ca0031 #ca0031ff The most urgent (critical) state, severe risk. \u27ea3\u27eb \u27e6exigent\u27e7 [URGENT_EXIGENT] #ff6400 #ff6400ff The high urgent state, high risk. \u27ea2\u27eb \u27e6urgent\u27e7 [URGENT_URGENT] #fce001 #fce001ff The elevated urgent state, elevated risk. \u27ea1\u27eb \u27e6infergent\u27e7 [URGENT_INFERGENT] #3566cd #3566cdff The low urgent state, low / guarded risk. \u27ea0\u27eb \u27e6nonurgent\u27e7 [URGENT_NON] #009a66 #009a66ff The non-urgent state, negligible risk. add_enum(\u27ea{int}\u27eb,\u27e6{str}\u27e7,urgency) ()_enum(\u27ea4\u27eb,\u27e6emergent\u27e7)_static(URGENCY_EMERGENT)_colour(red)_color({hex},#ca0031)_desc(The most urgent (critical) state, severe risk.); ()_enum(\u27ea3\u27eb,\u27e6exigent\u27e7)_static(URGENT_EXIGENT)_colour(orange)_color({hex},#ff6400)_desc(The high urgent state, high risk.); ()_enum(\u27ea2\u27eb,\u27e6urgent\u27e7)_static(URGENT_URGENT)_colour(yellow)_color({hex},#fce001)_desc(The elevated urgent state, elevated risk.); ()_enum(\u27ea1\u27eb,\u27e6infergent\u27e7)_static(URGENT_INFERGENT)_colour(blue)_color({hex},#3566cd)_desc(The low urgent state, low / guarded risk.); ()_enum(\u27ea0\u27eb,\u27e6nonurgent\u27e7)_static(URGENT_NON)_colour(green)_color({hex},#009a66)_desc(The non-urgent state, negligible risk.); ; add_enum(fruits,\u27e6apple,banana,cherry\u27e7);","title":"Urgency (enumerator)"},{"location":"metaphysic/prop/vegetable/","text":"Vegetable (type) {vegetable} is a type of the organic object , representing a part of a plant than is consumed by humans or other animals for food. The vegetable type also has a shortened syntax of veg . In expressions the unicode 1F472 character ( \ud83c\udf72 ) is used. Declaration & Initialisation The declaration of a vegetable is as a type of organic . It can be declared with other types, most usually plant . Hierarchial, although optional, {plant} usually comes before {vegetable} . add_organic({vegetable}, moniker ); add_organic({plant},{vegetable}, moniker ); Assignment An organic can be assigned a {vegetable} anytime after declaration. with_organic( organic_moniker ,{vegetable}); Referencing Referencing a vegetable organic object is achieved with the with verb (or shortened >_ notation), or the shortened ( moniker ) syntax. with_organic( vegetable_moniker ); >_organic( vegetable_moniker ); with_organic( vegetable_moniker1 , vegetable_moniker2 , ... ); ( vegetable_moniker ); Discernment, Discrimination, and, Swarming Expressions The unicode 1F372 character ( \ud83c\udf72 ) is used for vegetable in expressions. \u27e6 ... \ud83c\udf72 ... \u27e7 Examples","title":"Vegetable (type)"},{"location":"metaphysic/prop/vegetable/#vegetable-type","text":"{vegetable} is a type of the organic object , representing a part of a plant than is consumed by humans or other animals for food. The vegetable type also has a shortened syntax of veg . In expressions the unicode 1F472 character ( \ud83c\udf72 ) is used.","title":"Vegetable (type)"},{"location":"metaphysic/prop/vegetable/#declaration-initialisation","text":"The declaration of a vegetable is as a type of organic . It can be declared with other types, most usually plant . Hierarchial, although optional, {plant} usually comes before {vegetable} . add_organic({vegetable}, moniker ); add_organic({plant},{vegetable}, moniker );","title":"Declaration &amp; Initialisation"},{"location":"metaphysic/prop/vegetable/#assignment","text":"An organic can be assigned a {vegetable} anytime after declaration. with_organic( organic_moniker ,{vegetable});","title":"Assignment"},{"location":"metaphysic/prop/vegetable/#referencing","text":"Referencing a vegetable organic object is achieved with the with verb (or shortened >_ notation), or the shortened ( moniker ) syntax. with_organic( vegetable_moniker ); >_organic( vegetable_moniker ); with_organic( vegetable_moniker1 , vegetable_moniker2 , ... ); ( vegetable_moniker );","title":"Referencing"},{"location":"metaphysic/prop/vegetable/#discernment-discrimination-and-swarming","text":"","title":"Discernment, Discrimination, and, Swarming"},{"location":"metaphysic/prop/vegetable/#expressions","text":"The unicode 1F372 character ( \ud83c\udf72 ) is used for vegetable in expressions. \u27e6 ... \ud83c\udf72 ... \u27e7","title":"Expressions"},{"location":"metaphysic/prop/vegetable/#examples","text":"","title":"Examples"},{"location":"metaphysic/setter/authority/","text":"Authority (setter) label_authority Labels list of monikers (or all) with authorization ranks. Authorization ranks are used in make decisions upon authority consensus. label_authority( rank ) label_authority( rank_moniker ) Sets all robots (robots, swarms, labels of) under the scope of instruct then ``go_diego``` with authorization rank ' rank '. A ' rank_moniker ' (shown in table below) can be used in place (or interchangably) with ' rank '. Warning: Using the label_authority command with no privilege sub commands will set all robots/swarms to the rank which could result in delays/warnings/errors in achieving consensus. Ranks and rank monikers available are shown below: | rank | Ensignia | Rank Moniker | Example Human Equivalent 1 Army / Navy / Air Force / Police (Feds) | |--|:--:|--|--| | o11 | | robomiral | Field Marshal / Admiral of the Fleet / Marshal of the air force / Commissioner | | o10 | | robommisssioner | General / Admiral / Air Chief Marshal / Deputy Commissioner / Director | | o9 | | roborshal | Lieutenant General / Vice Admiral / Air Marshal / Assistant Commissioner | | o8 | | roboneral | Major General / Rear Admiral / Air Vice-Marshal / Commander / Chief od Staff | | o7 | | robomodore | Brigadier / Commodore / Air Commodore / Superintendent | | o6 | | robolonel | Colonel / Captain / Group Captain / Deputy Director | | o7 | | robommander | Lieutenant Colonel / Commander / Wing Commander | | o6 | | robojor| Major / Lieutenant Commander / Squadron Leader | | o5 | | roboptain | Captain / Lieutenant / Flight Lieutenant | | o4 | | robotenant | Lieutenant / Sub Lieutenant / Flying Officer / Inspector | | o3 | | roboilot | 2nd Lieutenant / Midshipman / Pilot / Sergeant | | o2 | | roborector | Officer / Officer / Flight Cadet / Leading Senior Constable | | o1 | | robofficer | Officer / Officer / Flight Cadet / Leading Senior Constable | | e4 | | robonstable | Sergeant Major / Chief Petty Officer / Warrant Officer / Senior Constable | | e3 | | robergeant | Sergeant / Petty Officer / Sergeant / Constable First Class | | e2 | | roborporal | Bombardier / Leading Seaman / Corporal / Constable / Special Agent | | e1 | | roboagent | Private / Seaman / Airman / Recruit / Trainee | label_authority( rank )_to( moniker1 , n... ) label_authority( rank_moniker )_to( moniker1 , n... ) Sets monikers (robots, swarms, labels of) in the whitelist under the scope of instruct then ``go_diego``` with authorization rank ' rank '. label_authority(++) label_authority( rank )_to( moniker1 , n... ) label_authority(++)_to( moniker1 , n... ) authority_promote( moniker1 , n... ) set_authority( rank )_to( moniker1 , n... ) set_authority( rank )_not( moniker1 , n... ) Australian military and a mix of state and federal Australian and US FBI police force ranks were used for equivalence. \u21a9","title":"Authority (setter)"},{"location":"metaphysic/setter/authority/#authority-setter","text":"","title":"Authority (setter)"},{"location":"metaphysic/setter/authority/#label_authority","text":"Labels list of monikers (or all) with authorization ranks. Authorization ranks are used in make decisions upon authority consensus.","title":"label_authority"},{"location":"metaphysic/setter/authority/#label_authorityrank-label_authorityrank_moniker","text":"Sets all robots (robots, swarms, labels of) under the scope of instruct then ``go_diego``` with authorization rank ' rank '. A ' rank_moniker ' (shown in table below) can be used in place (or interchangably) with ' rank '. Warning: Using the label_authority command with no privilege sub commands will set all robots/swarms to the rank which could result in delays/warnings/errors in achieving consensus. Ranks and rank monikers available are shown below: | rank | Ensignia | Rank Moniker | Example Human Equivalent 1 Army / Navy / Air Force / Police (Feds) | |--|:--:|--|--| | o11 | | robomiral | Field Marshal / Admiral of the Fleet / Marshal of the air force / Commissioner | | o10 | | robommisssioner | General / Admiral / Air Chief Marshal / Deputy Commissioner / Director | | o9 | | roborshal | Lieutenant General / Vice Admiral / Air Marshal / Assistant Commissioner | | o8 | | roboneral | Major General / Rear Admiral / Air Vice-Marshal / Commander / Chief od Staff | | o7 | | robomodore | Brigadier / Commodore / Air Commodore / Superintendent | | o6 | | robolonel | Colonel / Captain / Group Captain / Deputy Director | | o7 | | robommander | Lieutenant Colonel / Commander / Wing Commander | | o6 | | robojor| Major / Lieutenant Commander / Squadron Leader | | o5 | | roboptain | Captain / Lieutenant / Flight Lieutenant | | o4 | | robotenant | Lieutenant / Sub Lieutenant / Flying Officer / Inspector | | o3 | | roboilot | 2nd Lieutenant / Midshipman / Pilot / Sergeant | | o2 | | roborector | Officer / Officer / Flight Cadet / Leading Senior Constable | | o1 | | robofficer | Officer / Officer / Flight Cadet / Leading Senior Constable | | e4 | | robonstable | Sergeant Major / Chief Petty Officer / Warrant Officer / Senior Constable | | e3 | | robergeant | Sergeant / Petty Officer / Sergeant / Constable First Class | | e2 | | roborporal | Bombardier / Leading Seaman / Corporal / Constable / Special Agent | | e1 | | roboagent | Private / Seaman / Airman / Recruit / Trainee |","title":"label_authority(rank) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; label_authority(rank_moniker)"},{"location":"metaphysic/setter/authority/#label_authorityrank_tomoniker1-n-label_authorityrank_moniker_tomoniker1-n","text":"Sets monikers (robots, swarms, labels of) in the whitelist under the scope of instruct then ``go_diego``` with authorization rank ' rank '.","title":"label_authority(rank)_to(moniker1, n...) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; label_authority(rank_moniker)_to(moniker1, n...)"},{"location":"metaphysic/setter/authority/#label_authority_1","text":"","title":"label_authority(++)"},{"location":"metaphysic/setter/authority/#label_authorityrank_tomoniker1-n","text":"","title":"label_authority(rank)_to(moniker1, n...)"},{"location":"metaphysic/setter/authority/#label_authority_tomoniker1-n-authority_promotemoniker1-n","text":"","title":"label_authority(++)_to(moniker1, n...) &nbsp; &nbsp;authority_promote(moniker1, n...)"},{"location":"metaphysic/setter/authority/#set_authorityrank_tomoniker1-n","text":"","title":"set_authority(rank)_to(moniker1, n...)"},{"location":"metaphysic/setter/authority/#set_authorityrank_notmoniker1-n","text":"Australian military and a mix of state and federal Australian and US FBI police force ranks were used for equivalence. \u21a9","title":"set_authority(rank)_not(moniker1, n...)"},{"location":"metaphysic/setter/consens/","text":"Consensus (setter)","title":"Consensus (setter)"},{"location":"metaphysic/setter/consens/#consensus-setter","text":"","title":"Consensus (setter)"},{"location":"metaphysic/setter/decisiven/","text":"Decisiveness (setter) set_decisiveness Sets the decisiveness in milliseconds to be making decisions, particularly of polls. The scope of the set_decisiveness settings is determined by the set_decisiveness command location in the diego code. If the set_decisiveness command is placed after the go_diego command but before any instruct the decisiveness setting will be applied to the whole diego, unless overridden by the next set_decisiveness command in the diego code flow. If the set_decisiveness command is placed after a begin_instruct command, the scope of decisiveness will be applied to the instruct , unless overridden by the next set_decisiveness command (in the same instruct or a nested instruct ) in the diego code flow. The lowest level of override occurs with the _with_decisiveness sub command, available on most decision commands. The set_decisiveness command has privilege definition ability using both and each of the _for and _not sub commands. If the set_decisiveness command is never used, the consensus is defaulted to unanimous . The set_decisiveness command does not set consensus on elections, only on polls and robot decisions. set_decisiveness( time_period ) Sets the decisiveness is a time_period ( in milliseconds ) given to robot(s) when making decisions. When a robot polls other robots the decisiveness timer will start. While collecting results the decisiveness timer will trigger when the time_period ( in milliseconds ) has expired. For decisions with decisive consensus the majority result will be chosen upon the decisiveness timer triggered. set_decisiveness( time_period )_for( moniker1 , n... ) Decisiveness of time_period will apply only to the whitelist of ( moniker1 , n... ) of monikers (robots, swarms, labels of). set_decisiveness( time_period )_not(( moniker1 , n... ) Decisiveness of time_period will not apply to the blacklist of ( moniker1 , n... ) of monikers (robots, swarms, labels of). The defaulted or last known consensus will apply to those blacklist monikers. set_decisiveness( time_period )_for( moniker1 , n... )_not( moniker1 , n... ) An apply-list with a no-apply-list of monikers (robots, swarms, labels of) for decisiveness of time_period .","title":"Decisiveness (setter)"},{"location":"metaphysic/setter/decisiven/#decisiveness-setter","text":"","title":"Decisiveness (setter)"},{"location":"metaphysic/setter/decisiven/#set_decisiveness","text":"Sets the decisiveness in milliseconds to be making decisions, particularly of polls. The scope of the set_decisiveness settings is determined by the set_decisiveness command location in the diego code. If the set_decisiveness command is placed after the go_diego command but before any instruct the decisiveness setting will be applied to the whole diego, unless overridden by the next set_decisiveness command in the diego code flow. If the set_decisiveness command is placed after a begin_instruct command, the scope of decisiveness will be applied to the instruct , unless overridden by the next set_decisiveness command (in the same instruct or a nested instruct ) in the diego code flow. The lowest level of override occurs with the _with_decisiveness sub command, available on most decision commands. The set_decisiveness command has privilege definition ability using both and each of the _for and _not sub commands. If the set_decisiveness command is never used, the consensus is defaulted to unanimous . The set_decisiveness command does not set consensus on elections, only on polls and robot decisions.","title":"set_decisiveness"},{"location":"metaphysic/setter/decisiven/#set_decisivenesstime_period","text":"Sets the decisiveness is a time_period ( in milliseconds ) given to robot(s) when making decisions. When a robot polls other robots the decisiveness timer will start. While collecting results the decisiveness timer will trigger when the time_period ( in milliseconds ) has expired. For decisions with decisive consensus the majority result will be chosen upon the decisiveness timer triggered.","title":"set_decisiveness(time_period)"},{"location":"metaphysic/setter/decisiven/#set_decisivenesstime_period_formoniker1-n","text":"Decisiveness of time_period will apply only to the whitelist of ( moniker1 , n... ) of monikers (robots, swarms, labels of).","title":"set_decisiveness(time_period)_for(moniker1, n...)"},{"location":"metaphysic/setter/decisiven/#set_decisivenesstime_period_notmoniker1-n","text":"Decisiveness of time_period will not apply to the blacklist of ( moniker1 , n... ) of monikers (robots, swarms, labels of). The defaulted or last known consensus will apply to those blacklist monikers.","title":"set_decisiveness(time_period)_not((moniker1, n...)"},{"location":"metaphysic/setter/decisiven/#set_decisivenesstime_period_formoniker1-n_notmoniker1-n","text":"An apply-list with a no-apply-list of monikers (robots, swarms, labels of) for decisiveness of time_period .","title":"set_decisiveness(time_period)_for(moniker1, n...)_not(moniker1, n...)"},{"location":"metaphysic/setter/euler/","text":"Euler (setter)","title":"Euler (setter)"},{"location":"metaphysic/setter/euler/#euler-setter","text":"","title":"Euler (setter)"},{"location":"metaphysic/setter/mapprovider/","text":"Map Provider (setter)","title":"Map Provider (setter)"},{"location":"metaphysic/setter/mapprovider/#map-provider-setter","text":"","title":"Map Provider (setter)"},{"location":"metaphysic/setter/quatern/","text":"Quaternion (setter)","title":"Quaternion (setter)"},{"location":"metaphysic/setter/quatern/#quaternion-setter","text":"","title":"Quaternion (setter)"},{"location":"metaphysic/setter/ranking/","text":"Ranking (setter) set_ranking Sets the ranking calculation to use when analysing results of polls and statistics for decisions. set_ranking( rank_type ) rank_type Description std_comp Uses standard competition ranking , also known as \"1224\" ranking. mod_comp Uses modified competition ranking , also known as \"1334\" ranking. dense Uses dense ranking , also known as \"1223\" ranking. ordinal Uses ordinal ranking , also known as \"1234\" ranking. fract Uses fractional ranking , also known as \"1 2.5 2.5 4\" ranking. ^See^ ^https://en.wikipedia.org/wiki/Ranking^ ^for^ ^more^ ^information.^ #### set_ranking( rank_type )_to( moniker1 , n... )","title":"Ranking (setter)"},{"location":"metaphysic/setter/ranking/#ranking-setter","text":"","title":"Ranking (setter)"},{"location":"metaphysic/setter/ranking/#set_ranking","text":"Sets the ranking calculation to use when analysing results of polls and statistics for decisions.","title":"set_ranking"},{"location":"metaphysic/setter/ranking/#set_rankingrank_type","text":"rank_type Description std_comp Uses standard competition ranking , also known as \"1224\" ranking. mod_comp Uses modified competition ranking , also known as \"1334\" ranking. dense Uses dense ranking , also known as \"1223\" ranking. ordinal Uses ordinal ranking , also known as \"1234\" ranking. fract Uses fractional ranking , also known as \"1 2.5 2.5 4\" ranking. ^See^ ^https://en.wikipedia.org/wiki/Ranking^ ^for^ ^more^ ^information.^ #### set_ranking( rank_type )_to( moniker1 , n... )","title":"set_ranking(rank_type)"},{"location":"metaphysic/special/them/","text":"Them (special)","title":"Them (special)"},{"location":"metaphysic/special/them/#them-special","text":"","title":"Them (special)"},{"location":"metaphysic/special/us/","text":"Us (special)","title":"Us (special)"},{"location":"metaphysic/special/us/#us-special","text":"","title":"Us (special)"},{"location":"metaphysic/special/we/","text":"We (special)","title":"We (special)"},{"location":"metaphysic/special/we/#we-special","text":"","title":"We (special)"},{"location":"metaphysic/special/you/","text":"You (special)","title":"You (special)"},{"location":"metaphysic/special/you/#you-special","text":"","title":"You (special)"},{"location":"metaphysic/verb/alert/","text":"Alert (object)","title":"Alert (object)"},{"location":"metaphysic/verb/alert/#alert-object","text":"","title":"Alert (object)"},{"location":"metaphysic/verb/ask/","text":"Inquirers ask_human( ask ) ask_human( ask )","title":"Inquirers"},{"location":"metaphysic/verb/ask/#inquirers","text":"","title":"Inquirers"},{"location":"metaphysic/verb/ask/#ask_humanask","text":"","title":"ask_human(ask)"},{"location":"metaphysic/verb/ask/#ask_humanask_1","text":"","title":"ask_human(ask)"},{"location":"metaphysic/verb/begin/","text":"Begin (object)","title":"Begin (object)"},{"location":"metaphysic/verb/begin/#begin-object","text":"","title":"Begin (object)"},{"location":"metaphysic/verb/calc/","text":"Calculate (verb)","title":"Calculate (verb)"},{"location":"metaphysic/verb/calc/#calculate-verb","text":"","title":"Calculate (verb)"},{"location":"metaphysic/verb/call/","text":"Call call_payload( payload_moniker ) call_sensor( sensor_moniker ) [roll]call The call is a register request for existence, made by the caller and returned to the caller with here (if a new connection) or pong (if there is a relationship). Basic Call The basic [roll]call is an indiscriminate and implicit request for existence of others in its known universe, Syntax: call(); Example: In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe and have never met each other before. Both parties are shy and appear to be primitive... sequenceDiagram autonumber participant df88accd participant 344d4c22 df88accd->>344d4c22: df88accd | call()#59; | 00000000 | 6fd7 || \u21937031 | + 344d4c22->>344d4c22: 344d4c22 | rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | rem_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( null ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 rem_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same remembering process ( _neigh ) triggered by the here command rather than call . Implicit Call The implicit [roll]call is a request for existence of other thingy types in its known universe, Syntax: call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console(); Explicit Call Syntax: call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Collection Call Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); --4b2b-b8da-59c35467963b 57e7-3869-43be-a16f-97cad6b4e14c d244714e-7711-48f4-b79c-eb152265e687 d6963830-3e64-405d-ac63-9ddbeb641c8b 68937890--4693-9b4a-63dc25646e30 4191a526-52f4-481e-a059-2d5aa59eb95b 93f0278a-7548-4c3e-af2f-71da2a69aa4e 094f129e-f2e4-4134-b6bd-909b840431a8 35dccb9d 9543ebae call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid} call_ , rollcall_ The call_ verb is a register request for existence, made by the caller and returned to the caller with here_ (if a new connection) or pong_ (if there is a relationship). Basic Call The basic [roll]call is an indiscriminate and implicit request for existence of all in its known universe: call(); \"Who is here?\" ...responses may be for example: here_robot(thah); \"robot thah here, we haven't met before \" ping_vehicle(trevor_tesla_m3); \"vehicle trevor_telsa_m3 here, we have met before\" Thingies (Genera) The common use of call_ is to find all thingies of a certain genera, for example: call_human(); will find all humans in memory / its world. \"where are all the humans?\" ...responses may be, for example: found_human(James)_me(); \"I am James, a human. \" ... found_human(Sally); \"I'm here, I'm Sally, I'm human.\" ... and so on... ... with variations for all the thingy genera : find_{thingy}(); , including... find_genera(); \"is anyone here?\" _me Puff The call_ verb can be used to roll call the puff(s) the caller is in, and roll call the puffs everyelse available is in, for example: call_puff()_me(); \"Where am I?\" ...example response: here_puff()_mist(mist_f4ee)_me(); \"I am in the mist called 'mist_f4ee'\" call_puff()_robot(); or call_robot()_puff(); \"Where are all the robots? \" ... here_puff()_mist(mist_f4ee)_mist(mist_a345)_fog(fog_1234)_robot(thah); *\" Example: In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe and have never met each other before. Both parties are shy and appear to be primitive... sequenceDiagram autonumber participant df88accd participant 344d4c22 df88accd->>344d4c22: df88accd | call()#59; | 00000000 | 6fd7 || \u21937031 | + 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call . Implicit Call The implicit [roll]call is a request for existence of other types in its known universe, Syntax: call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console(); Explicit Call Syntax: call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Collection Call Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); --4b2b-b8da-59c35467963b 57e7-3869-43be-a16f-97cad6b4e14c d244714e-7711-48f4-b79c-eb152265e687 d6963830-3e64-405d-ac63-9ddbeb641c8b 68937890--4693-9b4a-63dc25646e30 4191a526-52f4-481e-a059-2d5aa59eb95b 93f0278a-7548-4c3e-af2f-71da2a69aa4e 094f129e-f2e4-4134-b6bd-909b840431a8 35dccb9d 9543ebae call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid} Implicit Call The implicit [roll]call is a request for existence of other types in its known universe, Syntax: call_human(); call_ai(); call_robot(); call_thing(); call_console(); Explicit Call Syntax: call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Collection Call Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Call"},{"location":"metaphysic/verb/call/#call","text":"","title":"Call"},{"location":"metaphysic/verb/call/#call_payloadpayload_moniker","text":"","title":"call_payload(payload_moniker)"},{"location":"metaphysic/verb/call/#call_sensorsensor_moniker","text":"","title":"call_sensor(sensor_moniker)"},{"location":"metaphysic/verb/call/#rollcall","text":"The call is a register request for existence, made by the caller and returned to the caller with here (if a new connection) or pong (if there is a relationship).","title":"[roll]call"},{"location":"metaphysic/verb/call/#basic-call","text":"The basic [roll]call is an indiscriminate and implicit request for existence of others in its known universe,","title":"Basic Call"},{"location":"metaphysic/verb/call/#syntax","text":"call();","title":"Syntax:"},{"location":"metaphysic/verb/call/#example","text":"In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe and have never met each other before. Both parties are shy and appear to be primitive... sequenceDiagram autonumber participant df88accd participant 344d4c22 df88accd->>344d4c22: df88accd | call()#59; | 00000000 | 6fd7 || \u21937031 | + 344d4c22->>344d4c22: 344d4c22 | rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | rem_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( null ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 rem_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same remembering process ( _neigh ) triggered by the here command rather than call .","title":"Example:"},{"location":"metaphysic/verb/call/#implicit-call","text":"The implicit [roll]call is a request for existence of other thingy types in its known universe,","title":"Implicit Call"},{"location":"metaphysic/verb/call/#syntax_1","text":"call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console();","title":"Syntax:"},{"location":"metaphysic/verb/call/#explicit-call","text":"","title":"Explicit Call"},{"location":"metaphysic/verb/call/#syntax_2","text":"call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Syntax:"},{"location":"metaphysic/verb/call/#collection-call","text":"","title":"Collection Call"},{"location":"metaphysic/verb/call/#syntax_3","text":"call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); --4b2b-b8da-59c35467963b 57e7-3869-43be-a16f-97cad6b4e14c d244714e-7711-48f4-b79c-eb152265e687 d6963830-3e64-405d-ac63-9ddbeb641c8b 68937890--4693-9b4a-63dc25646e30 4191a526-52f4-481e-a059-2d5aa59eb95b 93f0278a-7548-4c3e-af2f-71da2a69aa4e 094f129e-f2e4-4134-b6bd-909b840431a8 35dccb9d 9543ebae call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Syntax:"},{"location":"metaphysic/verb/call/#call_-rollcall_","text":"The call_ verb is a register request for existence, made by the caller and returned to the caller with here_ (if a new connection) or pong_ (if there is a relationship).","title":"call_, rollcall_"},{"location":"metaphysic/verb/call/#basic-call_1","text":"The basic [roll]call is an indiscriminate and implicit request for existence of all in its known universe: call(); \"Who is here?\" ...responses may be for example: here_robot(thah); \"robot thah here, we haven't met before \" ping_vehicle(trevor_tesla_m3); \"vehicle trevor_telsa_m3 here, we have met before\"","title":"Basic Call"},{"location":"metaphysic/verb/call/#thingies-genera","text":"The common use of call_ is to find all thingies of a certain genera, for example: call_human(); will find all humans in memory / its world. \"where are all the humans?\" ...responses may be, for example: found_human(James)_me(); \"I am James, a human. \" ... found_human(Sally); \"I'm here, I'm Sally, I'm human.\" ... and so on... ... with variations for all the thingy genera : find_{thingy}(); , including... find_genera(); \"is anyone here?\"","title":"Thingies (Genera)"},{"location":"metaphysic/verb/call/#_me","text":"","title":"_me"},{"location":"metaphysic/verb/call/#puff","text":"The call_ verb can be used to roll call the puff(s) the caller is in, and roll call the puffs everyelse available is in, for example: call_puff()_me(); \"Where am I?\" ...example response: here_puff()_mist(mist_f4ee)_me(); \"I am in the mist called 'mist_f4ee'\" call_puff()_robot(); or call_robot()_puff(); \"Where are all the robots? \" ... here_puff()_mist(mist_f4ee)_mist(mist_a345)_fog(fog_1234)_robot(thah); *\"","title":"Puff"},{"location":"metaphysic/verb/call/#example_1","text":"In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe and have never met each other before. Both parties are shy and appear to be primitive... sequenceDiagram autonumber participant df88accd participant 344d4c22 df88accd->>344d4c22: df88accd | call()#59; | 00000000 | 6fd7 || \u21937031 | + 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call .","title":"Example:"},{"location":"metaphysic/verb/call/#implicit-call_1","text":"The implicit [roll]call is a request for existence of other types in its known universe,","title":"Implicit Call"},{"location":"metaphysic/verb/call/#syntax_4","text":"call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console();","title":"Syntax:"},{"location":"metaphysic/verb/call/#explicit-call_1","text":"","title":"Explicit Call"},{"location":"metaphysic/verb/call/#syntax_5","text":"call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Syntax:"},{"location":"metaphysic/verb/call/#collection-call_1","text":"Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); --4b2b-b8da-59c35467963b 57e7-3869-43be-a16f-97cad6b4e14c d244714e-7711-48f4-b79c-eb152265e687 d6963830-3e64-405d-ac63-9ddbeb641c8b 68937890--4693-9b4a-63dc25646e30 4191a526-52f4-481e-a059-2d5aa59eb95b 93f0278a-7548-4c3e-af2f-71da2a69aa4e 094f129e-f2e4-4134-b6bd-909b840431a8 35dccb9d 9543ebae call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Collection Call"},{"location":"metaphysic/verb/call/#implicit-call_2","text":"The implicit [roll]call is a request for existence of other types in its known universe,","title":"Implicit Call"},{"location":"metaphysic/verb/call/#syntax_6","text":"call_human(); call_ai(); call_robot(); call_thing(); call_console();","title":"Syntax:"},{"location":"metaphysic/verb/call/#explicit-call_2","text":"","title":"Explicit Call"},{"location":"metaphysic/verb/call/#syntax_7","text":"call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Syntax:"},{"location":"metaphysic/verb/call/#collection-call_2","text":"Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Collection Call"},{"location":"metaphysic/verb/envelop/","text":"envelop The envelop verb is a // // Perspective human(Jack)... // Define scope use namespace(behaviour_learning.training_exercise.envelop); use_map(valley_range); // Define participants add_poi(target)_at(3.44773632, -12.84847632, 0.124); group_drone(sunya, eka, dvi)_group(assets); // Sanskrit numerals tri, catur, pancan... assign_rank(O4)_to(sunya); assign_rank(E4)_to(eka, dvi); // Goto POI and gather intel with_group(assets)_goto(target)_form(arrowhead)?; ? envelop_poi(target)?; ? document_poi(target); human(Jack)... [ 3748aa71-1b16-4dc5-8666-9625bbbd70ac ] drone(sunya) [ 62b9ec58-b556-498f-ba9b-b735a194c9c0 ] drone(eka) [ 7c93697a-1012-44a5-a0ba-0b5e7daa316a ] drone(dvi) [ d7555164-34f4-4176-a061-8ea25cc50b12 ] drone(tri) [ 2ed412f9-25d4-4eb8-8f79-be948aae5a71 ] drone(catur) [ db0f5779-5af1-460a-8f17-a6fe9e250b3d ] drone(pancan) [ 74282bac-e899-43b7-b241-4b789a6bb514 ] robot(sas) [ 953a3c95-1821-4499-a33f-4c6fae2dda69 ] begin_objective() end_objective() begin_develop()_forverb(envelop) // Count and label object(s) as assets if()_object()_single()?||:; ? declare_label(asset)_forobject()_label(asset); | label_object()_label(asset_0); | set_var(object_count)_value(1); : declare_label(asset_group)_forobject()_label(assets)?; ? foreach_object()+?; + label_object()_labelmask(asset_#)_startast(1)_inc(++); ? set_var(object_count)_value()_length(); // Count and label forofs as enactors if()_forof()_notexists()?; ? end_develop() begin_behaviour(envelop); end_behaviour(envelop) ``` envelop_ object ( moniker|uuid ) ooi Ob Of Interest soi Sub Of Interest envelop_soi(asset)_forof(enactors)?; ? document(asset); set_default()_ofverb(envelop)_nonexistposit(form)_giveposit(form)_giveparam(type)_value(circle); with_enactor()_form(circle)_around(asset) `_ _forverb() _nonexistverb() _ofverb() _ofobject() _ofparentobject() _ofchildobject() _ofwho() _ofobjectwho() _ofparentobjectwho() _ofchildobjectwho() _ofposit() _ofpositwho() _ofparam() _ofordinal() envelop(asset)","title":"envelop"},{"location":"metaphysic/verb/envelop/#envelop","text":"The envelop verb is a // // Perspective human(Jack)... // Define scope use namespace(behaviour_learning.training_exercise.envelop); use_map(valley_range); // Define participants add_poi(target)_at(3.44773632, -12.84847632, 0.124); group_drone(sunya, eka, dvi)_group(assets); // Sanskrit numerals tri, catur, pancan... assign_rank(O4)_to(sunya); assign_rank(E4)_to(eka, dvi); // Goto POI and gather intel with_group(assets)_goto(target)_form(arrowhead)?; ? envelop_poi(target)?; ? document_poi(target); human(Jack)... [ 3748aa71-1b16-4dc5-8666-9625bbbd70ac ] drone(sunya) [ 62b9ec58-b556-498f-ba9b-b735a194c9c0 ] drone(eka) [ 7c93697a-1012-44a5-a0ba-0b5e7daa316a ] drone(dvi) [ d7555164-34f4-4176-a061-8ea25cc50b12 ] drone(tri) [ 2ed412f9-25d4-4eb8-8f79-be948aae5a71 ] drone(catur) [ db0f5779-5af1-460a-8f17-a6fe9e250b3d ] drone(pancan) [ 74282bac-e899-43b7-b241-4b789a6bb514 ] robot(sas) [ 953a3c95-1821-4499-a33f-4c6fae2dda69 ] begin_objective() end_objective() begin_develop()_forverb(envelop) // Count and label object(s) as assets if()_object()_single()?||:; ? declare_label(asset)_forobject()_label(asset); | label_object()_label(asset_0); | set_var(object_count)_value(1); : declare_label(asset_group)_forobject()_label(assets)?; ? foreach_object()+?; + label_object()_labelmask(asset_#)_startast(1)_inc(++); ? set_var(object_count)_value()_length(); // Count and label forofs as enactors if()_forof()_notexists()?; ? end_develop() begin_behaviour(envelop); end_behaviour(envelop) ``` envelop_ object ( moniker|uuid ) ooi Ob Of Interest soi Sub Of Interest envelop_soi(asset)_forof(enactors)?; ? document(asset); set_default()_ofverb(envelop)_nonexistposit(form)_giveposit(form)_giveparam(type)_value(circle); with_enactor()_form(circle)_around(asset) `_ _forverb() _nonexistverb() _ofverb() _ofobject() _ofparentobject() _ofchildobject() _ofwho() _ofobjectwho() _ofparentobjectwho() _ofchildobjectwho() _ofposit() _ofpositwho() _ofparam() _ofordinal() envelop(asset)","title":"envelop"},{"location":"metaphysic/verb/find/","text":"find_ The find_ verb will conduct a two-process search: first through its own (the caller) memory for the {object} with/without explicit moniker ( _for posposition) of {object} s, similar to the command rememb_ verb; then a search amongst its (the caller) world ( puff , mist , fog , cloud , internet etc. ), similar to the call_ verb. The find_ verb can be used with ot without hey_diego / oh_diego subcommands. Thingies (Genera) The common use of find_ is to find all thingies of a certain genera, for example: find_human(); will find all humans in memory / its world. \"where are all the humans?\" ...responses may be, for example: found_human(James)_me(); \"I am James, a human. \" ... found_human(Sally); \"I'm here, I'm Sally, I'm human.\" ... and so on... ... with variations for all the thingy genera : find_{thingy}(); , including... find_genera(); \"is anyone here?\" _me When the find_genera(); or find_{thingy}(); commands use the _me postpostion it is effectively finding out what it is... find_genera()_me(); \"what am I?\" ...responses may be, for example: found_genera()_mobot_()_me(); \"I am a mobot!\" or found_genera()_human(James)_me(); \"I am a human called James.\" or found_human()_me()_value(false); \"I am not human.\" find_human()_me() \"am I a human?\" find_genera()_me(); - \"what am I?\" found_genera()_human()_me(); set_scope()_givento(find)_appliedto(human)_value(100); Puffs: Mist; Fog; Cloud","title":"`find_`"},{"location":"metaphysic/verb/find/#find_","text":"The find_ verb will conduct a two-process search: first through its own (the caller) memory for the {object} with/without explicit moniker ( _for posposition) of {object} s, similar to the command rememb_ verb; then a search amongst its (the caller) world ( puff , mist , fog , cloud , internet etc. ), similar to the call_ verb. The find_ verb can be used with ot without hey_diego / oh_diego subcommands.","title":"find_"},{"location":"metaphysic/verb/find/#thingies-genera","text":"The common use of find_ is to find all thingies of a certain genera, for example: find_human(); will find all humans in memory / its world. \"where are all the humans?\" ...responses may be, for example: found_human(James)_me(); \"I am James, a human. \" ... found_human(Sally); \"I'm here, I'm Sally, I'm human.\" ... and so on... ... with variations for all the thingy genera : find_{thingy}(); , including... find_genera(); \"is anyone here?\"","title":"Thingies (Genera)"},{"location":"metaphysic/verb/find/#_me","text":"When the find_genera(); or find_{thingy}(); commands use the _me postpostion it is effectively finding out what it is... find_genera()_me(); \"what am I?\" ...responses may be, for example: found_genera()_mobot_()_me(); \"I am a mobot!\" or found_genera()_human(James)_me(); \"I am a human called James.\" or found_human()_me()_value(false); \"I am not human.\" find_human()_me() \"am I a human?\" find_genera()_me(); - \"what am I?\" found_genera()_human()_me(); set_scope()_givento(find)_appliedto(human)_value(100); Puffs: Mist; Fog; Cloud","title":"_me"},{"location":"metaphysic/verb/follow/","text":"Follow (verb)","title":"Follow (verb)"},{"location":"metaphysic/verb/follow/#follow-verb","text":"","title":"Follow (verb)"},{"location":"metaphysic/verb/form/","text":"Form (verb) | form [ation] | | form_swarm( swarm_moniker ) The form_swarm command form_swarm( formation_type ) transform_swarm( formation_type ) form_swarm( formation_type )_for( swarm_moniker1 , n... ) transform_swarm( formation_type )_for( swarm_moniker1 , n... ) form_swarm( formation_type )_not( swarm_moniker1 , n... ) transform_swarm( formation_type )_not( swarm_moniker1 , n... ) formation_type Moveable Description geometric \u2705 shortdiamond \u2705 pyramid \u2705 typhoon \u2705 Lightning \u2705 phoenix \u2705 tornado \u2705 mirror \u2705 vee \u2705 echelon \u2705 column \u2705 line \u2705 svinfylking \u2705 pacman \u2705 wedge \u2705 zee \u2705 alpha \u2705 herringbone \u274c coil \u274c cluster \u2705 finger \u2705","title":"Form (verb)"},{"location":"metaphysic/verb/form/#form-verb","text":"| form [ation] | |","title":"Form (verb)"},{"location":"metaphysic/verb/form/#form_swarmswarm_moniker","text":"The form_swarm command","title":"form_swarm(swarm_moniker)"},{"location":"metaphysic/verb/form/#form_swarmformation_type-transform_swarmformation_type","text":"","title":"form_swarm(formation_type) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform_swarm(formation_type)"},{"location":"metaphysic/verb/form/#form_swarmformation_type_forswarm_moniker1-n-transform_swarmformation_type_forswarm_moniker1-n","text":"","title":"form_swarm(formation_type)_for(swarm_moniker1, n...)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform_swarm(formation_type)_for(swarm_moniker1, n...)"},{"location":"metaphysic/verb/form/#form_swarmformation_type_notswarm_moniker1-n-transform_swarmformation_type_notswarm_moniker1-n","text":"formation_type Moveable Description geometric \u2705 shortdiamond \u2705 pyramid \u2705 typhoon \u2705 Lightning \u2705 phoenix \u2705 tornado \u2705 mirror \u2705 vee \u2705 echelon \u2705 column \u2705 line \u2705 svinfylking \u2705 pacman \u2705 wedge \u2705 zee \u2705 alpha \u2705 herringbone \u274c coil \u274c cluster \u2705 finger \u2705","title":"form_swarm(formation_type)_not(swarm_moniker1, n...)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform_swarm(formation_type)_not(swarm_moniker1, n...)"},{"location":"metaphysic/verb/go/","text":"Go (verb) The go_ verb is the command to inert momentum in the proceeding object. Syntax go_ <object> ( .... ) ... go_robot(alif)_wp(wp1);","title":"Go (verb)"},{"location":"metaphysic/verb/go/#go-verb","text":"The go_ verb is the command to inert momentum in the proceeding object.","title":"Go (verb)"},{"location":"metaphysic/verb/go/#syntax","text":"go_ <object> ( .... ) ... go_robot(alif)_wp(wp1);","title":"Syntax"},{"location":"metaphysic/verb/goto/","text":"Goto (verb)","title":"Goto (verb)"},{"location":"metaphysic/verb/goto/#goto-verb","text":"","title":"Goto (verb)"},{"location":"metaphysic/verb/kill/","text":"Kill (verb) The kill instructs the decommission of a thingy by force with specialised killing equipment. Only the four children of thingy are available for killing. For a non-living thingies kill means immobilisation and complete loss of processing power. For living thingies ( human and organic ) kill means immobilisation and complete loss of the capacity to live. If the thingies commanded to kill have no specialised equipment (i.e. weaponry) then the kill command cannot be executed. In this case, the murder command should be used. Declaration To declare kill , you will need to provide the target(s) as monikers. Declaration of the kill command can only be executed when the thingies required to kill have weaponry or access to weaponry. kill_ <thingy> ( target_moniker ); kill_ <thingy> ( target_moniker1 , target_moniker2 , ... ); kill_ <thingy> ([ target_variable_name ]); Declaration of the killer is provided with discirimation posit, for example: forof . kill_ <thingy> ( target_moniker )_forof( killer_moniker ); Posits Objects Only the four children of thingy are available for killing, both as the killer and the target: human ; organic ; robot ; and thing . Human (object) The kill_human is a command for a robot(s) to end the life of an identified human in the physical world using purpose-build tools (i.e. weaponry). If a robot(s)/swarm has no weaponry the kill_human command cannot be executed, and in this case the murder_human command should be used. The kill_human command cannot be param-less. kill_human( target_moniker ); kill_human( target_moniker1 , target_moniker2 , ... ); kill_human([ target_variable_name ]); kill_human( human_moniker ) The human identified as human_moniker will be killed using the weaponry of the robot(s)/swarm. Note: The human_moniker used in the kill_human command is only an identified human in the physical world and not a human(s) within the diego. A human identified in the physical world who is also moniker-ed in the diego, will not killed by the robot, and an `err(*human_moniker* is in the diego) will be returned in the oh_diego event and ' bubbled up '. Sub Commands kill_human( human_moniker )_count() With the _count sub command the robot will keep a kill count of Example https://www.globalsecurity.org/wmd/library/policy/army/fm/3-19/Ch7.htm In this example a robot(s) will join the ' patrol main route ' swarm and the swarm will go along route ' main_route ' in a column formation. The swarm will continue along ' main_route ' indefinitely 1 until a human is detected and subsequently labelled as ' intruder '. Upon detecting the ' intruder ' the swarm will transform into a ' herringbone ' formation, then request for a ' kill intruder ' order. The swarm will continually learn - study the ' intruder ' until a call_order(kill intruder) is executed from an authority of o4 (' robotenant ') or above. Upon the call_order all robot(s) in the swarm able to kill (i.e. have weaponry) will kill the human (in the physical world) until the human is confirmed dead. The killing robots will keep a count of the ' intruder 's killed. When the kill is completed all robots will no longer react to a call_order(kill intruder) . The swarm will re-form into a column formation and go along route ' main_route ', entering the first loop. go_diego(); begin_instruct(patrol main route aggressively); detect_human(intruder) ? learn_human(intruder); join_swarm(patrol main route); form_swarm(patrol main route)_as(column); go_route(main route)_for(patrol main route) ? go_route(main route); learn_human(intruder) : form_swarm(patrol main route)_as(column); pause_swarm(patrol main route) ? form_swarm(patrol main route)_as(herringbone); form_swarm(patrol main route)_as(herringbone) ? request_order(kill intruder); request_order(kill intruder)_fromauthority(o4) ? kill_human(intruder); study_human(intruder); kill_human(intruder)_count() ? deafon_order(kill intruder); deafon_order(kill intruder) ? form_swarm(patrol main route)_as(column); end_instruct(patrol main route aggressively); start_instruct(patrol main route aggressively); graph TD 1[\"go_diego()\"] --> 21[\"start_instruct(patrol main route aggressively)\"] 21 --> 2[\"begin_instruct(patrol main route aggressively)\"] 2 --> 3[\"detect_human(intruder)\"] 3 --?--> 4[\"learn_human(intruder)\"] 3 --> 5[\"join_swarm(patrol main route)\"] 5 --> 6[\"form_swarm(patrol main route)_as(column)\"] 6 --> 7[\"go_route(main route)_for(patrol main route)\"] 7 --?--> 7 4 --> 11[\"pause_swarm(patrol main route)\"] 11 --> 12[\"form_swarm(patrol main route)_as(herringbone)\"] 12 --?--> 13[\"request_order(kill intruder)\"] 13 --> 14[\"request_order(kill intruder)_fromauthority(o4)\"] 14 --> 16[\"study_human(intruder)\"] 16 --> 4 14 --?--> 15[\"kill_human(intruder)\"] 15 --- 17[\"kill_human(intruder)_count()\"] 17 --?--> 18[\"deafon_order(kill intruder)\"] 18 --?--> 6 18 --- 20[\"end_instruct(patrol main route aggressively)\"] murder_human https://www.youtube.com/watch?v=IykWbUVDWL8 In the kill_human example, in order for the go_route(main route) to link its own hey_diego event it must be a loop-able route. \u21a9","title":"Kill (verb)"},{"location":"metaphysic/verb/kill/#kill-verb","text":"The kill instructs the decommission of a thingy by force with specialised killing equipment. Only the four children of thingy are available for killing. For a non-living thingies kill means immobilisation and complete loss of processing power. For living thingies ( human and organic ) kill means immobilisation and complete loss of the capacity to live. If the thingies commanded to kill have no specialised equipment (i.e. weaponry) then the kill command cannot be executed. In this case, the murder command should be used.","title":"Kill (verb)"},{"location":"metaphysic/verb/kill/#declaration","text":"To declare kill , you will need to provide the target(s) as monikers. Declaration of the kill command can only be executed when the thingies required to kill have weaponry or access to weaponry. kill_ <thingy> ( target_moniker ); kill_ <thingy> ( target_moniker1 , target_moniker2 , ... ); kill_ <thingy> ([ target_variable_name ]); Declaration of the killer is provided with discirimation posit, for example: forof . kill_ <thingy> ( target_moniker )_forof( killer_moniker );","title":"Declaration"},{"location":"metaphysic/verb/kill/#posits","text":"","title":"Posits"},{"location":"metaphysic/verb/kill/#objects","text":"Only the four children of thingy are available for killing, both as the killer and the target: human ; organic ; robot ; and thing .","title":"Objects"},{"location":"metaphysic/verb/kill/#human-object","text":"The kill_human is a command for a robot(s) to end the life of an identified human in the physical world using purpose-build tools (i.e. weaponry). If a robot(s)/swarm has no weaponry the kill_human command cannot be executed, and in this case the murder_human command should be used. The kill_human command cannot be param-less. kill_human( target_moniker ); kill_human( target_moniker1 , target_moniker2 , ... ); kill_human([ target_variable_name ]);","title":"Human (object)"},{"location":"metaphysic/verb/kill/#kill_humanhuman_moniker","text":"The human identified as human_moniker will be killed using the weaponry of the robot(s)/swarm. Note: The human_moniker used in the kill_human command is only an identified human in the physical world and not a human(s) within the diego. A human identified in the physical world who is also moniker-ed in the diego, will not killed by the robot, and an `err(*human_moniker* is in the diego) will be returned in the oh_diego event and ' bubbled up '.","title":"kill_human(human_moniker)"},{"location":"metaphysic/verb/kill/#sub-commands","text":"","title":"Sub Commands"},{"location":"metaphysic/verb/kill/#kill_humanhuman_moniker_count","text":"With the _count sub command the robot will keep a kill count of","title":"kill_human(human_moniker)_count()"},{"location":"metaphysic/verb/kill/#example","text":"https://www.globalsecurity.org/wmd/library/policy/army/fm/3-19/Ch7.htm In this example a robot(s) will join the ' patrol main route ' swarm and the swarm will go along route ' main_route ' in a column formation. The swarm will continue along ' main_route ' indefinitely 1 until a human is detected and subsequently labelled as ' intruder '. Upon detecting the ' intruder ' the swarm will transform into a ' herringbone ' formation, then request for a ' kill intruder ' order. The swarm will continually learn - study the ' intruder ' until a call_order(kill intruder) is executed from an authority of o4 (' robotenant ') or above. Upon the call_order all robot(s) in the swarm able to kill (i.e. have weaponry) will kill the human (in the physical world) until the human is confirmed dead. The killing robots will keep a count of the ' intruder 's killed. When the kill is completed all robots will no longer react to a call_order(kill intruder) . The swarm will re-form into a column formation and go along route ' main_route ', entering the first loop. go_diego(); begin_instruct(patrol main route aggressively); detect_human(intruder) ? learn_human(intruder); join_swarm(patrol main route); form_swarm(patrol main route)_as(column); go_route(main route)_for(patrol main route) ? go_route(main route); learn_human(intruder) : form_swarm(patrol main route)_as(column); pause_swarm(patrol main route) ? form_swarm(patrol main route)_as(herringbone); form_swarm(patrol main route)_as(herringbone) ? request_order(kill intruder); request_order(kill intruder)_fromauthority(o4) ? kill_human(intruder); study_human(intruder); kill_human(intruder)_count() ? deafon_order(kill intruder); deafon_order(kill intruder) ? form_swarm(patrol main route)_as(column); end_instruct(patrol main route aggressively); start_instruct(patrol main route aggressively); graph TD 1[\"go_diego()\"] --> 21[\"start_instruct(patrol main route aggressively)\"] 21 --> 2[\"begin_instruct(patrol main route aggressively)\"] 2 --> 3[\"detect_human(intruder)\"] 3 --?--> 4[\"learn_human(intruder)\"] 3 --> 5[\"join_swarm(patrol main route)\"] 5 --> 6[\"form_swarm(patrol main route)_as(column)\"] 6 --> 7[\"go_route(main route)_for(patrol main route)\"] 7 --?--> 7 4 --> 11[\"pause_swarm(patrol main route)\"] 11 --> 12[\"form_swarm(patrol main route)_as(herringbone)\"] 12 --?--> 13[\"request_order(kill intruder)\"] 13 --> 14[\"request_order(kill intruder)_fromauthority(o4)\"] 14 --> 16[\"study_human(intruder)\"] 16 --> 4 14 --?--> 15[\"kill_human(intruder)\"] 15 --- 17[\"kill_human(intruder)_count()\"] 17 --?--> 18[\"deafon_order(kill intruder)\"] 18 --?--> 6 18 --- 20[\"end_instruct(patrol main route aggressively)\"]","title":"Example"},{"location":"metaphysic/verb/kill/#murder_human","text":"https://www.youtube.com/watch?v=IykWbUVDWL8 In the kill_human example, in order for the go_route(main route) to link its own hey_diego event it must be a loop-able route. \u21a9","title":"murder_human"},{"location":"metaphysic/verb/label/","text":"Label (verb) | label any thingy can have any number of labels","title":"Label (verb)"},{"location":"metaphysic/verb/label/#label-verb","text":"| label any thingy can have any number of labels","title":"Label (verb)"},{"location":"metaphysic/verb/lead/","text":"Lead (verb)","title":"Lead (verb)"},{"location":"metaphysic/verb/lead/#lead-verb","text":"","title":"Lead (verb)"},{"location":"metaphysic/verb/listen/","text":"Listen (verb)","title":"Listen (verb)"},{"location":"metaphysic/verb/listen/#listen-verb","text":"","title":"Listen (verb)"},{"location":"metaphysic/verb/load/","text":"Payloaders load_payload( payload_moniker ) unload_payload( payload_moniker ) call_payload( payload_moniker )","title":"Payloaders"},{"location":"metaphysic/verb/load/#payloaders","text":"","title":"Payloaders"},{"location":"metaphysic/verb/load/#load_payloadpayload_moniker","text":"","title":"load_payload(payload_moniker)"},{"location":"metaphysic/verb/load/#unload_payloadpayload_moniker","text":"","title":"unload_payload(payload_moniker)"},{"location":"metaphysic/verb/load/#call_payloadpayload_moniker","text":"","title":"call_payload(payload_moniker)"},{"location":"metaphysic/verb/loiter/","text":"Loiter To loiter is for an animate thingy (e.g. robot , human , organic ) to perform a waiting action in the physical world usually at a specified location. The waiting action can be simple pause or hover to a more complex behaviour. Loitering originated from the drone community Loiter is a verb ( loiter_ ); an object ( loiter ); and, a some postpositions ( _loiterat , _loiteraround , _loiterfor , _loiteruntil ). Basic Call The basic command for a thingy (such as a drone) to loiter is to use the loiter_ verb, for example... loiter_robot()_me(); loiter_drone(alpha); loiter_drone()_for(alpha, beta); loiter_robot()_me() \"okay, I am going to loiter (in a manner I usually do) right now, until I get bored or need to do something else\" recur - occur again periodically or repeatedly. https://www.autonodyne.com/AUTO_behaviors2.html#behave-vehicles flyover _flyover follow _follow()","title":"Loiter"},{"location":"metaphysic/verb/loiter/#loiter","text":"To loiter is for an animate thingy (e.g. robot , human , organic ) to perform a waiting action in the physical world usually at a specified location. The waiting action can be simple pause or hover to a more complex behaviour. Loitering originated from the drone community Loiter is a verb ( loiter_ ); an object ( loiter ); and, a some postpositions ( _loiterat , _loiteraround , _loiterfor , _loiteruntil ).","title":"Loiter"},{"location":"metaphysic/verb/loiter/#basic-call","text":"The basic command for a thingy (such as a drone) to loiter is to use the loiter_ verb, for example... loiter_robot()_me(); loiter_drone(alpha); loiter_drone()_for(alpha, beta); loiter_robot()_me() \"okay, I am going to loiter (in a manner I usually do) right now, until I get bored or need to do something else\" recur - occur again periodically or repeatedly. https://www.autonodyne.com/AUTO_behaviors2.html#behave-vehicles flyover _flyover follow _follow()","title":"Basic Call"},{"location":"metaphysic/verb/merge/","text":"Merge (verb)","title":"Merge (verb)"},{"location":"metaphysic/verb/merge/#merge-verb","text":"","title":"Merge (verb)"},{"location":"metaphysic/verb/msg/","text":"Message (verb)","title":"Message (verb)"},{"location":"metaphysic/verb/msg/#message-verb","text":"","title":"Message (verb)"},{"location":"metaphysic/verb/poll/","text":"Poll (verb) Pollsters poll_distance( moniker ) poll_distance( point_moniker ) poll_distance( point_moniker ) [...] _by( distance_metric ) A robot will poll all robots for their distance to point_moniker from their current position. The additional distance_metric sub command determines the calculation used in the return poll. distance_metric is a enumerator: | distance_metric | Description | |--|--| | direct | Calculates the distance based on 'euclidean distance' calculation on the local map and local map types. For the global map and global map types the \u2018haversine\u2019 formula is used to calculate the great-circle distance. Distance is returned in metres. | | cityblock | Calculates the distance based on 'manhattan distance' calculation on a local map and local map types. For the global map and global map types the \u2018haversine\u2019 formula is used to calculate the great-circle distance between each nth axis.. Distance is returned in metres. | learned | Calculates the distance using averaged odometric past knowledge (if any). Where the robot has no past knowledge, direct distance is used. Distance in returned in metres with an additional percentage of calculated distances (against direct distances) used. Note: By using the _under( condition_moniker ) sub command the calc distance calculation will only use past knowledge matching the condition moniker . | For a simplified explanation of 'euclidean' and 'manhattan' distance calculations see: https://www.analyticsvidhya.com/blog/2020/02/4-types-of-distance-metrics-in-machine-learning/ poll_distance( route_moniker ) poll_distance( route_moniker )_at( start_point , end_point ) poll_distance( start_point , end_point ) poll_distance( point_moniker )_in( distance ) poll_energy( moniker ) poll_energy( point_moniker ) poll_energy( route_moniker ) poll_energy( route_moniker )_at( start_point , end_point ) , unanimous__by(direct) Each robot will send a 'poll' as: poll_distance(rallying point, unanimous__by(direct) , and, in turn, each robot will return their results as poll_distance(rallying point)_in( metres ) . Each will robot will wait for a unanimous consensus and the winner will run call_point(sentry point) with it's current position. The loser(s) will run listen_point(sentry point) . poll Syntax: add_call({poll_name}); with_poll({poll_name}); run_poll({poll_name}); freqent_poll({poll_name})_freq({frequency_millisecs})_until({milliseconds/datetime}); Example: In this example three things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ; and, c9477eb6-1328-4c10-8755-913d41a6e0e1 , c9477eb6 ) are in the same universe; they have all been introduced to each other (i.e. they believe in each others existence and therefore presume each other is listening); they presume they are the only ones left in this universe... sequenceDiagram autonumber participant df88accd participant 344d4c22 participant c9477eb6 par df88accd->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 344d4c22 | 086a || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | c9477eb6 | 9ff5 || \u2193ce1c | + end par df88accd->>344d4c22: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_point(Door)#59; | 344d4c22 | d02c || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_point(Door)#59; | c9477eb6 | cc18 || \u2193ce1c | + end 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call . Implicit Call The implicit [roll]call is a request for existence of other types in its known universe, Syntax: call_human(); call_ai(); call_robot(); call_thing(); call_console(); Explicit Call Syntax: call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Collection Call Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Poll (verb)"},{"location":"metaphysic/verb/poll/#poll-verb","text":"","title":"Poll (verb)"},{"location":"metaphysic/verb/poll/#pollsters","text":"","title":"Pollsters"},{"location":"metaphysic/verb/poll/#poll_distancemoniker","text":"","title":"poll_distance(moniker)"},{"location":"metaphysic/verb/poll/#poll_distancepoint_moniker","text":"","title":"poll_distance(point_moniker)"},{"location":"metaphysic/verb/poll/#poll_distancepoint_moniker_bydistance_metric","text":"A robot will poll all robots for their distance to point_moniker from their current position. The additional distance_metric sub command determines the calculation used in the return poll. distance_metric is a enumerator: | distance_metric | Description | |--|--| | direct | Calculates the distance based on 'euclidean distance' calculation on the local map and local map types. For the global map and global map types the \u2018haversine\u2019 formula is used to calculate the great-circle distance. Distance is returned in metres. | | cityblock | Calculates the distance based on 'manhattan distance' calculation on a local map and local map types. For the global map and global map types the \u2018haversine\u2019 formula is used to calculate the great-circle distance between each nth axis.. Distance is returned in metres. | learned | Calculates the distance using averaged odometric past knowledge (if any). Where the robot has no past knowledge, direct distance is used. Distance in returned in metres with an additional percentage of calculated distances (against direct distances) used. Note: By using the _under( condition_moniker ) sub command the calc distance calculation will only use past knowledge matching the condition moniker . | For a simplified explanation of 'euclidean' and 'manhattan' distance calculations see: https://www.analyticsvidhya.com/blog/2020/02/4-types-of-distance-metrics-in-machine-learning/","title":"poll_distance(point_moniker)[...]_by(distance_metric)"},{"location":"metaphysic/verb/poll/#poll_distanceroute_moniker","text":"","title":"poll_distance(route_moniker)"},{"location":"metaphysic/verb/poll/#poll_distanceroute_moniker_atstart_point-end_point","text":"","title":"poll_distance(route_moniker)_at(start_point, end_point)"},{"location":"metaphysic/verb/poll/#poll_distancestart_point-end_point","text":"","title":"poll_distance(start_point, end_point)"},{"location":"metaphysic/verb/poll/#poll_distancepoint_moniker_indistance","text":"","title":"poll_distance(point_moniker)_in(distance)"},{"location":"metaphysic/verb/poll/#poll_energymoniker","text":"","title":"poll_energy(moniker)"},{"location":"metaphysic/verb/poll/#poll_energypoint_moniker","text":"","title":"poll_energy(point_moniker)"},{"location":"metaphysic/verb/poll/#poll_energyroute_moniker","text":"","title":"poll_energy(route_moniker)"},{"location":"metaphysic/verb/poll/#poll_energyroute_moniker_atstart_point-end_point","text":", unanimous__by(direct) Each robot will send a 'poll' as: poll_distance(rallying point, unanimous__by(direct) , and, in turn, each robot will return their results as poll_distance(rallying point)_in( metres ) . Each will robot will wait for a unanimous consensus and the winner will run call_point(sentry point) with it's current position. The loser(s) will run listen_point(sentry point) .","title":"poll_energy(route_moniker)_at(start_point, end_point)"},{"location":"metaphysic/verb/poll/#poll","text":"","title":"poll"},{"location":"metaphysic/verb/poll/#_1","text":"","title":""},{"location":"metaphysic/verb/poll/#syntax","text":"add_call({poll_name}); with_poll({poll_name}); run_poll({poll_name}); freqent_poll({poll_name})_freq({frequency_millisecs})_until({milliseconds/datetime});","title":"Syntax:"},{"location":"metaphysic/verb/poll/#example","text":"In this example three things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ; and, c9477eb6-1328-4c10-8755-913d41a6e0e1 , c9477eb6 ) are in the same universe; they have all been introduced to each other (i.e. they believe in each others existence and therefore presume each other is listening); they presume they are the only ones left in this universe... sequenceDiagram autonumber participant df88accd participant 344d4c22 participant c9477eb6 par df88accd->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_poll(Closest to Door)_type(reach)#59; | 344d4c22 | 086a || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | 00000000 | ce1c || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_poll(Closest to Door)_type(reach)#59; | c9477eb6 | 9ff5 || \u2193ce1c | + end par df88accd->>344d4c22: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + 344d4c22->>344d4c22: df88accd | add_point(Door)#59; | 344d4c22 | d02c || \u2193ce1c | + df88accd->>c9477eb6: df88accd | add_point(Door)#59; | 00000000 | 1e1d || \u2193ce1c | + c9477eb6->>c9477eb6: df88accd | add_point(Door)#59; | c9477eb6 | cc18 || \u2193ce1c | + end 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call .","title":"Example:"},{"location":"metaphysic/verb/poll/#implicit-call","text":"The implicit [roll]call is a request for existence of other types in its known universe,","title":"Implicit Call"},{"location":"metaphysic/verb/poll/#syntax_1","text":"call_human(); call_ai(); call_robot(); call_thing(); call_console();","title":"Syntax:"},{"location":"metaphysic/verb/poll/#explicit-call","text":"","title":"Explicit Call"},{"location":"metaphysic/verb/poll/#syntax_2","text":"call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Syntax:"},{"location":"metaphysic/verb/poll/#collection-call","text":"Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Collection Call"},{"location":"metaphysic/verb/see/","text":"see The call is a register request for existence, made by the caller and returned to the caller with here (if a new connection) or pong (if there is a relationship). Basic Call The basic [roll]call is an indiscriminate and implicit request for existence of others in its known universe, Syntax: see_genus(); see_human(); see_oranig Example: In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe and have never met each other before. Both parties are shy and appear to be primitive... sequenceDiagram autonumber participant df88accd participant 344d4c22 df88accd->>344d4c22: df88accd | call()#59; | 00000000 | 6fd7 || \u21937031 | + 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call . Implicit Call The implicit [roll]call is a request for existence of other types in its known universe, Syntax: call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console(); Explicit Call Syntax: call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label}) Collection Call Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); --4b2b-b8da-59c35467963b 57e7-3869-43be-a16f-97cad6b4e14c d244714e-7711-48f4-b79c-eb152265e687 d6963830-3e64-405d-ac63-9ddbeb641c8b 68937890--4693-9b4a-63dc25646e30 4191a526-52f4-481e-a059-2d5aa59eb95b 93f0278a-7548-4c3e-af2f-71da2a69aa4e 094f129e-f2e4-4134-b6bd-909b840431a8 35dccb9d 9543ebae call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"see"},{"location":"metaphysic/verb/see/#see","text":"The call is a register request for existence, made by the caller and returned to the caller with here (if a new connection) or pong (if there is a relationship).","title":"see"},{"location":"metaphysic/verb/see/#basic-call","text":"The basic [roll]call is an indiscriminate and implicit request for existence of others in its known universe,","title":"Basic Call"},{"location":"metaphysic/verb/see/#syntax","text":"see_genus(); see_human(); see_oranig","title":"Syntax:"},{"location":"metaphysic/verb/see/#example","text":"In this example two things ( df88accd-dd43-4ff1-820e-82f75be13013 , shortened 64-bit: df88accd ; and, 344d4c22-546c-4940-bdc4-c2a4371a29ac , 344d4c22 ) are in the same universe and have never met each other before. Both parties are shy and appear to be primitive... sequenceDiagram autonumber participant df88accd participant 344d4c22 df88accd->>344d4c22: df88accd | call()#59; | 00000000 | 6fd7 || \u21937031 | + 344d4c22->>344d4c22: 344d4c22 | _rem_neigh(df88accd)#59; | 344d4c22 | b4b1 | 6fd7 || 344d4c22->>344d4c22: 344d4c22 | _recall_neigh(df88accd)_null()#59; | 344d4c22 | c09b | b4b1 || 344d4c22->>344d4c22: 344d4c22 | _neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736)#59; | 893e | c09b || 344d4c22->>df88accd: 344d4c22 | here(344d9a90)#59; | df88accd | 1ef5 | 893e | \u21917031 | = \u2460 The caller, df88accd , calls out to its know universe with the command: call(); The message contains {caller_uuid} | {command} | {callee} | {*hash} | {\u2190hash} | {\u2195hash} | {tree} , where: {caller} is df88accd ; {command} is call(); ; {callee} is 00000000 ( NULL ), because this is a call to the universe; in this case, {*hash} is 6fd7 (shortened to 16-bit); {\u2190hash} is non-existent because the message is coming from outside; {\u2195hash} is 7031 from the originator; and, {tree} is + depicting a new blockchain tree. \u2461 The callee, 344d4c22 , hears the call and tries to remember the caller as a neighbour: _rem_neigh(df88accd); . \u2462 Callee, 344d4c22 does not recall ever meeting df88accd : _recall_neigh(df88accd)_null(); , so 344d4c22 remembers the time and place 344d4c22 met df88accd : \u2463 `_neigh(df88accd)_datetime(2021-07-17 09:20.2)_gps(-26.8025,153.0736); . \u2464 344d4c22 responds to df88accd 's roll call: here(344d9a90); . The {tree} of = depicts the end of this child's blockchain. At this point thing df88accd will perform the same process ( _neigh ) triggered by the here command rather than call .","title":"Example:"},{"location":"metaphysic/verb/see/#implicit-call","text":"The implicit [roll]call is a request for existence of other types in its known universe,","title":"Implicit Call"},{"location":"metaphysic/verb/see/#syntax_1","text":"call_human(); call_ai(); call_robot(); call_organic(); call_thing(); call_console();","title":"Syntax:"},{"location":"metaphysic/verb/see/#explicit-call","text":"","title":"Explicit Call"},{"location":"metaphysic/verb/see/#syntax_2","text":"call({uuid}); call_human({human_uuid}); call_human()_for({human_uuid}); call_ai({ai_uuid}); call_ai()_for({ai_uuid}); call_robot({robot_uuid}); call_robot()_for({robot_uuid}); call_thing({thing_uuid}); call_thing()_for({thing_uuid}); call_console({console_uuid}); call_console()_for({console_uuid}); call({moniker}); call_human({human_moniker}); call_human()_for({human_moniker}); call_ai({ai_moniker}); call_ai()_for({ai_moniker}); call_robot({robot_moniker}); call_robot()_for({robot_moniker}); call_thing({thing_moniker}); call_thing()_for({thing_moniker}); call_console({console_moniker}); call_console()_for({console_moniker}); call()_as({label})","title":"Syntax:"},{"location":"metaphysic/verb/see/#collection-call","text":"Syntax: call()_in({uuid1/moniker1},{uuid2/moniker2},...); call_human()_in({human_uuid1/human_moniker1},{human_uuid2/human_moniker2},...); call_ai()_in({ai_uuid1/ai_moniker1},{ai_uuid2/ai_moniker2},...); call_robot()_in({robot_uuid1/robot_moniker1},{robot_uuid2/robot_moniker2},...); call_thing()_in({thing_uuid1/thing_moniker1},{thing_uuid2/thing_moniker2},...); call_console()_in({console_uuid1/console_moniker1},{console_uuid2/console_moniker2},...); call()_asin({label1},{label2}); --4b2b-b8da-59c35467963b 57e7-3869-43be-a16f-97cad6b4e14c d244714e-7711-48f4-b79c-eb152265e687 d6963830-3e64-405d-ac63-9ddbeb641c8b 68937890--4693-9b4a-63dc25646e30 4191a526-52f4-481e-a059-2d5aa59eb95b 93f0278a-7548-4c3e-af2f-71da2a69aa4e 094f129e-f2e4-4134-b6bd-909b840431a8 35dccb9d 9543ebae call()_what(); call()_only(); df88: call(); 344d: here(); df88: ask(344d); 344d: tell_name(); df88: prog_name(344d)_name(Hoshiko Kawasaki)_withtest(); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_name(Hoshiko Kawasaki); 344d: tell_what(Thing); 344d: tell_comm(Bluetooth 5.2)_device(anko BT Speaker)_address(86:14:B8:ED:BB:34); 344d: tell_why(BT Speaker); 344d: tell_why(Desk Lamp); 344d: tell_why(Ambient Light); 344d: tell_why(Wireless Charger); prog_name() call_human(); call_ai(); call_robot(); call_thing(); call_console(); call_human({human_uuid); call_robot({robot_uuid}); call_thing({thing_uuid}); \u200b```Diego {from_uuid}|{command}|{to_uuid}","title":"Collection Call"},{"location":"metaphysic/verb/set/","text":"Set (verb) set Here Syntax: _set(Thing Here)_false(); _set(Thing Here)_true(); Rank Syntax: set_rank({rank/rank_code}); rank rank_code President O Admiral O-10 General O-9 Lieutenant O-8 Marshal O-7 Director O-6 Colonel O-5 Commander O-4 Major O-3 Captain O-2 Officer O-1 Cadet E-10 Corporal E-9 Starshina E-8 Chief E-7 Sergeant E-6 Agent E-5 Private E-4 Trainee E-3 Reserve E-2 Intern E-1 Birth Event Syntax: _self_birth(); _self_birth()_dateime({birth_datetime}); _self_birthdate({birth_datetime}); _self_coord({coord_system},{coord_universe},{birth_coords}); _self_gps({birth_coords}); _self_coord(gps,{coord_universe},{birth_coords}); _self_lps({birth_coords}); _self_coord(lps,{coord_universe},{birth_coords}); Genera Syntax: _self_what({genus}); _self_human(); _self_ai(); _self_robot(); _self_thing(); _self_console(); See Also: prog_self see_robot(QLD:605 BS5)_see()_gps() ----","title":"Set (verb)"},{"location":"metaphysic/verb/set/#set-verb","text":"","title":"Set (verb)"},{"location":"metaphysic/verb/set/#set","text":"","title":"set"},{"location":"metaphysic/verb/set/#here","text":"","title":"Here"},{"location":"metaphysic/verb/set/#syntax","text":"_set(Thing Here)_false(); _set(Thing Here)_true();","title":"Syntax:"},{"location":"metaphysic/verb/set/#rank","text":"","title":"Rank"},{"location":"metaphysic/verb/set/#syntax_1","text":"set_rank({rank/rank_code}); rank rank_code President O Admiral O-10 General O-9 Lieutenant O-8 Marshal O-7 Director O-6 Colonel O-5 Commander O-4 Major O-3 Captain O-2 Officer O-1 Cadet E-10 Corporal E-9 Starshina E-8 Chief E-7 Sergeant E-6 Agent E-5 Private E-4 Trainee E-3 Reserve E-2 Intern E-1","title":"Syntax:"},{"location":"metaphysic/verb/set/#birth-event","text":"","title":"Birth Event"},{"location":"metaphysic/verb/set/#syntax_2","text":"_self_birth(); _self_birth()_dateime({birth_datetime}); _self_birthdate({birth_datetime}); _self_coord({coord_system},{coord_universe},{birth_coords}); _self_gps({birth_coords}); _self_coord(gps,{coord_universe},{birth_coords}); _self_lps({birth_coords}); _self_coord(lps,{coord_universe},{birth_coords});","title":"Syntax:"},{"location":"metaphysic/verb/set/#genera","text":"Syntax: _self_what({genus}); _self_human(); _self_ai(); _self_robot(); _self_thing(); _self_console();","title":"Genera"},{"location":"metaphysic/verb/set/#see-also","text":"prog_self see_robot(QLD:605 BS5)_see()_gps() ----","title":"See Also:"},{"location":"metaphysic/verb/study/","text":"study_route( route_moniker ) study_route( route_moniker )_ study_point( point_moniker )","title":"Study"},{"location":"metaphysic/verb/study/#study_routeroute_moniker","text":"","title":"study_route(route_moniker)"},{"location":"metaphysic/verb/study/#study_routeroute_moniker_","text":"","title":"study_route(route_moniker)_"},{"location":"metaphysic/verb/study/#study_pointpoint_moniker","text":"","title":"study_point(point_moniker)"},{"location":"metaphysic/verb/study/#_1","text":"","title":""},{"location":"metaphysic/verb/swarm/","text":"Swarm (verb)","title":"Swarm (verb)"},{"location":"metaphysic/verb/swarm/#swarm-verb","text":"","title":"Swarm (verb)"},{"location":"metaphysic/verb/tail/","text":"Tail Behind (verb)","title":"Tail Behind (verb)"},{"location":"metaphysic/verb/tail/#tail-behind-verb","text":"","title":"Tail Behind (verb)"},{"location":"metaphysic/verb/unload/","text":"Payloaders load_payload( payload_moniker ) unload_payload( payload_moniker ) call_payload( payload_moniker )","title":"Payloaders"},{"location":"metaphysic/verb/unload/#payloaders","text":"","title":"Payloaders"},{"location":"metaphysic/verb/unload/#load_payloadpayload_moniker","text":"","title":"load_payload(payload_moniker)"},{"location":"metaphysic/verb/unload/#unload_payloadpayload_moniker","text":"","title":"unload_payload(payload_moniker)"},{"location":"metaphysic/verb/unload/#call_payloadpayload_moniker","text":"","title":"call_payload(payload_moniker)"},{"location":"opendogv3/bom/","text":"Bill of Materials add_robot(opendogv3) // Motors add_dict(motors) ()_k(fl_mtr_knee)_v(front-left motor (knee)); ()_k(fr_mtr_knee)_v(front-right motor (knee)); ()_k(hl_mtr_knee)_v(hind-left motor (knee)); ()_k(hr_mtr_knee)_v(hind-right motor (knee)); ()_k(fl_mtr_hip)_v(front-left motor (hip)); ()_k(fr_mtr_hip)_v(front-right motor (hip)); ()_k(hl_mtr_hip)_v(hind-left motor (hip)); ()_k(hr_mtr_hip)_v(hind-right motor (hip)); ()_k(fl_mtr_waist)_v(front-left motor (waist)); ()_k(fr_mtr_waist)_v(front-right motor (waist)); ()_k(hl_mtr_waist)_v(hind-left motor (waist)); ()_k(hr_mtr_waist)_v(hind-right motor (waist)); ; add_motor() ()_moniker()_kof(motors); ()_text()_vof(motors); ; // Motor ranges (in radians) with_motor(flhip,hlhip)_fromtoroll(\u276crad\u276d,-1.5708,-0.785398); with_motor(frhip,hrhip)_fromtoroll(\u276crad\u276d,-1.5708,-0.785398); add_actuat({motor_driver},x_mtr_drv) add_sensor({encode},fl_menc_knee, // front-left motor encoder (knee) fr_menc_knee, // front-right motor encoder (knee) hl_menc_knee, // hind-left motor encoder (knee) hr_menc_knee, // hind-right motor encoder (knee) fl_menc_hip, fr_menc_hip, hl_menc_hip, hr_menc_hip, fl_menc_waist, fr_menc_waist, hl_menc_waist, hr_menc_waist); add_imu(imu); add_transceiver(wf_transceiver); add_batt(ZIPPY_Compact_4000mAh_6S_60c_Lipo_Pack)_cap(\u276cAh\u276d,4); -0.785398,-2.35619 with_robot(opendogv3) log_console()_help(hl_mtr_hip); ; // hind-left motor (hip) with_robot(opendogv3) log_console()_()_typeof()_help(hl_mtr_hip); ; // opendogv3,{robot},hind-left motor (hip) GIN Absolute _abs( numeric ); ... | sub-expression | ... add_rec => add_record https://www.youtube.com/watch?v=hPpvlKLeYYA add_rec(User)_str(FullName); add_pegu() with_get(hello)_ret(Hello World!); with_get(helloobj)_ret() add_process(message)_v(Hello World); ; with_get(user)_result(OK)_rec(User)_v(Nick Chapsas); with_get(special)_async()_hippo() ()_ret()_await()_json()_requery(); ; with_post(extra/[{int},year])_int(year)_fromquery()_name(a)_int(age) _fromHeader({str},accept)_tempor(provider) _rec(User) ()_ret()_json([year],[age],[accept],[User],[])_(provider)_now(); ; ; run_gin(); GET http://localhost:5001/special?age=19 Accept: application/json [{\"key\":\"age\",\"value\":[\"19\"]}] hippo() Adds: HttpRequest request -> req() requery() HttpResponse response -> resp() CancellationToken token -> token()","title":"Bill of Materials"},{"location":"opendogv3/bom/#bill-of-materials","text":"add_robot(opendogv3) // Motors add_dict(motors) ()_k(fl_mtr_knee)_v(front-left motor (knee)); ()_k(fr_mtr_knee)_v(front-right motor (knee)); ()_k(hl_mtr_knee)_v(hind-left motor (knee)); ()_k(hr_mtr_knee)_v(hind-right motor (knee)); ()_k(fl_mtr_hip)_v(front-left motor (hip)); ()_k(fr_mtr_hip)_v(front-right motor (hip)); ()_k(hl_mtr_hip)_v(hind-left motor (hip)); ()_k(hr_mtr_hip)_v(hind-right motor (hip)); ()_k(fl_mtr_waist)_v(front-left motor (waist)); ()_k(fr_mtr_waist)_v(front-right motor (waist)); ()_k(hl_mtr_waist)_v(hind-left motor (waist)); ()_k(hr_mtr_waist)_v(hind-right motor (waist)); ; add_motor() ()_moniker()_kof(motors); ()_text()_vof(motors); ; // Motor ranges (in radians) with_motor(flhip,hlhip)_fromtoroll(\u276crad\u276d,-1.5708,-0.785398); with_motor(frhip,hrhip)_fromtoroll(\u276crad\u276d,-1.5708,-0.785398); add_actuat({motor_driver},x_mtr_drv) add_sensor({encode},fl_menc_knee, // front-left motor encoder (knee) fr_menc_knee, // front-right motor encoder (knee) hl_menc_knee, // hind-left motor encoder (knee) hr_menc_knee, // hind-right motor encoder (knee) fl_menc_hip, fr_menc_hip, hl_menc_hip, hr_menc_hip, fl_menc_waist, fr_menc_waist, hl_menc_waist, hr_menc_waist); add_imu(imu); add_transceiver(wf_transceiver); add_batt(ZIPPY_Compact_4000mAh_6S_60c_Lipo_Pack)_cap(\u276cAh\u276d,4); -0.785398,-2.35619 with_robot(opendogv3) log_console()_help(hl_mtr_hip); ; // hind-left motor (hip) with_robot(opendogv3) log_console()_()_typeof()_help(hl_mtr_hip); ; // opendogv3,{robot},hind-left motor (hip) GIN","title":"Bill of Materials"},{"location":"opendogv3/bom/#absolute","text":"_abs( numeric ); ... | sub-expression | ... add_rec => add_record https://www.youtube.com/watch?v=hPpvlKLeYYA add_rec(User)_str(FullName); add_pegu() with_get(hello)_ret(Hello World!); with_get(helloobj)_ret() add_process(message)_v(Hello World); ; with_get(user)_result(OK)_rec(User)_v(Nick Chapsas); with_get(special)_async()_hippo() ()_ret()_await()_json()_requery(); ; with_post(extra/[{int},year])_int(year)_fromquery()_name(a)_int(age) _fromHeader({str},accept)_tempor(provider) _rec(User) ()_ret()_json([year],[age],[accept],[User],[])_(provider)_now(); ; ; run_gin(); GET http://localhost:5001/special?age=19 Accept: application/json [{\"key\":\"age\",\"value\":[\"19\"]}] hippo() Adds: HttpRequest request -> req() requery() HttpResponse response -> resp() CancellationToken token -> token()","title":"Absolute"},{"location":"physic/physic/","text":"Physic The term physic is used to define statements in diego that represent physical, tangible objects, such as robot wheels, actuators in a frige, power supply switches in televisions, etc. Physic Type Hierarchy All physic reprentations in diego follow a structured hierarchy as can be dipicted as such: flowchart TD thingy(thingy) --> human(human) thingy --> organic(organic) thingy --> robot(robot) robot --> sobot(sobot) thingy --> thing(thing) thing --> mobot(mobot) thing --> ject(ject) Physic Hierarchy (by thingy type) All physic al objects in diego are detrived from the thingy object, which represents all physic al objects. There are only four 1 types of thingies : human , human beings interacting with diego through a console ; organic , organic non-human beings, such as a dog, a cat, a flower, a bush, etc.; robot , a self-propelled thingy in the physical world; and a, thing , an object in the physical world represented in diego . There are other sub-types of thingies. A sobot is a stationary robot , that although can be self-propelled, does not neccesarily interact physically in the physical world outside its own environment, such as a robot arm . A thing can be sub-typed as: mobot , a conveyed smart device, such as a smart watch, smart doorbel, etc.; and a, ject , a traditional physical object that is not smart enough to think. There are two variants of a ject : an object (ob ject), an immoveable ject such as a rock, a chair; and, a subject (sub ject), a self-propelled or moveable ject such as a trolley, wheeled tool cabinet, etc. Physic Composition Hierarchy (Organs / Components / Devices) Each of the four thingies has associated components that are further categorised, as such: flowchart TD thingy(thingy) --> human(human) thingy --> organic(organic) thingy --> robot(robot) thingy --> thing(thing) human --> apparat_human(apparat) human --> device_human(device) organic --> apparat_organic(apparat) organic --> device_organic(device) robot --> equip_robot(equip) robot --> compon_robot(compon) robot --> peripher_robot(peripher) thing --> equip_thing(equip) thing --> compon_thing(compon) thing --> peripher_thing(peripher) Physic Hierarchy (by component) There are effectively three components that come with each thingy . The apparat us/ equip ment are non-smart components that are carried or attached to the thingy, so, for human s this could be a traditional watch or a jacket. For organic s this could be a collar on a dog or cat. For robot s this is a component like wheels, or the chassis. For a thing this could be the door of a fridge, or a cushion on a chair. Each of the four thingies also have a compon ent. A compon is a component that moves in the physical world, so for human s and organic s this would be a limb or an organ. Since diego is not, yet, concerned with controlling human and organic anotomy, they are not represented here. However, compon s for robots and things include actuators, projectile launchers, encoders, motors, switches, etc. Then there are device s and peripher als, which are smart components that are carried or attached to the thingy, so for human s this could be a smart watch or a cellphone 2 . For organic s this could be a microchip implanted in a dog. For robot s and thing s this is termed a peripher and includes hygrometers, proximity sensors, sensors, cameras, etc. See Also Topological Index of Physic Objects A to Z Index of Phyic Objects Thingies thingy human organic robot ( sobot ) thing ( mobot ; ject ; ( IoT ) Components apparat ; equip Notes sensor There are some fringe thingy types such as mech , applian , mach , and, vehicle . \u21a9 Smart devices are can also be treated a sobot s. \u21a9","title":"Physic"},{"location":"physic/physic/#physic","text":"The term physic is used to define statements in diego that represent physical, tangible objects, such as robot wheels, actuators in a frige, power supply switches in televisions, etc.","title":"Physic"},{"location":"physic/physic/#physic-type-hierarchy","text":"All physic reprentations in diego follow a structured hierarchy as can be dipicted as such: flowchart TD thingy(thingy) --> human(human) thingy --> organic(organic) thingy --> robot(robot) robot --> sobot(sobot) thingy --> thing(thing) thing --> mobot(mobot) thing --> ject(ject) Physic Hierarchy (by thingy type) All physic al objects in diego are detrived from the thingy object, which represents all physic al objects. There are only four 1 types of thingies : human , human beings interacting with diego through a console ; organic , organic non-human beings, such as a dog, a cat, a flower, a bush, etc.; robot , a self-propelled thingy in the physical world; and a, thing , an object in the physical world represented in diego . There are other sub-types of thingies. A sobot is a stationary robot , that although can be self-propelled, does not neccesarily interact physically in the physical world outside its own environment, such as a robot arm . A thing can be sub-typed as: mobot , a conveyed smart device, such as a smart watch, smart doorbel, etc.; and a, ject , a traditional physical object that is not smart enough to think. There are two variants of a ject : an object (ob ject), an immoveable ject such as a rock, a chair; and, a subject (sub ject), a self-propelled or moveable ject such as a trolley, wheeled tool cabinet, etc.","title":"Physic Type Hierarchy"},{"location":"physic/physic/#physic-composition-hierarchy-organs-components-devices","text":"Each of the four thingies has associated components that are further categorised, as such: flowchart TD thingy(thingy) --> human(human) thingy --> organic(organic) thingy --> robot(robot) thingy --> thing(thing) human --> apparat_human(apparat) human --> device_human(device) organic --> apparat_organic(apparat) organic --> device_organic(device) robot --> equip_robot(equip) robot --> compon_robot(compon) robot --> peripher_robot(peripher) thing --> equip_thing(equip) thing --> compon_thing(compon) thing --> peripher_thing(peripher) Physic Hierarchy (by component) There are effectively three components that come with each thingy . The apparat us/ equip ment are non-smart components that are carried or attached to the thingy, so, for human s this could be a traditional watch or a jacket. For organic s this could be a collar on a dog or cat. For robot s this is a component like wheels, or the chassis. For a thing this could be the door of a fridge, or a cushion on a chair. Each of the four thingies also have a compon ent. A compon is a component that moves in the physical world, so for human s and organic s this would be a limb or an organ. Since diego is not, yet, concerned with controlling human and organic anotomy, they are not represented here. However, compon s for robots and things include actuators, projectile launchers, encoders, motors, switches, etc. Then there are device s and peripher als, which are smart components that are carried or attached to the thingy, so for human s this could be a smart watch or a cellphone 2 . For organic s this could be a microchip implanted in a dog. For robot s and thing s this is termed a peripher and includes hygrometers, proximity sensors, sensors, cameras, etc.","title":"Physic Composition Hierarchy (Organs / Components / Devices)"},{"location":"physic/physic/#see-also","text":"Topological Index of Physic Objects A to Z Index of Phyic Objects","title":"See Also"},{"location":"physic/physic/#thingies","text":"thingy human organic robot ( sobot ) thing ( mobot ; ject ; ( IoT )","title":"Thingies"},{"location":"physic/physic/#components","text":"apparat ; equip","title":"Components"},{"location":"physic/physic/#notes","text":"sensor There are some fringe thingy types such as mech , applian , mach , and, vehicle . \u21a9 Smart devices are can also be treated a sobot s. \u21a9","title":"Notes"},{"location":"physic/obj/actuat/","text":"Actuator (object) A actuat or, derived from a compon ent is of a machine that is responsible for moving and controlling a mechanism or system, for example by opening a valve. In simple terms, it is a \"mover\". An actuator requires a control device and a source of energy. ## Syntax The default declaration syntax is to provide, at least, the moniker. Both the common syntax actuat and the extended version actuator can be used: add_actuat( moniker ); add_actuator( moniker ); There is not a specific type of actuator, however, they can, optionally, be classified with motion and soe (source of energy): with_actuat( moniker )_motion( moniker ); add_actuat( moniker )_soe( source_of_energy ); motion Description linear rotary soe Description hydraulic pneumatic electromechanical electrohydraulic thermomagnetic mechanical supercolled polymer piezoelectric https://www.creativemotioncontrol.com/types-of-actuators/ | actuat , actuator | See: jigger | actuator | | jigger actuat actuator mover | A child device thingette that causes its parent thingy and/or sibling thingette to operate, usually providing motion. A public interface with the puff should be avoided or at least strictly limited. The thing version of a jagger . Example: motor controller; gearbox; motor See also: jigger , actuators notes API see also jagger An actuator that follows am irrational motion. Derived from acutator of _motion(jagger) . jagger see also: actuat jigger An actuator that follows a 'to and fro' motion. Derived from acutator of _motion(jigger) . jigger see also: actuat periodicator An actuator that follows a periodic motion. Derived from actuator of _motion(periodicator) . periodicator see also: actuat rotator An actuator that follows a rotational motion. Derived from acutator of _motion(rotator) . rotator see also: actuat | jigger actuat actuator mover | A child device thingette that causes its parent thingy and/or sibling thingette to operate, usually providing motion. A public interface with the puff should be avoided or at least strictly limited. The thing version of a jagger . Example: motor controller; gearbox; motor See also: jigger , jagger | jigger | | mover | See: jigger | | motor driver https://core-electronics.com.au/guides/analogue-electronics/motor-drivers-vs-motor-controllers/ https://odriverobotics.com/shop","title":"Actuator (object)"},{"location":"physic/obj/actuat/#actuator-object","text":"A actuat or, derived from a compon ent is of a machine that is responsible for moving and controlling a mechanism or system, for example by opening a valve. In simple terms, it is a \"mover\". An actuator requires a control device and a source of energy. ## Syntax The default declaration syntax is to provide, at least, the moniker. Both the common syntax actuat and the extended version actuator can be used: add_actuat( moniker ); add_actuator( moniker ); There is not a specific type of actuator, however, they can, optionally, be classified with motion and soe (source of energy): with_actuat( moniker )_motion( moniker ); add_actuat( moniker )_soe( source_of_energy ); motion Description linear rotary soe Description hydraulic pneumatic electromechanical electrohydraulic thermomagnetic mechanical supercolled polymer piezoelectric https://www.creativemotioncontrol.com/types-of-actuators/ | actuat , actuator | See: jigger | actuator | | jigger actuat actuator mover | A child device thingette that causes its parent thingy and/or sibling thingette to operate, usually providing motion. A public interface with the puff should be avoided or at least strictly limited. The thing version of a jagger . Example: motor controller; gearbox; motor See also: jigger , actuators notes API see also jagger An actuator that follows am irrational motion. Derived from acutator of _motion(jagger) . jagger see also: actuat jigger An actuator that follows a 'to and fro' motion. Derived from acutator of _motion(jigger) . jigger see also: actuat periodicator An actuator that follows a periodic motion. Derived from actuator of _motion(periodicator) . periodicator see also: actuat rotator An actuator that follows a rotational motion. Derived from acutator of _motion(rotator) . rotator see also: actuat | jigger actuat actuator mover | A child device thingette that causes its parent thingy and/or sibling thingette to operate, usually providing motion. A public interface with the puff should be avoided or at least strictly limited. The thing version of a jagger . Example: motor controller; gearbox; motor See also: jigger , jagger | jigger | | mover | See: jigger | | motor driver https://core-electronics.com.au/guides/analogue-electronics/motor-drivers-vs-motor-controllers/ https://odriverobotics.com/shop","title":"Actuator (object)"},{"location":"physic/obj/adsb/","text":"Automatic Dependent Surveillance\u2013Broadcast (object) with_drone( moniker )_adsb(); with_drone( moniker )_adsb( moniker ); <object> _adsb( moniker ) ; Properties property {datatype} / \u276cunit\u276d description id hex {id} / \u276cid_3\u276d 1 A 3 Byte hexidecimal unique idendifier used in adsb messaging squawk {int} / \u276c4_int\u276d A four-digit code assigned to a flight by air traffic control to match the flight to its radar screens fir {str} / \u276c4_str\u276d A four charatcher code representing the Flight Information Region (FIR) uir {str} / \u276c4_str\u276d A four character code representing the Upper Information Region (UIR), if no UIR then FIR is used tailnum reg {str} / \u276ctailnum\u276d \u2081 A unique code given to each aircraft airspeed {double} / \u276ckt\u276d The true air speed of the aircraft in knots 2 speed {double} / \u276ckt\u276d The ground speed of the aircraft in knots 2 alt altitude {double} / \u276cft\u276d The altitude of the aircraft in feet 2 course heading {int} / \u276cdeg\u276d The heading or course (from North) of the aircraft vrate {double} / \u276cft/min\u276d Tail Number Enumerator example description and example return _adsb()_tailnum() Returns the full tail number, e.g. JA8089 _adsb()_tailnum({crp}) Return the country registration prefix, e.g. JA _adsb()_tailnum({-}) Return the full tail number with hyphen, e.g. JA-8089 {id_3} refers to a 3 Byte (24 Bit) hexidecimal. \u21a9 The preferred avionic measurement units are used, irrespective of the thingies set_unitsys setting. The units can be cast, for example: _adsb()_speed({ms}) \u21a9 \u21a9 \u21a9","title":"Automatic Dependent Surveillance\u2013Broadcast (object)"},{"location":"physic/obj/adsb/#automatic-dependent-surveillancebroadcast-object","text":"with_drone( moniker )_adsb(); with_drone( moniker )_adsb( moniker ); <object> _adsb( moniker ) ;","title":"Automatic Dependent Surveillance\u2013Broadcast (object)"},{"location":"physic/obj/adsb/#properties","text":"property {datatype} / \u276cunit\u276d description id hex {id} / \u276cid_3\u276d 1 A 3 Byte hexidecimal unique idendifier used in adsb messaging squawk {int} / \u276c4_int\u276d A four-digit code assigned to a flight by air traffic control to match the flight to its radar screens fir {str} / \u276c4_str\u276d A four charatcher code representing the Flight Information Region (FIR) uir {str} / \u276c4_str\u276d A four character code representing the Upper Information Region (UIR), if no UIR then FIR is used tailnum reg {str} / \u276ctailnum\u276d \u2081 A unique code given to each aircraft airspeed {double} / \u276ckt\u276d The true air speed of the aircraft in knots 2 speed {double} / \u276ckt\u276d The ground speed of the aircraft in knots 2 alt altitude {double} / \u276cft\u276d The altitude of the aircraft in feet 2 course heading {int} / \u276cdeg\u276d The heading or course (from North) of the aircraft vrate {double} / \u276cft/min\u276d","title":"Properties"},{"location":"physic/obj/adsb/#tail-number-enumerator","text":"example description and example return _adsb()_tailnum() Returns the full tail number, e.g. JA8089 _adsb()_tailnum({crp}) Return the country registration prefix, e.g. JA _adsb()_tailnum({-}) Return the full tail number with hyphen, e.g. JA-8089 {id_3} refers to a 3 Byte (24 Bit) hexidecimal. \u21a9 The preferred avionic measurement units are used, irrespective of the thingies set_unitsys setting. The units can be cast, for example: _adsb()_speed({ms}) \u21a9 \u21a9 \u21a9","title":"Tail Number Enumerator"},{"location":"physic/obj/apparat/","text":"Apparatus (object) | apparat [us] | A technical device thingy , carried/worm by a human, for use for a particular purpose or activity. An apparatus should have access to the puff . The human version of a sensor . Example: geiger counter, multi-meter; a handheld device See also: sensor | apparat","title":"Apparatus (object)"},{"location":"physic/obj/apparat/#apparatus-object","text":"| apparat [us] | A technical device thingy , carried/worm by a human, for use for a particular purpose or activity. An apparatus should have access to the puff . The human version of a sensor . Example: geiger counter, multi-meter; a handheld device See also: sensor | apparat","title":"Apparatus (object)"},{"location":"physic/obj/applian/","text":"Appliance (object) | appliance | A device or piece of equipment thingy designed to perform a specific task, that is not attached / carried / worm by a human. An apparatus can or cannot have access to the puff . The human version of a mach [ine]. Example: refrigerator, washing machine See also: mach | appliance type operator description API {blender} blender blender {fridge} {refrigerator} {freezer} {fridge_freezer} fridge fridge {hairdrier} {hair_drier} hairdrier hairdrier {oven} oven oven {sink} sink sink {toaster} toaster toaster {microwave} {microwave_oven} microwave microwave Blender (type) Fridge (type) Hairdrier (type) Oven (type) Sink (type) Toaster (type) Microwave (type) Source: #544085 Coco Explorer","title":"Appliance (object)"},{"location":"physic/obj/applian/#appliance-object","text":"| appliance | A device or piece of equipment thingy designed to perform a specific task, that is not attached / carried / worm by a human. An apparatus can or cannot have access to the puff . The human version of a mach [ine]. Example: refrigerator, washing machine See also: mach | appliance type operator description API {blender} blender blender {fridge} {refrigerator} {freezer} {fridge_freezer} fridge fridge {hairdrier} {hair_drier} hairdrier hairdrier {oven} oven oven {sink} sink sink {toaster} toaster toaster {microwave} {microwave_oven} microwave microwave","title":"Appliance (object)"},{"location":"physic/obj/applian/#blender-type","text":"","title":"Blender (type)"},{"location":"physic/obj/applian/#fridge-type","text":"","title":"Fridge (type)"},{"location":"physic/obj/applian/#hairdrier-type","text":"","title":"Hairdrier (type)"},{"location":"physic/obj/applian/#oven-type","text":"","title":"Oven (type)"},{"location":"physic/obj/applian/#sink-type","text":"","title":"Sink (type)"},{"location":"physic/obj/applian/#toaster-type","text":"","title":"Toaster (type)"},{"location":"physic/obj/applian/#microwave-type","text":"Source: #544085 Coco Explorer","title":"Microwave (type)"},{"location":"physic/obj/battery/","text":"Battery The battery object represents any controllable battery contained within and/or managed by a thingy. Posits of a battery are inherited to the powersupply object, most usually when a battery becomes a/the power supply (temporary ot otherwise) of a thingy. Syntax The default declaration syntax is to provide at least the battery name. The shortened version is batt . The _type can be added at declaration or after declaration: add_battery( moniker ); add_batt( moniker ); add_batt( moniker )_type( type ); add_batt({ type }, moniker ); Multiple batteries can be added as batteries or as part of a bank of batteries (treated like a farm or array). Battery banks can be indexed: add_battery( moniker1 , moniker2,... ); add_bank( moniker )_battery( moniker1 , moniker2,... )_index( index-form , base ); add_bank( moniker )_batt_({ type }, moniker1 , moniker2,... ) Each battery is implied to have one default associated charge (one charger per battery), it is, therefore, not neccessary to declare or named, by can be: add_battery( moniker )_charger(); add_batt( moniker )_charger( moniker ); Any declaration/creation/serialisation on battery (s) can be undertaken by thingies themselves ( i.e. using me() ), by another authority on to the target thingy, or, as depiction of another thingy. Properties property access notes _charger()_algorithm(algorithm) _charger()_algor(algorithm) _charger()_algo(algorithm) read (write by me) Charging Algorithm The charging algorithm, if known, that the charger using. The charger postposit is implied with every battery. The _algorithm / algor / algo postposit is implied to be a child of charger . See Algorithm Values _fettle() _fettle()_enum() read (write by human) Battery Fettle A human observation of the state of appearance of the battery. See Fettle Values _health() _health()_enum() read only Battery Health The battery health, as defined within the battery logic. It will display a string as default, unless the _enum() postposit is provided then it will provide a integer enumerator. See Health Values _stat() _status() _stat()_enum() _status()_enum() read only Battery Status The battery status, as defined within the battery logic. It will display a string as default, unless the _enum() postposit is provided then it will provide a integer enumerator. See Status Values _tech( technology ) _technology( technology ) _chem( technology ) _chemistry( technology ) ... _enum() read (write by me) Battery Technology The technology (or chemistry) composition of the battery. This is usually defined at declaration. It will display a string as default, unless the _enum() postposit is provided then it will provide a integer enumerator. This can only be set/changed by me . See Technology Values Algorithm Values algorithm enum notes unknown , error -1 unknown null 0 no charge/unknown none , no-charge 1 no charge trickle , slow 2 Trickle charge, slow speed fast 3 fast charge norm , normal , standard 4 normal speed charge adaptive , adpt 5 adaptive charge, dynamically adjusted speed custom 6 custom charge algorithm long , longlife , long-life 7 slow speed, longer life charge algorithm Fettle Values fettle enum notes unknown , error -1 null , not checked 0 good 1 ok 2 bad-condition 3 deteriorated 4 Health Values health enum notes unknown , error -1 unknown null 0 good 1 good overheat 2 overheat dead 3 dead overvoltage , overvolt 4 unknown unspec , unspec-failure 5 cold 6 watchdog , watchdog-expire , watchdog-timer 7 safety , safety-expire , safety-timer 8 Status Values stat , status enum notes unknown , error -1 unknown null , no , none 0 null state charging 1 charging discharging 2 discharging not charging , no , none 0 not charging full 4 full Technology Values technology enum notes unknown -1 Unknown or not specified battery technology. Question target thingy with ask_ . null 0 No available property for battery technology. Check to see if battery exists (use _exists() ). NiMH , Ni\u2013MH , nimh 1 Nickel metal hydride battery. Li-ion , lion 2 Lithium cobaltate (lithium-ion cobalt) battery. LiPo , lipo 3 Lithium polymer battery (lithium-ion polymer) battery. LiFE , LiFEPO , life 4 Lithium iron phosphate battery. NiCad , Ni-Cd , nicd 5 Nickel\u2013cadmium battery. LMO , LiMO , limo 6 Lithium ion manganese oxide battery. Metrics metric notes _volt( voltage ) , _voltage( voltage ) _volt()_value( voltage ) , _voltage()_value( voltage ) The voltage of the battery charge in volts (V). If the thingy is intent on using another measurement then _unit must be supplied with intra-thingy communication. Variable assignment is available, using posits such as _tovar etc. See also voltage limits . metric notes _volt( voltage-state ) , _voltage( voltage-state ) Voltage state _volt( voltage-state )_value( voltage ) , _voltage( voltage-state )_value( voltage ) _volt( voltage )_limit( voltage-state ) , _voltage( voltage )_limit( voltage-state ) _volt()_limit(max)_value( voltage ) , _voltage()_limit(max)_value( voltage ) | _volt( [voltage-state] )_value( voltage ) , _voltage( [voltage-state] )_value( voltage ) | Voltage status with value (in volts) | | _volt( [voltage-state] )_value( voltage ) , _voltage( [voltage-state] ) | Voltage value (in volts) | Examples: robot alpha , beta // Robot `alpha` asks robot `beta` for its battery temperature ask_robot(beta)_battery(b1)_temp(); tell_robot(alpha)_battery(b1)_temp(23.3); // Robot `alpha` asks robot `beta` for its max battery temperature in the last 30 minutes ask_robot(beta)_battery(b1)_temp()_limit(max)_inlast(30, min); tell_robot(alpha)_battery(b1)_temp(23.3)_limit(max)_inlast(30, min)_datetime(2021-10-09 13:06:21.402); add_bank(bat-array)_battery(b1, b2, b3, b4)_index(0)_chem(nimh); with_robot(beta)_bank(bat-array); with_robot(beta)_battery(b2)_volt()_limit(maxdesign)_value(5.00); _ Limits Alerts Voltage (VBAT) syntax _volt( voltage-state ) , _voltage( voltage-state ) Voltage state request. _volt( voltage-state )_value( voltage ) , _voltage( voltage-state )_value( voltage ) _volt( voltage )_limit( voltage-state ) , _voltage( voltage )_limit( voltage-state ) _volt()_limit(max)_value( voltage ) , _voltage()_limit(max)_value( voltage ) Voltage state response. voltage-state max Reports the maximum VBAT voltage permitted for the battery, during charging. min Reports the minimum VBAT voltage permitted for the battery, during discharging. maxdes , maxdesign Reports the designed maximum safe VBAT voltage permitted for the battery, during charging. mindes , mindesign Reports the designed minimum safe VBAT voltage permitted for the battery, during discharging. now Reports an instant, single VBAT voltage reading for the battery. This value is not averaged/smoothed. ocv The 'Open Circuit Voltage' of the battery. fettle health() // Stats: | posit | | | --- | --- | This property can be used for platform shutdown policies and can be useful for initial capacity estimations. | | max | maximum voltage | POWER_SUPPLY_PROP_VOLTAGE_MAX, POWER_SUPPLY_PROP_VOLTAGE_MIN, POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN, POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN, POWER_SUPPLY_PROP_VOLTAGE_NOW, POWER_SUPPLY_PROP_VOLTAGE_AVG, POWER_SUPPLY_PROP_VOLTAGE_OCV, POWER_SUPPLY_PROP_VOLTAGE_BOOT, | _temp( temperature ) , _temperature( temperature ) | Temperature in Degrees Celsius or _unit() | | _current | Negative when discharging in Amps (A) or _unit() | | _charge _ah() | Current charge in Ah | int ocv_temp[POWER_SUPPLY_OCV_TEMP_MAX];/* celsius */ int temp_ambient_alert_min; /* celsius */ int temp_ambient_alert_max; /* celsius */ int temp_alert_min; /* celsius */ int temp_alert_max; /* celsius */ int temp_min; /* celsius */ int temp_max; /* celsius */ struct power_supply_resistance_temp_table { int temp; /* celsius */ int resistance; /* internal resistance percent */ `_temp(`*`)_level(`-`temperature-level`*`)_value(`*`temperature-value`*`)` _temp() | `temperature-level` | | | `max` | maximum _temp()_level(max) with_battery(ba1)_temp()_level(max) begin_battery(ba1)_temp()_level(max) // Do something when the temperature of the battery gets to max end_battery(ba1)_temp()_level(max) POWER_SUPPLY_PROP_TEMP, POWER_SUPPLY_PROP_TEMP_MAX, POWER_SUPPLY_PROP_TEMP_MIN, POWER_SUPPLY_PROP_TEMP_ALERT_MIN, POWER_SUPPLY_PROP_TEMP_ALERT_MAX, POWER_SUPPLY_PROP_TEMP_AMBIENT, POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MIN, POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MAX, }; define POWER_SUPPLY_OCV_TEMP_MAX 20 struct power_supply_battery_ocv_table *ocv_table[POWER_SUPPLY_OCV_TEMP_MAX]; int ocv_table_size[POWER_SUPPLY_OCV_TEMP_MAX]; struct power_supply_resistance_temp_table *resist_table; | _cap , _capacity | Capacity in Ah (last full capacity) | | _capdes() , _capacitydesign() | Capacity in Ah (design capacity) | | `_float32 percentage # Charge percentage on 0 to 1 range (If unmeasured NaN) uint8 power_supply_status # The charging status as reported. Values defined above uint8 power_supply_health # The battery health metric. Values defined above uint8 power_supply_technology # The battery chemistry. Values defined above bool present # True if the battery is present )_voltage()_temp() Constants are chosen to match the enums in the linux kernel defined in include/linux/power_supply.h as of version 3.7 The one difference is for style reasons the constants are all uppercase not mixed case. std_msgs/Header header float32 voltage # Voltage in Volts (Mandatory) float32 temperature # Temperature in Degrees Celsius (If unmeasured NaN) float32 current # Negative when discharging (A) (If unmeasured NaN) float32 charge # Current charge in Ah (If unmeasured NaN) float32 capacity # Capacity in Ah (last full capacity) (If unmeasured NaN) float32 design_capacity # Capacity in Ah (design capacity) (If unmeasured NaN) float32 percentage # Charge percentage on 0 to 1 range (If unmeasured NaN) uint8 power_supply_status # The charging status as reported. Values defined above uint8 power_supply_health # . Values defined above uint8 power_supply_technology # The battery chemistry. Values defined above bool present # True if the battery is present float32[] cell_voltage # An array of individual cell voltages for each cell in the pack # If individual voltages unknown but number of cells known set each to NaN float32[] cell_temperature # An array of individual cell temperatures for each cell in the pack # If individual temperatures unknown but number of cells known set each to NaN string location # The location into which the battery is inserted. (slot number or plug) string serial_number # The best approximation of the battery serial number / SPDX-License-Identifier: GPL-2.0-only / / * Universal power supply monitor class * * Copyright \u00a9 2007 Anton Vorontsov cbou@mail.ru * Copyright \u00a9 2004 Szabolcs Gyurko * Copyright \u00a9 2003 Ian Molton spyro@f2s.com * * Modified: 2004, Oct Szabolcs Gyurko / ifndef LINUX_POWER_SUPPLY_H define LINUX_POWER_SUPPLY_H include include include include include / * All voltages, currents, charges, energies, time and temperatures in uV, * \u00b5A, \u00b5Ah, \u00b5Wh, seconds and tenths of degree Celsius unless otherwise * stated. It's driver's job to convert its raw values to units in which * this class operates. / enum { POWER_SUPPLY_HEALTH_UNKNOWN = 0, POWER_SUPPLY_HEALTH_GOOD, POWER_SUPPLY_HEALTH_OVERHEAT, POWER_SUPPLY_HEALTH_DEAD, POWER_SUPPLY_HEALTH_OVERVOLTAGE, POWER_SUPPLY_HEALTH_UNSPEC_FAILURE, POWER_SUPPLY_HEALTH_COLD, POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE, POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE, POWER_SUPPLY_HEALTH_OVERCURRENT, POWER_SUPPLY_HEALTH_CALIBRATION_REQUIRED, POWER_SUPPLY_HEALTH_WARM, POWER_SUPPLY_HEALTH_COOL, POWER_SUPPLY_HEALTH_HOT, }; enum { POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0, POWER_SUPPLY_TECHNOLOGY_NiMH, POWER_SUPPLY_TECHNOLOGY_LION, POWER_SUPPLY_TECHNOLOGY_LIPO, POWER_SUPPLY_TECHNOLOGY_LiFe, POWER_SUPPLY_TECHNOLOGY_NiCd, POWER_SUPPLY_TECHNOLOGY_LiMn, }; _cap()_level() enum { POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN = 0, POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL, POWER_SUPPLY_CAPACITY_LEVEL_LOW, POWER_SUPPLY_CAPACITY_LEVEL_NORMAL, POWER_SUPPLY_CAPACITY_LEVEL_HIGH, POWER_SUPPLY_CAPACITY_LEVEL_FULL, }; enum { POWER_SUPPLY_SCOPE_UNKNOWN = 0, POWER_SUPPLY_SCOPE_SYSTEM, POWER_SUPPLY_SCOPE_DEVICE, }; enum power_supply_property { / Properties of type `int' / POWER_SUPPLY_PROP_STATUS = 0, POWER_SUPPLY_PROP_CHARGE_TYPE, POWER_SUPPLY_PROP_HEALTH, POWER_SUPPLY_PROP_PRESENT, POWER_SUPPLY_PROP_ONLINE, POWER_SUPPLY_PROP_AUTHENTIC, POWER_SUPPLY_PROP_TECHNOLOGY, POWER_SUPPLY_PROP_CYCLE_COUNT, POWER_SUPPLY_PROP_CURRENT_MAX, POWER_SUPPLY_PROP_CURRENT_NOW, POWER_SUPPLY_PROP_CURRENT_AVG, POWER_SUPPLY_PROP_CURRENT_BOOT, POWER_SUPPLY_PROP_POWER_NOW, POWER_SUPPLY_PROP_POWER_AVG, POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN, POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN, POWER_SUPPLY_PROP_CHARGE_FULL, POWER_SUPPLY_PROP_CHARGE_EMPTY, POWER_SUPPLY_PROP_CHARGE_NOW, POWER_SUPPLY_PROP_CHARGE_AVG, POWER_SUPPLY_PROP_CHARGE_COUNTER, POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT, POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX, POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE, POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX, POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT, POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX, POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD, /* in percents! */ POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD, /* in percents! */ POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT, POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT, POWER_SUPPLY_PROP_INPUT_POWER_LIMIT, POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN, POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN, POWER_SUPPLY_PROP_ENERGY_FULL, POWER_SUPPLY_PROP_ENERGY_EMPTY, POWER_SUPPLY_PROP_ENERGY_NOW, POWER_SUPPLY_PROP_ENERGY_AVG, POWER_SUPPLY_PROP_CAPACITY, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_ALERT_MIN, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_ALERT_MAX, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_ERROR_MARGIN, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_LEVEL, POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW, POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG, POWER_SUPPLY_PROP_TIME_TO_FULL_NOW, POWER_SUPPLY_PROP_TIME_TO_FULL_AVG, POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */ POWER_SUPPLY_PROP_USB_TYPE, POWER_SUPPLY_PROP_SCOPE, POWER_SUPPLY_PROP_PRECHARGE_CURRENT, POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT, POWER_SUPPLY_PROP_CALIBRATE, POWER_SUPPLY_PROP_MANUFACTURE_YEAR, POWER_SUPPLY_PROP_MANUFACTURE_MONTH, POWER_SUPPLY_PROP_MANUFACTURE_DAY, /* Properties of type `const char *' */ POWER_SUPPLY_PROP_MODEL_NAME, POWER_SUPPLY_PROP_MANUFACTURER, POWER_SUPPLY_PROP_SERIAL_NUMBER, }; enum power_supply_type { POWER_SUPPLY_TYPE_UNKNOWN = 0, POWER_SUPPLY_TYPE_BATTERY, POWER_SUPPLY_TYPE_UPS, POWER_SUPPLY_TYPE_MAINS, POWER_SUPPLY_TYPE_USB, / Standard Downstream Port / POWER_SUPPLY_TYPE_USB_DCP, / Dedicated Charging Port / POWER_SUPPLY_TYPE_USB_CDP, / Charging Downstream Port / POWER_SUPPLY_TYPE_USB_ACA, / Accessory Charger Adapters / POWER_SUPPLY_TYPE_USB_TYPE_C, / Type C Port / POWER_SUPPLY_TYPE_USB_PD, / Power Delivery Port / POWER_SUPPLY_TYPE_USB_PD_DRP, / PD Dual Role Port / POWER_SUPPLY_TYPE_APPLE_BRICK_ID, / Apple Charging Method / POWER_SUPPLY_TYPE_WIRELESS, / Wireless / }; enum power_supply_usb_type { POWER_SUPPLY_USB_TYPE_UNKNOWN = 0, POWER_SUPPLY_USB_TYPE_SDP, / Standard Downstream Port / POWER_SUPPLY_USB_TYPE_DCP, / Dedicated Charging Port / POWER_SUPPLY_USB_TYPE_CDP, / Charging Downstream Port / POWER_SUPPLY_USB_TYPE_ACA, / Accessory Charger Adapters / POWER_SUPPLY_USB_TYPE_C, / Type C Port / POWER_SUPPLY_USB_TYPE_PD, / Power Delivery Port / POWER_SUPPLY_USB_TYPE_PD_DRP, / PD Dual Role Port / POWER_SUPPLY_USB_TYPE_PD_PPS, / PD Programmable Power Supply / POWER_SUPPLY_USB_TYPE_APPLE_BRICK_ID, / Apple Charging Method / }; enum power_supply_notifier_events { PSY_EVENT_PROP_CHANGED, }; union power_supply_propval { int intval; const char *strval; }; struct device_node; struct power_supply; / Run-time specific power supply configuration / struct power_supply_config { struct device_node of_node; struct fwnode_handle fwnode; /* Driver private data */ void *drv_data; /* Device specific sysfs attributes */ const struct attribute_group **attr_grp; char **supplied_to; size_t num_supplicants; }; / Description of power supply / struct power_supply_desc { const char name; enum power_supply_type type; const enum power_supply_usb_type usb_types; size_t num_usb_types; const enum power_supply_property *properties; size_t num_properties; /* * Functions for drivers implementing power supply class. * These shouldn't be called directly by other drivers for accessing * this power supply. Instead use power_supply_*() functions (for * example power_supply_get_property()). */ int (*get_property)(struct power_supply *psy, enum power_supply_property psp, union power_supply_propval *val); int (*set_property)(struct power_supply *psy, enum power_supply_property psp, const union power_supply_propval *val); /* * property_is_writeable() will be called during registration * of power supply. If this happens during device probe then it must * not access internal data of device (because probe did not end). */ int (*property_is_writeable)(struct power_supply *psy, enum power_supply_property psp); void (*external_power_changed)(struct power_supply *psy); void (*set_charged)(struct power_supply *psy); /* * Set if thermal zone should not be created for this power supply. * For example for virtual supplies forwarding calls to actual * sensors or other supplies. */ bool no_thermal; /* For APM emulation, think legacy userspace. */ int use_for_apm; }; struct power_supply { const struct power_supply_desc *desc; char **supplied_to; size_t num_supplicants; char **supplied_from; size_t num_supplies; struct device_node *of_node; /* Driver private data */ void *drv_data; /* private */ struct device dev; struct work_struct changed_work; struct delayed_work deferred_register_work; spinlock_t changed_lock; bool changed; bool initialized; bool removing; atomic_t use_cnt; ifdef CONFIG_THERMAL struct thermal_zone_device *tzd; struct thermal_cooling_device *tcd; endif ifdef CONFIG_LEDS_TRIGGERS struct led_trigger *charging_full_trig; char *charging_full_trig_name; struct led_trigger *charging_trig; char *charging_trig_name; struct led_trigger *full_trig; char *full_trig_name; struct led_trigger *online_trig; char *online_trig_name; struct led_trigger *charging_blink_full_solid_trig; char *charging_blink_full_solid_trig_name; endif }; / * This is recommended structure to specify static power supply parameters. * Generic one, parametrizable for different power supplies. Power supply * class itself does not use it, but that's what implementing most platform * drivers, should try reuse for consistency. / struct power_supply_info { const char *name; int technology; int voltage_max_design; int voltage_min_design; int charge_full_design; int charge_empty_design; int energy_full_design; int energy_empty_design; int use_for_apm; }; struct power_supply_battery_ocv_table { int ocv; / microVolts / int capacity; / percent / }; / * This is the recommended struct to manage static battery parameters, * populated by power_supply_get_battery_info(). Most platform drivers should * use these for consistency. * Its field names must correspond to elements in enum power_supply_property. * The default field value is -EINVAL. * Power supply class itself doesn't use this. / struct power_supply_battery_info { int energy_full_design_uwh; / microWatt-hours / int charge_full_design_uah; / microAmp-hours / int voltage_min_design_uv; / microVolts / int voltage_max_design_uv; / microVolts / int tricklecharge_current_ua; / microAmps / int precharge_current_ua; / microAmps / int precharge_voltage_max_uv; / microVolts / int charge_term_current_ua; / microAmps / int charge_restart_voltage_uv; / microVolts / int overvoltage_limit_uv; / microVolts / int constant_charge_current_max_ua; / microAmps / int constant_charge_voltage_max_uv; / microVolts / int factory_internal_resistance_uohm; / microOhms / int resist_table_size; }; extern struct atomic_notifier_head power_supply_notifier; extern int power_supply_reg_notifier(struct notifier_block nb); extern void power_supply_unreg_notifier(struct notifier_block nb); if IS_ENABLED(CONFIG_POWER_SUPPLY) extern struct power_supply power_supply_get_by_name(const char name); extern void power_supply_put(struct power_supply *psy); else static inline void power_supply_put(struct power_supply psy) {} static inline struct power_supply power_supply_get_by_name(const char *name) endif ifdef CONFIG_OF extern struct power_supply power_supply_get_by_phandle(struct device_node np, const char property); extern struct power_supply devm_power_supply_get_by_phandle( struct device dev, const char property); else / !CONFIG_OF / static inline struct power_supply * power_supply_get_by_phandle(struct device_node np, const char property) { return NULL; } static inline struct power_supply * devm_power_supply_get_by_phandle(struct device dev, const char property) endif / CONFIG_OF / extern int power_supply_get_battery_info(struct power_supply psy, struct power_supply_battery_info info); extern void power_supply_put_battery_info(struct power_supply psy, struct power_supply_battery_info info); extern int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table table, int table_len, int ocv); extern struct power_supply_battery_ocv_table * power_supply_find_ocv2cap_table(struct power_supply_battery_info info, int temp, int table_len); extern int power_supply_batinfo_ocv2cap(struct power_supply_battery_info info, int ocv, int temp); extern int power_supply_temp2resist_simple(struct power_supply_resistance_temp_table table, int table_len, int temp); extern void power_supply_changed(struct power_supply psy); extern int power_supply_am_i_supplied(struct power_supply psy); extern int power_supply_set_input_current_limit_from_supplier( struct power_supply psy); extern int power_supply_set_battery_charged(struct power_supply *psy); ifdef CONFIG_POWER_SUPPLY extern int power_supply_is_system_supplied(void); else static inline int power_supply_is_system_supplied(void) { return -ENOSYS; } endif extern int power_supply_get_property(struct power_supply psy, enum power_supply_property psp, union power_supply_propval val); if IS_ENABLED(CONFIG_POWER_SUPPLY) extern int power_supply_set_property(struct power_supply psy, enum power_supply_property psp, const union power_supply_propval val); else static inline int power_supply_set_property(struct power_supply psy, enum power_supply_property psp, const union power_supply_propval val) endif extern int power_supply_property_is_writeable(struct power_supply psy, enum power_supply_property psp); extern void power_supply_external_power_changed(struct power_supply psy); extern struct power_supply __must_check power_supply_register(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern struct power_supply __must_check power_supply_register_no_ws(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern struct power_supply __must_check devm_power_supply_register(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern struct power_supply __must_check devm_power_supply_register_no_ws(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern void power_supply_unregister(struct power_supply psy); extern int power_supply_powers(struct power_supply psy, struct device *dev); define to_power_supply(device) container_of(device, struct power_supply, dev) extern void power_supply_get_drvdata(struct power_supply psy); / For APM emulation, think legacy userspace. / extern struct class *power_supply_class; static inline bool power_supply_is_amp_property(enum power_supply_property psp) { switch (psp) { case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN: case POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN: case POWER_SUPPLY_PROP_CHARGE_FULL: case POWER_SUPPLY_PROP_CHARGE_EMPTY: case POWER_SUPPLY_PROP_CHARGE_NOW: case POWER_SUPPLY_PROP_CHARGE_AVG: case POWER_SUPPLY_PROP_CHARGE_COUNTER: case POWER_SUPPLY_PROP_PRECHARGE_CURRENT: case POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX: case POWER_SUPPLY_PROP_CURRENT_MAX: case POWER_SUPPLY_PROP_CURRENT_NOW: case POWER_SUPPLY_PROP_CURRENT_AVG: case POWER_SUPPLY_PROP_CURRENT_BOOT: return true; default: break; } return false; } static inline bool power_supply_is_watt_property(enum power_supply_property psp) { switch (psp) { case POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN: case POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN: case POWER_SUPPLY_PROP_ENERGY_FULL: case POWER_SUPPLY_PROP_ENERGY_EMPTY: case POWER_SUPPLY_PROP_ENERGY_NOW: case POWER_SUPPLY_PROP_ENERGY_AVG: case POWER_SUPPLY_PROP_VOLTAGE_MAX: case POWER_SUPPLY_PROP_VOLTAGE_MIN: case POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN: case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN: case POWER_SUPPLY_PROP_VOLTAGE_NOW: case POWER_SUPPLY_PROP_VOLTAGE_AVG: case POWER_SUPPLY_PROP_VOLTAGE_OCV: case POWER_SUPPLY_PROP_VOLTAGE_BOOT: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX: case POWER_SUPPLY_PROP_POWER_NOW: return true; default: break; } return false; } ifdef CONFIG_POWER_SUPPLY_HWMON int power_supply_add_hwmon_sysfs(struct power_supply psy); void power_supply_remove_hwmon_sysfs(struct power_supply psy); else static inline int power_supply_add_hwmon_sysfs(struct power_supply *psy) { return 0; } static inline void power_supply_remove_hwmon_sysfs(struct power_supply *psy) {} endif endif / LINUX_POWER_SUPPLY_H / / * For systems where the charger determines the maximum battery capacity * the min and max fields should be used to present these values to user * space. Unused/unknown fields will not appear in sysfs. /","title":"Battery"},{"location":"physic/obj/battery/#battery","text":"The battery object represents any controllable battery contained within and/or managed by a thingy. Posits of a battery are inherited to the powersupply object, most usually when a battery becomes a/the power supply (temporary ot otherwise) of a thingy.","title":"Battery"},{"location":"physic/obj/battery/#syntax","text":"The default declaration syntax is to provide at least the battery name. The shortened version is batt . The _type can be added at declaration or after declaration: add_battery( moniker ); add_batt( moniker ); add_batt( moniker )_type( type ); add_batt({ type }, moniker ); Multiple batteries can be added as batteries or as part of a bank of batteries (treated like a farm or array). Battery banks can be indexed: add_battery( moniker1 , moniker2,... ); add_bank( moniker )_battery( moniker1 , moniker2,... )_index( index-form , base ); add_bank( moniker )_batt_({ type }, moniker1 , moniker2,... ) Each battery is implied to have one default associated charge (one charger per battery), it is, therefore, not neccessary to declare or named, by can be: add_battery( moniker )_charger(); add_batt( moniker )_charger( moniker ); Any declaration/creation/serialisation on battery (s) can be undertaken by thingies themselves ( i.e. using me() ), by another authority on to the target thingy, or, as depiction of another thingy.","title":"Syntax"},{"location":"physic/obj/battery/#properties","text":"property access notes _charger()_algorithm(algorithm) _charger()_algor(algorithm) _charger()_algo(algorithm) read (write by me) Charging Algorithm The charging algorithm, if known, that the charger using. The charger postposit is implied with every battery. The _algorithm / algor / algo postposit is implied to be a child of charger . See Algorithm Values _fettle() _fettle()_enum() read (write by human) Battery Fettle A human observation of the state of appearance of the battery. See Fettle Values _health() _health()_enum() read only Battery Health The battery health, as defined within the battery logic. It will display a string as default, unless the _enum() postposit is provided then it will provide a integer enumerator. See Health Values _stat() _status() _stat()_enum() _status()_enum() read only Battery Status The battery status, as defined within the battery logic. It will display a string as default, unless the _enum() postposit is provided then it will provide a integer enumerator. See Status Values _tech( technology ) _technology( technology ) _chem( technology ) _chemistry( technology ) ... _enum() read (write by me) Battery Technology The technology (or chemistry) composition of the battery. This is usually defined at declaration. It will display a string as default, unless the _enum() postposit is provided then it will provide a integer enumerator. This can only be set/changed by me . See Technology Values","title":"Properties"},{"location":"physic/obj/battery/#algorithm-values","text":"algorithm enum notes unknown , error -1 unknown null 0 no charge/unknown none , no-charge 1 no charge trickle , slow 2 Trickle charge, slow speed fast 3 fast charge norm , normal , standard 4 normal speed charge adaptive , adpt 5 adaptive charge, dynamically adjusted speed custom 6 custom charge algorithm long , longlife , long-life 7 slow speed, longer life charge algorithm","title":"Algorithm Values"},{"location":"physic/obj/battery/#fettle-values","text":"fettle enum notes unknown , error -1 null , not checked 0 good 1 ok 2 bad-condition 3 deteriorated 4","title":"Fettle Values"},{"location":"physic/obj/battery/#health-values","text":"health enum notes unknown , error -1 unknown null 0 good 1 good overheat 2 overheat dead 3 dead overvoltage , overvolt 4 unknown unspec , unspec-failure 5 cold 6 watchdog , watchdog-expire , watchdog-timer 7 safety , safety-expire , safety-timer 8","title":"Health Values"},{"location":"physic/obj/battery/#status-values","text":"stat , status enum notes unknown , error -1 unknown null , no , none 0 null state charging 1 charging discharging 2 discharging not charging , no , none 0 not charging full 4 full","title":"Status Values"},{"location":"physic/obj/battery/#technology-values","text":"technology enum notes unknown -1 Unknown or not specified battery technology. Question target thingy with ask_ . null 0 No available property for battery technology. Check to see if battery exists (use _exists() ). NiMH , Ni\u2013MH , nimh 1 Nickel metal hydride battery. Li-ion , lion 2 Lithium cobaltate (lithium-ion cobalt) battery. LiPo , lipo 3 Lithium polymer battery (lithium-ion polymer) battery. LiFE , LiFEPO , life 4 Lithium iron phosphate battery. NiCad , Ni-Cd , nicd 5 Nickel\u2013cadmium battery. LMO , LiMO , limo 6 Lithium ion manganese oxide battery.","title":"Technology Values"},{"location":"physic/obj/battery/#metrics","text":"metric notes _volt( voltage ) , _voltage( voltage ) _volt()_value( voltage ) , _voltage()_value( voltage ) The voltage of the battery charge in volts (V). If the thingy is intent on using another measurement then _unit must be supplied with intra-thingy communication. Variable assignment is available, using posits such as _tovar etc. See also voltage limits . metric notes _volt( voltage-state ) , _voltage( voltage-state ) Voltage state _volt( voltage-state )_value( voltage ) , _voltage( voltage-state )_value( voltage ) _volt( voltage )_limit( voltage-state ) , _voltage( voltage )_limit( voltage-state ) _volt()_limit(max)_value( voltage ) , _voltage()_limit(max)_value( voltage ) | _volt( [voltage-state] )_value( voltage ) , _voltage( [voltage-state] )_value( voltage ) | Voltage status with value (in volts) | | _volt( [voltage-state] )_value( voltage ) , _voltage( [voltage-state] ) | Voltage value (in volts) | Examples: robot alpha , beta // Robot `alpha` asks robot `beta` for its battery temperature ask_robot(beta)_battery(b1)_temp(); tell_robot(alpha)_battery(b1)_temp(23.3); // Robot `alpha` asks robot `beta` for its max battery temperature in the last 30 minutes ask_robot(beta)_battery(b1)_temp()_limit(max)_inlast(30, min); tell_robot(alpha)_battery(b1)_temp(23.3)_limit(max)_inlast(30, min)_datetime(2021-10-09 13:06:21.402); add_bank(bat-array)_battery(b1, b2, b3, b4)_index(0)_chem(nimh); with_robot(beta)_bank(bat-array); with_robot(beta)_battery(b2)_volt()_limit(maxdesign)_value(5.00); _","title":"Metrics"},{"location":"physic/obj/battery/#limits","text":"","title":"Limits"},{"location":"physic/obj/battery/#alerts","text":"","title":"Alerts"},{"location":"physic/obj/battery/#voltage-vbat","text":"syntax _volt( voltage-state ) , _voltage( voltage-state ) Voltage state request. _volt( voltage-state )_value( voltage ) , _voltage( voltage-state )_value( voltage ) _volt( voltage )_limit( voltage-state ) , _voltage( voltage )_limit( voltage-state ) _volt()_limit(max)_value( voltage ) , _voltage()_limit(max)_value( voltage ) Voltage state response. voltage-state max Reports the maximum VBAT voltage permitted for the battery, during charging. min Reports the minimum VBAT voltage permitted for the battery, during discharging. maxdes , maxdesign Reports the designed maximum safe VBAT voltage permitted for the battery, during charging. mindes , mindesign Reports the designed minimum safe VBAT voltage permitted for the battery, during discharging. now Reports an instant, single VBAT voltage reading for the battery. This value is not averaged/smoothed. ocv The 'Open Circuit Voltage' of the battery. fettle health() // Stats: | posit | | | --- | --- | This property can be used for platform shutdown policies and can be useful for initial capacity estimations. | | max | maximum voltage | POWER_SUPPLY_PROP_VOLTAGE_MAX, POWER_SUPPLY_PROP_VOLTAGE_MIN, POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN, POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN, POWER_SUPPLY_PROP_VOLTAGE_NOW, POWER_SUPPLY_PROP_VOLTAGE_AVG, POWER_SUPPLY_PROP_VOLTAGE_OCV, POWER_SUPPLY_PROP_VOLTAGE_BOOT, | _temp( temperature ) , _temperature( temperature ) | Temperature in Degrees Celsius or _unit() | | _current | Negative when discharging in Amps (A) or _unit() | | _charge _ah() | Current charge in Ah | int ocv_temp[POWER_SUPPLY_OCV_TEMP_MAX];/* celsius */ int temp_ambient_alert_min; /* celsius */ int temp_ambient_alert_max; /* celsius */ int temp_alert_min; /* celsius */ int temp_alert_max; /* celsius */ int temp_min; /* celsius */ int temp_max; /* celsius */ struct power_supply_resistance_temp_table { int temp; /* celsius */ int resistance; /* internal resistance percent */ `_temp(`*`)_level(`-`temperature-level`*`)_value(`*`temperature-value`*`)` _temp() | `temperature-level` | | | `max` | maximum _temp()_level(max) with_battery(ba1)_temp()_level(max) begin_battery(ba1)_temp()_level(max) // Do something when the temperature of the battery gets to max end_battery(ba1)_temp()_level(max) POWER_SUPPLY_PROP_TEMP, POWER_SUPPLY_PROP_TEMP_MAX, POWER_SUPPLY_PROP_TEMP_MIN, POWER_SUPPLY_PROP_TEMP_ALERT_MIN, POWER_SUPPLY_PROP_TEMP_ALERT_MAX, POWER_SUPPLY_PROP_TEMP_AMBIENT, POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MIN, POWER_SUPPLY_PROP_TEMP_AMBIENT_ALERT_MAX, };","title":"Voltage (VBAT)"},{"location":"physic/obj/battery/#define-power_supply_ocv_temp_max-20","text":"struct power_supply_battery_ocv_table *ocv_table[POWER_SUPPLY_OCV_TEMP_MAX]; int ocv_table_size[POWER_SUPPLY_OCV_TEMP_MAX]; struct power_supply_resistance_temp_table *resist_table; | _cap , _capacity | Capacity in Ah (last full capacity) | | _capdes() , _capacitydesign() | Capacity in Ah (design capacity) | | `_float32 percentage # Charge percentage on 0 to 1 range (If unmeasured NaN) uint8 power_supply_status # The charging status as reported. Values defined above uint8 power_supply_health # The battery health metric. Values defined above uint8 power_supply_technology # The battery chemistry. Values defined above bool present # True if the battery is present )_voltage()_temp()","title":"define POWER_SUPPLY_OCV_TEMP_MAX 20"},{"location":"physic/obj/battery/#constants-are-chosen-to-match-the-enums-in-the-linux-kernel","text":"","title":"Constants are chosen to match the enums in the linux kernel"},{"location":"physic/obj/battery/#defined-in-includelinuxpower_supplyh-as-of-version-37","text":"","title":"defined in include/linux/power_supply.h as of version 3.7"},{"location":"physic/obj/battery/#the-one-difference-is-for-style-reasons-the-constants-are","text":"","title":"The one difference is for style reasons the constants are"},{"location":"physic/obj/battery/#all-uppercase-not-mixed-case","text":"std_msgs/Header header float32 voltage # Voltage in Volts (Mandatory) float32 temperature # Temperature in Degrees Celsius (If unmeasured NaN) float32 current # Negative when discharging (A) (If unmeasured NaN) float32 charge # Current charge in Ah (If unmeasured NaN) float32 capacity # Capacity in Ah (last full capacity) (If unmeasured NaN) float32 design_capacity # Capacity in Ah (design capacity) (If unmeasured NaN) float32 percentage # Charge percentage on 0 to 1 range (If unmeasured NaN) uint8 power_supply_status # The charging status as reported. Values defined above uint8 power_supply_health # . Values defined above uint8 power_supply_technology # The battery chemistry. Values defined above bool present # True if the battery is present float32[] cell_voltage # An array of individual cell voltages for each cell in the pack # If individual voltages unknown but number of cells known set each to NaN float32[] cell_temperature # An array of individual cell temperatures for each cell in the pack # If individual temperatures unknown but number of cells known set each to NaN string location # The location into which the battery is inserted. (slot number or plug) string serial_number # The best approximation of the battery serial number / SPDX-License-Identifier: GPL-2.0-only / / * Universal power supply monitor class * * Copyright \u00a9 2007 Anton Vorontsov cbou@mail.ru * Copyright \u00a9 2004 Szabolcs Gyurko * Copyright \u00a9 2003 Ian Molton spyro@f2s.com * * Modified: 2004, Oct Szabolcs Gyurko /","title":"all uppercase not mixed case."},{"location":"physic/obj/battery/#ifndef-linux_power_supply_h","text":"","title":"ifndef LINUX_POWER_SUPPLY_H"},{"location":"physic/obj/battery/#define-linux_power_supply_h","text":"","title":"define LINUX_POWER_SUPPLY_H"},{"location":"physic/obj/battery/#include","text":"","title":"include "},{"location":"physic/obj/battery/#include_1","text":"","title":"include "},{"location":"physic/obj/battery/#include_2","text":"","title":"include "},{"location":"physic/obj/battery/#include_3","text":"","title":"include "},{"location":"physic/obj/battery/#include_4","text":"/ * All voltages, currents, charges, energies, time and temperatures in uV, * \u00b5A, \u00b5Ah, \u00b5Wh, seconds and tenths of degree Celsius unless otherwise * stated. It's driver's job to convert its raw values to units in which * this class operates. / enum { POWER_SUPPLY_HEALTH_UNKNOWN = 0, POWER_SUPPLY_HEALTH_GOOD, POWER_SUPPLY_HEALTH_OVERHEAT, POWER_SUPPLY_HEALTH_DEAD, POWER_SUPPLY_HEALTH_OVERVOLTAGE, POWER_SUPPLY_HEALTH_UNSPEC_FAILURE, POWER_SUPPLY_HEALTH_COLD, POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE, POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE, POWER_SUPPLY_HEALTH_OVERCURRENT, POWER_SUPPLY_HEALTH_CALIBRATION_REQUIRED, POWER_SUPPLY_HEALTH_WARM, POWER_SUPPLY_HEALTH_COOL, POWER_SUPPLY_HEALTH_HOT, }; enum { POWER_SUPPLY_TECHNOLOGY_UNKNOWN = 0, POWER_SUPPLY_TECHNOLOGY_NiMH, POWER_SUPPLY_TECHNOLOGY_LION, POWER_SUPPLY_TECHNOLOGY_LIPO, POWER_SUPPLY_TECHNOLOGY_LiFe, POWER_SUPPLY_TECHNOLOGY_NiCd, POWER_SUPPLY_TECHNOLOGY_LiMn, }; _cap()_level() enum { POWER_SUPPLY_CAPACITY_LEVEL_UNKNOWN = 0, POWER_SUPPLY_CAPACITY_LEVEL_CRITICAL, POWER_SUPPLY_CAPACITY_LEVEL_LOW, POWER_SUPPLY_CAPACITY_LEVEL_NORMAL, POWER_SUPPLY_CAPACITY_LEVEL_HIGH, POWER_SUPPLY_CAPACITY_LEVEL_FULL, }; enum { POWER_SUPPLY_SCOPE_UNKNOWN = 0, POWER_SUPPLY_SCOPE_SYSTEM, POWER_SUPPLY_SCOPE_DEVICE, }; enum power_supply_property { / Properties of type `int' / POWER_SUPPLY_PROP_STATUS = 0, POWER_SUPPLY_PROP_CHARGE_TYPE, POWER_SUPPLY_PROP_HEALTH, POWER_SUPPLY_PROP_PRESENT, POWER_SUPPLY_PROP_ONLINE, POWER_SUPPLY_PROP_AUTHENTIC, POWER_SUPPLY_PROP_TECHNOLOGY, POWER_SUPPLY_PROP_CYCLE_COUNT, POWER_SUPPLY_PROP_CURRENT_MAX, POWER_SUPPLY_PROP_CURRENT_NOW, POWER_SUPPLY_PROP_CURRENT_AVG, POWER_SUPPLY_PROP_CURRENT_BOOT, POWER_SUPPLY_PROP_POWER_NOW, POWER_SUPPLY_PROP_POWER_AVG, POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN, POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN, POWER_SUPPLY_PROP_CHARGE_FULL, POWER_SUPPLY_PROP_CHARGE_EMPTY, POWER_SUPPLY_PROP_CHARGE_NOW, POWER_SUPPLY_PROP_CHARGE_AVG, POWER_SUPPLY_PROP_CHARGE_COUNTER, POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT, POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX, POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE, POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX, POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT, POWER_SUPPLY_PROP_CHARGE_CONTROL_LIMIT_MAX, POWER_SUPPLY_PROP_CHARGE_CONTROL_START_THRESHOLD, /* in percents! */ POWER_SUPPLY_PROP_CHARGE_CONTROL_END_THRESHOLD, /* in percents! */ POWER_SUPPLY_PROP_INPUT_CURRENT_LIMIT, POWER_SUPPLY_PROP_INPUT_VOLTAGE_LIMIT, POWER_SUPPLY_PROP_INPUT_POWER_LIMIT, POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN, POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN, POWER_SUPPLY_PROP_ENERGY_FULL, POWER_SUPPLY_PROP_ENERGY_EMPTY, POWER_SUPPLY_PROP_ENERGY_NOW, POWER_SUPPLY_PROP_ENERGY_AVG, POWER_SUPPLY_PROP_CAPACITY, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_ALERT_MIN, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_ALERT_MAX, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_ERROR_MARGIN, /* in percents! */ POWER_SUPPLY_PROP_CAPACITY_LEVEL, POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW, POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG, POWER_SUPPLY_PROP_TIME_TO_FULL_NOW, POWER_SUPPLY_PROP_TIME_TO_FULL_AVG, POWER_SUPPLY_PROP_TYPE, /* use power_supply.type instead */ POWER_SUPPLY_PROP_USB_TYPE, POWER_SUPPLY_PROP_SCOPE, POWER_SUPPLY_PROP_PRECHARGE_CURRENT, POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT, POWER_SUPPLY_PROP_CALIBRATE, POWER_SUPPLY_PROP_MANUFACTURE_YEAR, POWER_SUPPLY_PROP_MANUFACTURE_MONTH, POWER_SUPPLY_PROP_MANUFACTURE_DAY, /* Properties of type `const char *' */ POWER_SUPPLY_PROP_MODEL_NAME, POWER_SUPPLY_PROP_MANUFACTURER, POWER_SUPPLY_PROP_SERIAL_NUMBER, }; enum power_supply_type { POWER_SUPPLY_TYPE_UNKNOWN = 0, POWER_SUPPLY_TYPE_BATTERY, POWER_SUPPLY_TYPE_UPS, POWER_SUPPLY_TYPE_MAINS, POWER_SUPPLY_TYPE_USB, / Standard Downstream Port / POWER_SUPPLY_TYPE_USB_DCP, / Dedicated Charging Port / POWER_SUPPLY_TYPE_USB_CDP, / Charging Downstream Port / POWER_SUPPLY_TYPE_USB_ACA, / Accessory Charger Adapters / POWER_SUPPLY_TYPE_USB_TYPE_C, / Type C Port / POWER_SUPPLY_TYPE_USB_PD, / Power Delivery Port / POWER_SUPPLY_TYPE_USB_PD_DRP, / PD Dual Role Port / POWER_SUPPLY_TYPE_APPLE_BRICK_ID, / Apple Charging Method / POWER_SUPPLY_TYPE_WIRELESS, / Wireless / }; enum power_supply_usb_type { POWER_SUPPLY_USB_TYPE_UNKNOWN = 0, POWER_SUPPLY_USB_TYPE_SDP, / Standard Downstream Port / POWER_SUPPLY_USB_TYPE_DCP, / Dedicated Charging Port / POWER_SUPPLY_USB_TYPE_CDP, / Charging Downstream Port / POWER_SUPPLY_USB_TYPE_ACA, / Accessory Charger Adapters / POWER_SUPPLY_USB_TYPE_C, / Type C Port / POWER_SUPPLY_USB_TYPE_PD, / Power Delivery Port / POWER_SUPPLY_USB_TYPE_PD_DRP, / PD Dual Role Port / POWER_SUPPLY_USB_TYPE_PD_PPS, / PD Programmable Power Supply / POWER_SUPPLY_USB_TYPE_APPLE_BRICK_ID, / Apple Charging Method / }; enum power_supply_notifier_events { PSY_EVENT_PROP_CHANGED, }; union power_supply_propval { int intval; const char *strval; }; struct device_node; struct power_supply; / Run-time specific power supply configuration / struct power_supply_config { struct device_node of_node; struct fwnode_handle fwnode; /* Driver private data */ void *drv_data; /* Device specific sysfs attributes */ const struct attribute_group **attr_grp; char **supplied_to; size_t num_supplicants; }; / Description of power supply / struct power_supply_desc { const char name; enum power_supply_type type; const enum power_supply_usb_type usb_types; size_t num_usb_types; const enum power_supply_property *properties; size_t num_properties; /* * Functions for drivers implementing power supply class. * These shouldn't be called directly by other drivers for accessing * this power supply. Instead use power_supply_*() functions (for * example power_supply_get_property()). */ int (*get_property)(struct power_supply *psy, enum power_supply_property psp, union power_supply_propval *val); int (*set_property)(struct power_supply *psy, enum power_supply_property psp, const union power_supply_propval *val); /* * property_is_writeable() will be called during registration * of power supply. If this happens during device probe then it must * not access internal data of device (because probe did not end). */ int (*property_is_writeable)(struct power_supply *psy, enum power_supply_property psp); void (*external_power_changed)(struct power_supply *psy); void (*set_charged)(struct power_supply *psy); /* * Set if thermal zone should not be created for this power supply. * For example for virtual supplies forwarding calls to actual * sensors or other supplies. */ bool no_thermal; /* For APM emulation, think legacy userspace. */ int use_for_apm; }; struct power_supply { const struct power_supply_desc *desc; char **supplied_to; size_t num_supplicants; char **supplied_from; size_t num_supplies; struct device_node *of_node; /* Driver private data */ void *drv_data; /* private */ struct device dev; struct work_struct changed_work; struct delayed_work deferred_register_work; spinlock_t changed_lock; bool changed; bool initialized; bool removing; atomic_t use_cnt;","title":"include "},{"location":"physic/obj/battery/#ifdef-config_thermal","text":"struct thermal_zone_device *tzd; struct thermal_cooling_device *tcd;","title":"ifdef CONFIG_THERMAL"},{"location":"physic/obj/battery/#endif","text":"","title":"endif"},{"location":"physic/obj/battery/#ifdef-config_leds_triggers","text":"struct led_trigger *charging_full_trig; char *charging_full_trig_name; struct led_trigger *charging_trig; char *charging_trig_name; struct led_trigger *full_trig; char *full_trig_name; struct led_trigger *online_trig; char *online_trig_name; struct led_trigger *charging_blink_full_solid_trig; char *charging_blink_full_solid_trig_name;","title":"ifdef CONFIG_LEDS_TRIGGERS"},{"location":"physic/obj/battery/#endif_1","text":"}; / * This is recommended structure to specify static power supply parameters. * Generic one, parametrizable for different power supplies. Power supply * class itself does not use it, but that's what implementing most platform * drivers, should try reuse for consistency. / struct power_supply_info { const char *name; int technology; int voltage_max_design; int voltage_min_design; int charge_full_design; int charge_empty_design; int energy_full_design; int energy_empty_design; int use_for_apm; }; struct power_supply_battery_ocv_table { int ocv; / microVolts / int capacity; / percent / }; / * This is the recommended struct to manage static battery parameters, * populated by power_supply_get_battery_info(). Most platform drivers should * use these for consistency. * Its field names must correspond to elements in enum power_supply_property. * The default field value is -EINVAL. * Power supply class itself doesn't use this. / struct power_supply_battery_info { int energy_full_design_uwh; / microWatt-hours / int charge_full_design_uah; / microAmp-hours / int voltage_min_design_uv; / microVolts / int voltage_max_design_uv; / microVolts / int tricklecharge_current_ua; / microAmps / int precharge_current_ua; / microAmps / int precharge_voltage_max_uv; / microVolts / int charge_term_current_ua; / microAmps / int charge_restart_voltage_uv; / microVolts / int overvoltage_limit_uv; / microVolts / int constant_charge_current_max_ua; / microAmps / int constant_charge_voltage_max_uv; / microVolts / int factory_internal_resistance_uohm; / microOhms / int resist_table_size; }; extern struct atomic_notifier_head power_supply_notifier; extern int power_supply_reg_notifier(struct notifier_block nb); extern void power_supply_unreg_notifier(struct notifier_block nb);","title":"endif"},{"location":"physic/obj/battery/#if-is_enabledconfig_power_supply","text":"extern struct power_supply power_supply_get_by_name(const char name); extern void power_supply_put(struct power_supply *psy);","title":"if IS_ENABLED(CONFIG_POWER_SUPPLY)"},{"location":"physic/obj/battery/#else","text":"static inline void power_supply_put(struct power_supply psy) {} static inline struct power_supply power_supply_get_by_name(const char *name)","title":"else"},{"location":"physic/obj/battery/#endif_2","text":"","title":"endif"},{"location":"physic/obj/battery/#ifdef-config_of","text":"extern struct power_supply power_supply_get_by_phandle(struct device_node np, const char property); extern struct power_supply devm_power_supply_get_by_phandle( struct device dev, const char property);","title":"ifdef CONFIG_OF"},{"location":"physic/obj/battery/#else-config_of","text":"static inline struct power_supply * power_supply_get_by_phandle(struct device_node np, const char property) { return NULL; } static inline struct power_supply * devm_power_supply_get_by_phandle(struct device dev, const char property)","title":"else / !CONFIG_OF /"},{"location":"physic/obj/battery/#endif-config_of","text":"extern int power_supply_get_battery_info(struct power_supply psy, struct power_supply_battery_info info); extern void power_supply_put_battery_info(struct power_supply psy, struct power_supply_battery_info info); extern int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table table, int table_len, int ocv); extern struct power_supply_battery_ocv_table * power_supply_find_ocv2cap_table(struct power_supply_battery_info info, int temp, int table_len); extern int power_supply_batinfo_ocv2cap(struct power_supply_battery_info info, int ocv, int temp); extern int power_supply_temp2resist_simple(struct power_supply_resistance_temp_table table, int table_len, int temp); extern void power_supply_changed(struct power_supply psy); extern int power_supply_am_i_supplied(struct power_supply psy); extern int power_supply_set_input_current_limit_from_supplier( struct power_supply psy); extern int power_supply_set_battery_charged(struct power_supply *psy);","title":"endif / CONFIG_OF /"},{"location":"physic/obj/battery/#ifdef-config_power_supply","text":"extern int power_supply_is_system_supplied(void);","title":"ifdef CONFIG_POWER_SUPPLY"},{"location":"physic/obj/battery/#else_1","text":"static inline int power_supply_is_system_supplied(void) { return -ENOSYS; }","title":"else"},{"location":"physic/obj/battery/#endif_3","text":"extern int power_supply_get_property(struct power_supply psy, enum power_supply_property psp, union power_supply_propval val);","title":"endif"},{"location":"physic/obj/battery/#if-is_enabledconfig_power_supply_1","text":"extern int power_supply_set_property(struct power_supply psy, enum power_supply_property psp, const union power_supply_propval val);","title":"if IS_ENABLED(CONFIG_POWER_SUPPLY)"},{"location":"physic/obj/battery/#else_2","text":"static inline int power_supply_set_property(struct power_supply psy, enum power_supply_property psp, const union power_supply_propval val)","title":"else"},{"location":"physic/obj/battery/#endif_4","text":"extern int power_supply_property_is_writeable(struct power_supply psy, enum power_supply_property psp); extern void power_supply_external_power_changed(struct power_supply psy); extern struct power_supply __must_check power_supply_register(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern struct power_supply __must_check power_supply_register_no_ws(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern struct power_supply __must_check devm_power_supply_register(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern struct power_supply __must_check devm_power_supply_register_no_ws(struct device parent, const struct power_supply_desc desc, const struct power_supply_config cfg); extern void power_supply_unregister(struct power_supply psy); extern int power_supply_powers(struct power_supply psy, struct device *dev);","title":"endif"},{"location":"physic/obj/battery/#define-to_power_supplydevice-container_ofdevice-struct-power_supply-dev","text":"extern void power_supply_get_drvdata(struct power_supply psy); / For APM emulation, think legacy userspace. / extern struct class *power_supply_class; static inline bool power_supply_is_amp_property(enum power_supply_property psp) { switch (psp) { case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN: case POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN: case POWER_SUPPLY_PROP_CHARGE_FULL: case POWER_SUPPLY_PROP_CHARGE_EMPTY: case POWER_SUPPLY_PROP_CHARGE_NOW: case POWER_SUPPLY_PROP_CHARGE_AVG: case POWER_SUPPLY_PROP_CHARGE_COUNTER: case POWER_SUPPLY_PROP_PRECHARGE_CURRENT: case POWER_SUPPLY_PROP_CHARGE_TERM_CURRENT: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_CURRENT_MAX: case POWER_SUPPLY_PROP_CURRENT_MAX: case POWER_SUPPLY_PROP_CURRENT_NOW: case POWER_SUPPLY_PROP_CURRENT_AVG: case POWER_SUPPLY_PROP_CURRENT_BOOT: return true; default: break; } return false; } static inline bool power_supply_is_watt_property(enum power_supply_property psp) { switch (psp) { case POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN: case POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN: case POWER_SUPPLY_PROP_ENERGY_FULL: case POWER_SUPPLY_PROP_ENERGY_EMPTY: case POWER_SUPPLY_PROP_ENERGY_NOW: case POWER_SUPPLY_PROP_ENERGY_AVG: case POWER_SUPPLY_PROP_VOLTAGE_MAX: case POWER_SUPPLY_PROP_VOLTAGE_MIN: case POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN: case POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN: case POWER_SUPPLY_PROP_VOLTAGE_NOW: case POWER_SUPPLY_PROP_VOLTAGE_AVG: case POWER_SUPPLY_PROP_VOLTAGE_OCV: case POWER_SUPPLY_PROP_VOLTAGE_BOOT: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE: case POWER_SUPPLY_PROP_CONSTANT_CHARGE_VOLTAGE_MAX: case POWER_SUPPLY_PROP_POWER_NOW: return true; default: break; } return false; }","title":"define to_power_supply(device) container_of(device, struct power_supply, dev)"},{"location":"physic/obj/battery/#ifdef-config_power_supply_hwmon","text":"int power_supply_add_hwmon_sysfs(struct power_supply psy); void power_supply_remove_hwmon_sysfs(struct power_supply psy);","title":"ifdef CONFIG_POWER_SUPPLY_HWMON"},{"location":"physic/obj/battery/#else_3","text":"static inline int power_supply_add_hwmon_sysfs(struct power_supply *psy) { return 0; } static inline void power_supply_remove_hwmon_sysfs(struct power_supply *psy) {}","title":"else"},{"location":"physic/obj/battery/#endif_5","text":"","title":"endif"},{"location":"physic/obj/battery/#endif-linux_power_supply_h","text":"/ * For systems where the charger determines the maximum battery capacity * the min and max fields should be used to present these values to user * space. Unused/unknown fields will not appear in sysfs. /","title":"endif / LINUX_POWER_SUPPLY_H /"},{"location":"physic/obj/border/","text":"Border (object) | border | . Example: See also: wall | border |","title":"Border (object)"},{"location":"physic/obj/border/#border-object","text":"| border | . Example: See also: wall | border |","title":"Border (object)"},{"location":"physic/obj/button/","text":"Button (object) | button | {verb}_thing({moniker\\|uuid})_type(button); | Amazon Das Button | button |","title":"Button (object)"},{"location":"physic/obj/button/#button-object","text":"| button | {verb}_thing({moniker\\|uuid})_type(button); | Amazon Das Button | button |","title":"Button (object)"},{"location":"physic/obj/canal/","text":"Canal (object)","title":"Canal (object)"},{"location":"physic/obj/canal/#canal-object","text":"","title":"Canal (object)"},{"location":"physic/obj/cat/","text":"Cat (type) cat is a type of the organic object , representing a physical living feline animal (cat). Declaration & Assignment The cat type can only be declared, assigned and referenced through the organic object , defining the type by using curly brackets ( {} ) and the type monikier {bird} . add_organic({cat}, moniker ); add_organic( moniker )_type(cat); Referencing To reference the cat type , use, either with_organic or shortened referencing using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_organic( moniker ); with_organic({cat}, moniker ); ( cat_moniker ); ({cat}, moniker ); Expressions The operator ( \ud83d\udc08 ) can be used in expressions. <expression_posit>( ...\ud83d\udc08... * ); Visacuity A thingy can learn to detect a cat after learning. For visacuity, several datasets of images are available, such as Coco Explorer. Source: #139721 Coco Explorer References","title":"Cat (type)"},{"location":"physic/obj/cat/#cat-type","text":"cat is a type of the organic object , representing a physical living feline animal (cat).","title":"Cat (type)"},{"location":"physic/obj/cat/#declaration-assignment","text":"The cat type can only be declared, assigned and referenced through the organic object , defining the type by using curly brackets ( {} ) and the type monikier {bird} . add_organic({cat}, moniker ); add_organic( moniker )_type(cat);","title":"Declaration &amp; Assignment"},{"location":"physic/obj/cat/#referencing","text":"To reference the cat type , use, either with_organic or shortened referencing using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_organic( moniker ); with_organic({cat}, moniker ); ( cat_moniker ); ({cat}, moniker );","title":"Referencing"},{"location":"physic/obj/cat/#expressions","text":"The operator ( \ud83d\udc08 ) can be used in expressions. <expression_posit>( ...\ud83d\udc08... * );","title":"Expressions"},{"location":"physic/obj/cat/#visacuity","text":"A thingy can learn to detect a cat after learning. For visacuity, several datasets of images are available, such as Coco Explorer. Source: #139721 Coco Explorer","title":"Visacuity"},{"location":"physic/obj/cat/#references","text":"","title":"References"},{"location":"physic/obj/ceiling/","text":"Ceiling (object) | ceiling | An identified top side of a representation space in the physical world. An undetermined human version of a plafond . See also: side ; plafond ; firma ; wall ; border | ceiling |","title":"Ceiling (object)"},{"location":"physic/obj/ceiling/#ceiling-object","text":"| ceiling | An identified top side of a representation space in the physical world. An undetermined human version of a plafond . See also: side ; plafond ; firma ; wall ; border | ceiling |","title":"Ceiling (object)"},{"location":"physic/obj/cellphone/","text":"Cell Phone (object) The cellphone object is a derived mobot , representing a portable telephone that can make and receive calls over a radio frequency link within changing service cells. flowchart LR thingy((thingy)) --> thing([thing]) thing --> mobot mobot --> cellphone(cellphone) Cellphone Hierarchy Declaration The default declaration of the cellphone object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. The cellphone object can also be declared by casting mobot . add_cellphone( moniker ); add_cellphone({ type }, moniker ); add_mobot({cellphone}, moniker ); Referencing To reference cellphone , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_cellphone( moniker ); with_cellphone({ type , moniker ); ( cellphone_moniker ); Typing The types of cellphone are realised through the operating system the cell phone runs on. There are only four defined cellphone types . {type} operator description API {android} {google} :: Cell phone running on Google\u00ae Android\u2122. android {bb} {blackberry} :: Cell phone running on Blackberry\u00ae operating system. bb {ios} {iphone} {apple} :: Cell phone running on Apple\u00ae iOS\u2122. ios {win} {ms} {microsoft} :: Cell phone running on Microsoft\u00ae Windows Mobile\u2122. win Posits posit description API _imei() _id({imei}) _id()_imei() imei( imei ) id()_imei( imei ) id({imei}, imei ) Provide / declare the International Mobile Equipment Identity. Promoted posit of ident . imei _phonenum _num _cell _phonenumber The phone number of the cellphone consisiting of the NDA [National Signigicant Number] and SN (Subscribers Number). phonenum | phonenum | _type(phonenum)_value({phone_number}); _type(phonenum)_value({country},{country_code},{national_code},{national_destination_codephone_number}); | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> ` | | | id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number, usually for cellphone type mobots imei _type(imei)_value({imei}); International Mobile Equipment Identity, usually for the cellphone type mobots","title":"Cell Phone (object)"},{"location":"physic/obj/cellphone/#cell-phone-object","text":"The cellphone object is a derived mobot , representing a portable telephone that can make and receive calls over a radio frequency link within changing service cells. flowchart LR thingy((thingy)) --> thing([thing]) thing --> mobot mobot --> cellphone(cellphone) Cellphone Hierarchy","title":"Cell Phone (object)"},{"location":"physic/obj/cellphone/#declaration","text":"The default declaration of the cellphone object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. The cellphone object can also be declared by casting mobot . add_cellphone( moniker ); add_cellphone({ type }, moniker ); add_mobot({cellphone}, moniker );","title":"Declaration"},{"location":"physic/obj/cellphone/#referencing","text":"To reference cellphone , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_cellphone( moniker ); with_cellphone({ type , moniker ); ( cellphone_moniker );","title":"Referencing"},{"location":"physic/obj/cellphone/#typing","text":"The types of cellphone are realised through the operating system the cell phone runs on. There are only four defined cellphone types . {type} operator description API {android} {google} :: Cell phone running on Google\u00ae Android\u2122. android {bb} {blackberry} :: Cell phone running on Blackberry\u00ae operating system. bb {ios} {iphone} {apple} :: Cell phone running on Apple\u00ae iOS\u2122. ios {win} {ms} {microsoft} :: Cell phone running on Microsoft\u00ae Windows Mobile\u2122. win","title":"Typing"},{"location":"physic/obj/cellphone/#posits","text":"posit description API _imei() _id({imei}) _id()_imei() imei( imei ) id()_imei( imei ) id({imei}, imei ) Provide / declare the International Mobile Equipment Identity. Promoted posit of ident . imei _phonenum _num _cell _phonenumber The phone number of the cellphone consisiting of the NDA [National Signigicant Number] and SN (Subscribers Number). phonenum | phonenum | _type(phonenum)_value({phone_number}); _type(phonenum)_value({country},{country_code},{national_code},{national_destination_codephone_number}); | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> | | []( #cellphone) | | <a name=\"\"></a> ` | | | id_type syntax notes serialnum _type(serialnum)_value({serial_number}); {serial_number} is the serial number of the thingy . id _type(id)_value({id_number}); Any user defined identification number/code as {id_number} . ip _type(ip)_value({ip_address}); The current Internet Protocol address used at the time of the command by the thingy phonenum _type(phonenum)_value({phone_number}); _type(phonenum)_value({country_number},{region_number},{phone_number}); Phone number, usually for cellphone type mobots imei _type(imei)_value({imei}); International Mobile Equipment Identity, usually for the cellphone type mobots","title":"Posits"},{"location":"physic/obj/chair/","text":"Chair (object) | chair | {verb}_thing({moniker|uuid})_type(chair); | chair |","title":"Chair (object)"},{"location":"physic/obj/chair/#chair-object","text":"| chair | {verb}_thing({moniker|uuid})_type(chair); | chair |","title":"Chair (object)"},{"location":"physic/obj/colo/","text":"Colour Sensor (object)","title":"Colour Sensor (object)"},{"location":"physic/obj/colo/#colour-sensor-object","text":"","title":"Colour Sensor (object)"},{"location":"physic/obj/compon/","text":"Component (object) Typing {type} Description API {} .","title":"Component (object)"},{"location":"physic/obj/compon/#component-object","text":"","title":"Component (object)"},{"location":"physic/obj/compon/#typing","text":"{type} Description API {} .","title":"Typing"},{"location":"physic/obj/computer/","text":"Computer (object) The computer object (also shortened syntax of pc ) is a derived sobot , representing is a multi-purpose desktop microcomputer whose size, capabilities, and price make it feasible for individual use. flowchart LR thingy((thingy)) --> robot([robot]) robot --> sobot(sobot) sobot --> computer{{computer}} Computer Hierarchy Declaration The default declaration of the computer object is to at least provide a moniker . The shortened syntax of pc can be used freely and interchangeably. There are no types of the computer object . The computer object can also be declared by casting sobot . add_computer( moniker ); add_pc( moniker ); add_sobot({computer}, moniker ); add_sobot({pc}, moniker ); Referencing To reference computer , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_computer( moniker ); with_pc( moniker ); ( computer_moniker ); Posits posit description API _opsys() _opsys( op_sys ) Provide / declares the operating system(s) of the computer. opsys _() _( ) Provide / declare the . _() _( ) Provide / declare the . _() _( ) Provide / declare the .","title":"Computer (object)"},{"location":"physic/obj/computer/#computer-object","text":"The computer object (also shortened syntax of pc ) is a derived sobot , representing is a multi-purpose desktop microcomputer whose size, capabilities, and price make it feasible for individual use. flowchart LR thingy((thingy)) --> robot([robot]) robot --> sobot(sobot) sobot --> computer{{computer}} Computer Hierarchy","title":"Computer (object)"},{"location":"physic/obj/computer/#declaration","text":"The default declaration of the computer object is to at least provide a moniker . The shortened syntax of pc can be used freely and interchangeably. There are no types of the computer object . The computer object can also be declared by casting sobot . add_computer( moniker ); add_pc( moniker ); add_sobot({computer}, moniker ); add_sobot({pc}, moniker );","title":"Declaration"},{"location":"physic/obj/computer/#referencing","text":"To reference computer , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_computer( moniker ); with_pc( moniker ); ( computer_moniker );","title":"Referencing"},{"location":"physic/obj/computer/#posits","text":"posit description API _opsys() _opsys( op_sys ) Provide / declares the operating system(s) of the computer. opsys _() _( ) Provide / declare the . _() _( ) Provide / declare the . _() _( ) Provide / declare the .","title":"Posits"},{"location":"physic/obj/door/","text":"Door (object) | door | A thing representation of a physical doorway / gate, designed for a human. See also: portal ; gate | door E: equip","title":"Door (object)"},{"location":"physic/obj/door/#door-object","text":"| door | A thing representation of a physical doorway / gate, designed for a human. See also: portal ; gate | door","title":"Door (object)"},{"location":"physic/obj/door/#e-equip","text":"","title":"E: equip"},{"location":"physic/obj/drone/","text":"Drone (object) The drone object is a derived robot , representing an aerial self-propelled thingy in the physical 'real' world. A thingy that aerially transports the human who is controlling it, is a vehicle of type {uav} . Similarly a thingy that was originally designed to aerially transport the human who is controlling it, but then later modified to be self-controlled and not carry the human who is controlling it, then this will also be a vehicle of type {uav} , not a drone . flowchart LR thingy((thingy)) --> thing([thing]) thing --> robot robot --> drone{{drone}} Drone Hierarchy Declaration The default declaration of the drone object is to at least provide a moniker . There are no drone types . The drone object can also be declared by casting robot . add_drone( moniker ); add_robot({drone}, moniker ); Referencing To reference drone , use, either the with verb or the shortened syntax using brackets ( () ). with_drone( moniker ); ( drone_moniker ); Posits posit description API _impetus() _impetus( impetus_configuration ) _impetus()_lift( lift_impetus )_propulsion( propulsion_impetus )_steer( steer_impetus ) Provides / declares the means of momentum of the drone, in terms of lift, propulsion, and, steer. impetus _size() _size( size_enum ) Provides / declares a generalised size enumerator dipicting the physical dimensions of the drone. size _mgtw() _mgtw( mgtw_value ) _mgtw({ unit }, mgtw_value ) Provides / declares the maximum gross takeoff weight of the drone. size _opalt() _opalt( normal_operating_altitude ) _({ unit }, normal_operating_altitude ) Provides / declares the normal operating altitude of the drone. opalt _maxair() _maxair( maximum_airspeed ) _({ unit }, maximum_airspeed ) Provides / declares the of the drone. maxair _adsb() Provides the ( adsb ) object , representing the Automatic Dependent Surveillance\u2013Broadcast component, from the preceding drone object . adsb _status() Provides the status of the drone. status _() _( ) _({ unit }, ) Provides / declares the of the drone. _() _( ) _({ unit }, ) Provides / declares the of the drone. _() _( ) _({ unit }, ) Provides / declares the of the drone. Size The _size posit provides or retrieves a generalised grouping of the physical aggregate dimensions of a drone. The size groupings are roughly based on PenState classifications (part of PennState ' GEOG 892 : Geospatial Applications of Unmanned Aerial Systems (UAS)' program). size description API very_small tiny micro Drones with dimensions ranging from the size of a large insect to 30-50cm long. very_small small mini At least one dimension greater than 50cm and no larger than 2meters. small medium Drones that are too heavy to be carried by one human but are still smaller than a light aircraft. They usually have a wingspan of about 5-10m and can carry payloads of 100Kg to 200kg. medium large Any drones with a maximum gross takeoff weight mgtw of 600kg or over. large Very Small Size The very small drone size class applies to drones with dimensions ranging from the size of a large insect to 30-50 cm long. The insect-like drones, with flapping or rotary wings, are a popular micro design. They are extremely small in size, are very light weight, and can be used for spying and biological warfare. Larger ones utilize conventional aircraft configuration. The choice between flapping or rotary wings is a matter of desired maneuverability. Flapping wing-based designs allow perching and landing on small surfaces. Examples of very small drones are: the Israeli IAI Malat Mosquito 1 (with wing span of 35 cm and endurance of 40 minutes) the US Aurora Flight Sciences Skate 2 (with wing span of 60 cm and length of 33 cm), the Australian Cyber Technology CyberQuad Mini 3 (with 42x42 cm square). Examples of very small drones Source: Fahlstrom, Paul & Gleason, Thomas (2012); 'Introduction to UAV Systems'; Wiley Small Size The Small drone size class (which also called sometimes mini) applies to drones that have at least one dimension greater than 50 cm and no larger than 2 meters. Many of the designs in this category are based on the fixed-wing model, and most are hand-launched by throwing them in the air. Examples of members of this small drone size class are: the 1 meter long RQ-11 Raven, by US Aero Vironment with a wingspan of 1.4 m; the Turkish Bayraktar, which weighs about 5 kg and has a data link range of 20 km; and, the US Army RQ-7 Shadow. Examples of small drones Source: Fahlstrom, Paul & Gleason, Thomas (2012); 'Introduction to UAV Systems'; Wiley References Anon. (2011); 'Mosquito Micro Unmanned Aerial Vehicle'; Airforce Technology Anon. (2021); 'Skate Small Unmanned Aerial System (SUAS)'; Homeland Security Technology Brandon, Alan (2009); 'CyberQuad: best of both worlds UAV designed for urban reconnaissance'; New Atlas Fahlstrom, Paul Gerin & Gleason, Thomas James (2012); 'Introduction to UAV Systems'; Wiley ISBN oISBN DOI Schuckman, Karen; Abdullah, Qassim (2020); 'Geospatial Applications of Unmanned Aerial Systems (UAS) GEOG 892'; PennState, College of Earth and Mineral Sciences, John A. Dutton, e-Education Institute https://en.wikipedia.org/wiki/Unmanned_aerial_vehicle#Classification_types See Anon. (2011) , Ibid.; \u21a9 See Anon. (2021) , Ibid.; \u21a9 See https://www.cybertechuav.com.au/about-cyber-technology/ ; Brandon (2009) , Ibid.; \u21a9","title":"Drone (object)"},{"location":"physic/obj/drone/#drone-object","text":"The drone object is a derived robot , representing an aerial self-propelled thingy in the physical 'real' world. A thingy that aerially transports the human who is controlling it, is a vehicle of type {uav} . Similarly a thingy that was originally designed to aerially transport the human who is controlling it, but then later modified to be self-controlled and not carry the human who is controlling it, then this will also be a vehicle of type {uav} , not a drone . flowchart LR thingy((thingy)) --> thing([thing]) thing --> robot robot --> drone{{drone}} Drone Hierarchy","title":"Drone (object)"},{"location":"physic/obj/drone/#declaration","text":"The default declaration of the drone object is to at least provide a moniker . There are no drone types . The drone object can also be declared by casting robot . add_drone( moniker ); add_robot({drone}, moniker );","title":"Declaration"},{"location":"physic/obj/drone/#referencing","text":"To reference drone , use, either the with verb or the shortened syntax using brackets ( () ). with_drone( moniker ); ( drone_moniker );","title":"Referencing"},{"location":"physic/obj/drone/#posits","text":"posit description API _impetus() _impetus( impetus_configuration ) _impetus()_lift( lift_impetus )_propulsion( propulsion_impetus )_steer( steer_impetus ) Provides / declares the means of momentum of the drone, in terms of lift, propulsion, and, steer. impetus _size() _size( size_enum ) Provides / declares a generalised size enumerator dipicting the physical dimensions of the drone. size _mgtw() _mgtw( mgtw_value ) _mgtw({ unit }, mgtw_value ) Provides / declares the maximum gross takeoff weight of the drone. size _opalt() _opalt( normal_operating_altitude ) _({ unit }, normal_operating_altitude ) Provides / declares the normal operating altitude of the drone. opalt _maxair() _maxair( maximum_airspeed ) _({ unit }, maximum_airspeed ) Provides / declares the of the drone. maxair _adsb() Provides the ( adsb ) object , representing the Automatic Dependent Surveillance\u2013Broadcast component, from the preceding drone object . adsb _status() Provides the status of the drone. status _() _( ) _({ unit }, ) Provides / declares the of the drone. _() _( ) _({ unit }, ) Provides / declares the of the drone. _() _( ) _({ unit }, ) Provides / declares the of the drone.","title":"Posits"},{"location":"physic/obj/drone/#size","text":"The _size posit provides or retrieves a generalised grouping of the physical aggregate dimensions of a drone. The size groupings are roughly based on PenState classifications (part of PennState ' GEOG 892 : Geospatial Applications of Unmanned Aerial Systems (UAS)' program). size description API very_small tiny micro Drones with dimensions ranging from the size of a large insect to 30-50cm long. very_small small mini At least one dimension greater than 50cm and no larger than 2meters. small medium Drones that are too heavy to be carried by one human but are still smaller than a light aircraft. They usually have a wingspan of about 5-10m and can carry payloads of 100Kg to 200kg. medium large Any drones with a maximum gross takeoff weight mgtw of 600kg or over. large","title":"Size"},{"location":"physic/obj/drone/#very-small-size","text":"The very small drone size class applies to drones with dimensions ranging from the size of a large insect to 30-50 cm long. The insect-like drones, with flapping or rotary wings, are a popular micro design. They are extremely small in size, are very light weight, and can be used for spying and biological warfare. Larger ones utilize conventional aircraft configuration. The choice between flapping or rotary wings is a matter of desired maneuverability. Flapping wing-based designs allow perching and landing on small surfaces. Examples of very small drones are: the Israeli IAI Malat Mosquito 1 (with wing span of 35 cm and endurance of 40 minutes) the US Aurora Flight Sciences Skate 2 (with wing span of 60 cm and length of 33 cm), the Australian Cyber Technology CyberQuad Mini 3 (with 42x42 cm square). Examples of very small drones Source: Fahlstrom, Paul & Gleason, Thomas (2012); 'Introduction to UAV Systems'; Wiley","title":"Very Small Size"},{"location":"physic/obj/drone/#small-size","text":"The Small drone size class (which also called sometimes mini) applies to drones that have at least one dimension greater than 50 cm and no larger than 2 meters. Many of the designs in this category are based on the fixed-wing model, and most are hand-launched by throwing them in the air. Examples of members of this small drone size class are: the 1 meter long RQ-11 Raven, by US Aero Vironment with a wingspan of 1.4 m; the Turkish Bayraktar, which weighs about 5 kg and has a data link range of 20 km; and, the US Army RQ-7 Shadow. Examples of small drones Source: Fahlstrom, Paul & Gleason, Thomas (2012); 'Introduction to UAV Systems'; Wiley","title":"Small Size"},{"location":"physic/obj/drone/#references","text":"Anon. (2011); 'Mosquito Micro Unmanned Aerial Vehicle'; Airforce Technology Anon. (2021); 'Skate Small Unmanned Aerial System (SUAS)'; Homeland Security Technology Brandon, Alan (2009); 'CyberQuad: best of both worlds UAV designed for urban reconnaissance'; New Atlas Fahlstrom, Paul Gerin & Gleason, Thomas James (2012); 'Introduction to UAV Systems'; Wiley ISBN oISBN DOI Schuckman, Karen; Abdullah, Qassim (2020); 'Geospatial Applications of Unmanned Aerial Systems (UAS) GEOG 892'; PennState, College of Earth and Mineral Sciences, John A. Dutton, e-Education Institute https://en.wikipedia.org/wiki/Unmanned_aerial_vehicle#Classification_types See Anon. (2011) , Ibid.; \u21a9 See Anon. (2021) , Ibid.; \u21a9 See https://www.cybertechuav.com.au/about-cyber-technology/ ; Brandon (2009) , Ibid.; \u21a9","title":"References"},{"location":"physic/obj/duct/","text":"Duct (object)","title":"Duct (object)"},{"location":"physic/obj/duct/#duct-object","text":"","title":"Duct (object)"},{"location":"physic/obj/equip/","text":"Equipment (object) | equip [ment] | See also: apparatus ; instru [ment] ; peripheral ; sensor | equip | F: fence ; firma | ~~ manip [ulator] ~~ | ~~Depreciated from version 1.1, use equip with type manip ~~|","title":"Equipment (object)"},{"location":"physic/obj/equip/#equipment-object","text":"| equip [ment] | See also: apparatus ; instru [ment] ; peripheral ; sensor | equip |","title":"Equipment (object)"},{"location":"physic/obj/equip/#f-fence-firma","text":"| ~~ manip [ulator] ~~ | ~~Depreciated from version 1.1, use equip with type manip ~~|","title":"F: fence; firma"},{"location":"physic/obj/finline/","text":"Finish Line (object)","title":"Finish Line (object)"},{"location":"physic/obj/finline/#finish-line-object","text":"","title":"Finish Line (object)"},{"location":"physic/obj/firma/","text":"Firma (object) | firma | An identified down side of a representation space in the physical world. An undetermined human version of a marack . See also: side ; marack ; ceiling ; wall ; border ; ground ; track | firma |","title":"Firma (object)"},{"location":"physic/obj/firma/#firma-object","text":"| firma | An identified down side of a representation space in the physical world. An undetermined human version of a marack . See also: side ; marack ; ceiling ; wall ; border ; ground ; track | firma |","title":"Firma (object)"},{"location":"physic/obj/ghost/","text":"Ghost (object)","title":"Ghost (object)"},{"location":"physic/obj/ghost/#ghost-object","text":"","title":"Ghost (object)"},{"location":"physic/obj/guide/","text":"Guide (object)","title":"Guide (object)"},{"location":"physic/obj/guide/#guide-object","text":"","title":"Guide (object)"},{"location":"physic/obj/hinderan/","text":"Hinderance (object)","title":"Hinderance (object)"},{"location":"physic/obj/hinderan/#hinderance-object","text":"","title":"Hinderance (object)"},{"location":"physic/obj/human/","text":"Human (object) | human | The human version of a thing / robot . The non-human version of an organic . See also: | I: instruct ; label","title":"Human (object)"},{"location":"physic/obj/human/#human-object","text":"| human | The human version of a thing / robot . The non-human version of an organic . See also: |","title":"Human (object)"},{"location":"physic/obj/human/#i-instruct-label","text":"","title":"I: instruct; label"},{"location":"physic/obj/imu/","text":"Inertial Measurement Unit (object)","title":"Inertial Measurement Unit (object)"},{"location":"physic/obj/imu/#inertial-measurement-unit-object","text":"","title":"Inertial Measurement Unit (object)"},{"location":"physic/obj/ject/","text":"Ject (object > thingy > thing)","title":"Ject (object > thingy > thing)"},{"location":"physic/obj/ject/#ject-object-thingy-thing","text":"","title":"Ject (object &gt; thingy &gt; thing)"},{"location":"physic/obj/joint/","text":"Joint (object)","title":"Joint (object)"},{"location":"physic/obj/joint/#joint-object","text":"","title":"Joint (object)"},{"location":"physic/obj/landmark/","text":"","title":"Landmark"},{"location":"physic/obj/link/","text":"Link (object)","title":"Link (object)"},{"location":"physic/obj/link/#link-object","text":"","title":"Link (object)"},{"location":"physic/obj/locon/","text":"Location Object Context (object) begin_locon(); heed_map(21_toyne); add_object(teabag)_indef() with_locon()_object(teabag)_state(inprogress); with_locon()_at(8.5,2.6); with_locon()_look(teabag_001.jpg)_see(teabag_001.svg); end_locon() begin_locon(); heed_map(21_toyne); add_object(teabag)_indef() with_locon()_object(teabag)_state(unused); with_locon()_at(8.5,2.6); with_locon()_look()_file(teabag_002.jpg); with_locon()_see()_file(teabag_002.svg); end_locon() begin_locon() heed_map(21_toyne); add_object(butter)_indef()_consumeable(); add_textmark(bb_stamp)_text(BEST BEFORE\\n31 JUL 21\\n06:43 L 029)_see(bb_text); with_locon()_object(butter)_form(block); add_object https://cocodataset.org/#explore {type} operator coco description API {person} \ud83e\uddcd person human {bicycle} \ud83d\udeb2 bicycle vehicle {car} \ud83d\ude97 car vehicle {motorcycle} {motorbike} \ud83c\udfcd motorcycle vehicle {airplane} \u2708 \ud83d\udee9 airplane vehicle {bus} \ud83d\ude8c bus vehicle {train} {loco} \ud83d\ude86 train vehicle {truck} {lorry} \ud83d\ude9a truck vehicle {boat} {lorry} \u26f5 \ud83d\udee5 boat vehicle {traffic_light} {traff} \ud83d\udea6 traffic lights mobot {fire hydrant} {firehy} fire_hydrant fire hydrant object {road_sign} signpost road sign object {stop_sign} \ud83d\uded1 stop sign object {parking_meter} \ud83c\udd7f\ufe0f parking meter mobot {bench} bench object {bird} \ud83d\udc26 bird organic {cat} \ud83d\udc08 cat organic {dog} \ud83d\udc15 dog organic {horse} \ud83d\udc0e \ud83d\udc34 horse organic {sheep} \ud83d\udc11 sheep organic {cow} \ud83d\udc04 \ud83d\udc2e cow organic {elephant} \ud83d\udc18 elephant organic {bear} \ud83d\udc3b bear organic {zebra} \ud83e\udd93 zebra organic {giraffe} \ud83e\udd92 giraffe organic {teacup} \ud83c\udf75 teacup object {backpack} \ud83c\udf92 backpack object {umbrella} \u2602 umbrella object {shoe} \ud83d\udc5e shoe object {specs} {glasses} {specs} \ud83d\udc53 glasses object {handbag} {clutch} \ud83d\udc5c zebra object {tie} \ud83d\udc54 tie object {luggage} {suitcase} \ud83e\uddf3 luggage object {frisbee} \ud83e\udd4f frisbee object {skis} \ud83c\udfbf skis object {snowboard} \ud83c\udfc2 snowboard object {sports_ball} {ball} \u26bd ball object {kite} \ud83e\ude81 kite object {sports_bat} \ud83c\udfcf sports bat object {sports_glove} \ud83d\udc54 sports glove object {skateboard} \ud83d\udef9 skateboard object {surfboard} \ud83c\udfc4 surfboard object {sports_racket} {tennis_racket} \ud83c\udfbe tennis racket object {bottle} \ud83e\uddf4 bottle object {plate} \ud83c\udf7d\ufe0f plate object {wine_glass} \ud83c\udf77 wine glass object {cup} {glass} \ud83e\udd64 \ud83e\udd5b \ud83e\udd43 cup object {fork} \ud83c\udf74 fork object {knife} \ud83c\udf74 knife object {spoon} \ud83e\udd44 spoon object {bowl} \ud83e\udd63 bowl object {banana} \ud83c\udf4c banana organic {apple} \ud83c\udf4f \ud83c\udf4e apple organic {sandwich} \ud83e\udd6a sandwich organic {orange} orange organic {broccoli} \ud83e\udd66 broccoli organic {carrot} \ud83e\udd55 carrot organic {hot_dog} \ud83c\udf2d hot dog object {pizza} \ud83c\udf55 pizza object {doughnut} {donut} \ud83c\udf69 doughnut object {cake} \ud83c\udf82 cake object {chair} \ud83e\ude91 chair object {couch} {sofa} {settee} \ud83d\udecb\ufe0f couch object {potted_plant} \ud83e\udeb4 potted plant object {bed} \ud83d\udecf\ufe0f bed object {picture} \ud83d\uddbc\ufe0f picture object {dining_table} {table} table_restaurant dining table object {window} \ud83e\ude9f window object {desk} desk desk object {wc} {toilet} {toilet_seat} \ud83d\udebd toilet object {door} \ud83d\udeaa door object {tv} {television} \ud83d\udcfa laptop computer {laptop} \ud83d\udcbb laptop computer {mouse} \ud83d\uddb1\ufe0f mouse object {remote} remote_gen remote object {keyboard} \u2328\ufe0f keyboard mobot {cellphone} {mobile_phone} {mobile} \ud83d\udcf1 cellphone mobot {microwave} {microwave_oven} microwave microwave applian {oven} oven_gen oven applian {toaster} toaster applian {sink} countertops sink object {fridge} {refrigerator} {freezer} {fridge_freezer} object {blender} blender object {book} \ud83d\udcd5 book object {clock} \u23f0 \u23f2\ufe0f clock sobot {vase} \ud83c\udffa vase object {scissors} \u2702\ufe0f scissors object {teddy_bear} {plush_toy} \ud83e\uddf8 teddy bear object {hairdrier} {hair_drier} hairdrier object {toothbrush} \ud83e\udea5 toothbrush object {hairbrush} hairbrush object https://cocodataset.org/#home","title":"Location Object Context (object)"},{"location":"physic/obj/locon/#location-object-context-object","text":"begin_locon(); heed_map(21_toyne); add_object(teabag)_indef() with_locon()_object(teabag)_state(inprogress); with_locon()_at(8.5,2.6); with_locon()_look(teabag_001.jpg)_see(teabag_001.svg); end_locon() begin_locon(); heed_map(21_toyne); add_object(teabag)_indef() with_locon()_object(teabag)_state(unused); with_locon()_at(8.5,2.6); with_locon()_look()_file(teabag_002.jpg); with_locon()_see()_file(teabag_002.svg); end_locon() begin_locon() heed_map(21_toyne); add_object(butter)_indef()_consumeable(); add_textmark(bb_stamp)_text(BEST BEFORE\\n31 JUL 21\\n06:43 L 029)_see(bb_text); with_locon()_object(butter)_form(block); add_object https://cocodataset.org/#explore {type} operator coco description API {person} \ud83e\uddcd person human {bicycle} \ud83d\udeb2 bicycle vehicle {car} \ud83d\ude97 car vehicle {motorcycle} {motorbike} \ud83c\udfcd motorcycle vehicle {airplane} \u2708 \ud83d\udee9 airplane vehicle {bus} \ud83d\ude8c bus vehicle {train} {loco} \ud83d\ude86 train vehicle {truck} {lorry} \ud83d\ude9a truck vehicle {boat} {lorry} \u26f5 \ud83d\udee5 boat vehicle {traffic_light} {traff} \ud83d\udea6 traffic lights mobot {fire hydrant} {firehy} fire_hydrant fire hydrant object {road_sign} signpost road sign object {stop_sign} \ud83d\uded1 stop sign object {parking_meter} \ud83c\udd7f\ufe0f parking meter mobot {bench} bench object {bird} \ud83d\udc26 bird organic {cat} \ud83d\udc08 cat organic {dog} \ud83d\udc15 dog organic {horse} \ud83d\udc0e \ud83d\udc34 horse organic {sheep} \ud83d\udc11 sheep organic {cow} \ud83d\udc04 \ud83d\udc2e cow organic {elephant} \ud83d\udc18 elephant organic {bear} \ud83d\udc3b bear organic {zebra} \ud83e\udd93 zebra organic {giraffe} \ud83e\udd92 giraffe organic {teacup} \ud83c\udf75 teacup object {backpack} \ud83c\udf92 backpack object {umbrella} \u2602 umbrella object {shoe} \ud83d\udc5e shoe object {specs} {glasses} {specs} \ud83d\udc53 glasses object {handbag} {clutch} \ud83d\udc5c zebra object {tie} \ud83d\udc54 tie object {luggage} {suitcase} \ud83e\uddf3 luggage object {frisbee} \ud83e\udd4f frisbee object {skis} \ud83c\udfbf skis object {snowboard} \ud83c\udfc2 snowboard object {sports_ball} {ball} \u26bd ball object {kite} \ud83e\ude81 kite object {sports_bat} \ud83c\udfcf sports bat object {sports_glove} \ud83d\udc54 sports glove object {skateboard} \ud83d\udef9 skateboard object {surfboard} \ud83c\udfc4 surfboard object {sports_racket} {tennis_racket} \ud83c\udfbe tennis racket object {bottle} \ud83e\uddf4 bottle object {plate} \ud83c\udf7d\ufe0f plate object {wine_glass} \ud83c\udf77 wine glass object {cup} {glass} \ud83e\udd64 \ud83e\udd5b \ud83e\udd43 cup object {fork} \ud83c\udf74 fork object {knife} \ud83c\udf74 knife object {spoon} \ud83e\udd44 spoon object {bowl} \ud83e\udd63 bowl object {banana} \ud83c\udf4c banana organic {apple} \ud83c\udf4f \ud83c\udf4e apple organic {sandwich} \ud83e\udd6a sandwich organic {orange} orange organic {broccoli} \ud83e\udd66 broccoli organic {carrot} \ud83e\udd55 carrot organic {hot_dog} \ud83c\udf2d hot dog object {pizza} \ud83c\udf55 pizza object {doughnut} {donut} \ud83c\udf69 doughnut object {cake} \ud83c\udf82 cake object {chair} \ud83e\ude91 chair object {couch} {sofa} {settee} \ud83d\udecb\ufe0f couch object {potted_plant} \ud83e\udeb4 potted plant object {bed} \ud83d\udecf\ufe0f bed object {picture} \ud83d\uddbc\ufe0f picture object {dining_table} {table} table_restaurant dining table object {window} \ud83e\ude9f window object {desk} desk desk object {wc} {toilet} {toilet_seat} \ud83d\udebd toilet object {door} \ud83d\udeaa door object {tv} {television} \ud83d\udcfa laptop computer {laptop} \ud83d\udcbb laptop computer {mouse} \ud83d\uddb1\ufe0f mouse object {remote} remote_gen remote object {keyboard} \u2328\ufe0f keyboard mobot {cellphone} {mobile_phone} {mobile} \ud83d\udcf1 cellphone mobot {microwave} {microwave_oven} microwave microwave applian {oven} oven_gen oven applian {toaster} toaster applian {sink} countertops sink object {fridge} {refrigerator} {freezer} {fridge_freezer} object {blender} blender object {book} \ud83d\udcd5 book object {clock} \u23f0 \u23f2\ufe0f clock sobot {vase} \ud83c\udffa vase object {scissors} \u2702\ufe0f scissors object {teddy_bear} {plush_toy} \ud83e\uddf8 teddy bear object {hairdrier} {hair_drier} hairdrier object {toothbrush} \ud83e\udea5 toothbrush object {hairbrush} hairbrush object https://cocodataset.org/#home","title":"Location Object Context (object)"},{"location":"physic/obj/mach/","text":"Machine (object) | mach [ine] | The stationary version of a mech |","title":"Machine (object)"},{"location":"physic/obj/mach/#machine-object","text":"| mach [ine] | The stationary version of a mech |","title":"Machine (object)"},{"location":"physic/obj/mech/","text":"Mechanical Thing (object) | mech [anical thing] | The motion version of a mach |","title":"Mechanical Thing (object)"},{"location":"physic/obj/mech/#mechanical-thing-object","text":"| mech [anical thing] | The motion version of a mach |","title":"Mechanical Thing (object)"},{"location":"physic/obj/microcon/","text":"Microcontroller (object) The microcon object (also lengthened syntax of microcontroller ) is a derived sobot , representing is a multi-purpose microcomputer whose size, capabilities, and price make it feasible for internal robot use. flowchart LR thingy((thingy)) --> robot([robot]) robot --> sobot(sobot) sobot --> microcon{{microcon}} Microcontroller Hierarchy","title":"Microcontroller (object)"},{"location":"physic/obj/microcon/#microcontroller-object","text":"The microcon object (also lengthened syntax of microcontroller ) is a derived sobot , representing is a multi-purpose microcomputer whose size, capabilities, and price make it feasible for internal robot use. flowchart LR thingy((thingy)) --> robot([robot]) robot --> sobot(sobot) sobot --> microcon{{microcon}} Microcontroller Hierarchy","title":"Microcontroller (object)"},{"location":"physic/obj/mobot/","text":"Mobot (object) A mobot is a conveyed thing , that is not self-propelled, but interacts physically in the physical world, such as a cell phone . The mobot is derived from a thing , and a thing is derived from thingy . This is depicted in the 'Mobot Hierarchy'. flowchart LR thingy([thingy]) --> thing([thing]) thing --> mobot mobot --> cellphone(cellphone) mobot --> watch(smartwatch) mobot --> laptop(laptop) Mobot Hierarchy Declaration The default declaration of the mobot object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. add_mobot( moniker ); add_mobot({ type }, moniker ); add_cellphone( moniker ); add_watch( moniker ); add_laptop( moniker ); Referencing To reference the mobot , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_mobot( moniker ); with_mobot({ type , moniker ); with_cellphone( moniker ); with_watch( moniker ); with_laptop( moniker ); ( sobot_moniker ); ( cellphone_moniker ); ( watch_moniker ); ( laptop_moniker ); Posits method description API _ident() Provides or sets identity information. ident Ident","title":"Mobot (object)"},{"location":"physic/obj/mobot/#mobot-object","text":"A mobot is a conveyed thing , that is not self-propelled, but interacts physically in the physical world, such as a cell phone . The mobot is derived from a thing , and a thing is derived from thingy . This is depicted in the 'Mobot Hierarchy'. flowchart LR thingy([thingy]) --> thing([thing]) thing --> mobot mobot --> cellphone(cellphone) mobot --> watch(smartwatch) mobot --> laptop(laptop) Mobot Hierarchy","title":"Mobot (object)"},{"location":"physic/obj/mobot/#declaration","text":"The default declaration of the mobot object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. add_mobot( moniker ); add_mobot({ type }, moniker ); add_cellphone( moniker ); add_watch( moniker ); add_laptop( moniker );","title":"Declaration"},{"location":"physic/obj/mobot/#referencing","text":"To reference the mobot , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_mobot( moniker ); with_mobot({ type , moniker ); with_cellphone( moniker ); with_watch( moniker ); with_laptop( moniker ); ( sobot_moniker ); ( cellphone_moniker ); ( watch_moniker ); ( laptop_moniker );","title":"Referencing"},{"location":"physic/obj/mobot/#posits","text":"method description API _ident() Provides or sets identity information. ident","title":"Posits"},{"location":"physic/obj/mobot/#ident","text":"","title":"Ident"},{"location":"physic/obj/motor/","text":"Motor (object) flowchart LR actuat((actuat)) --> motor([motor]) Motor Hierarchy","title":"Motor (object)"},{"location":"physic/obj/motor/#motor-object","text":"flowchart LR actuat((actuat)) --> motor([motor]) Motor Hierarchy","title":"Motor (object)"},{"location":"physic/obj/object/","text":"Object (object)","title":"Object (object)"},{"location":"physic/obj/object/#object-object","text":"","title":"Object (object)"},{"location":"physic/obj/organic/","text":"Organic (object) The organic object is a derivative of thingy and one of the four main hierarchical thingy types. The organic object is a representation of a non-human being, present and alive in the physical 'real' world. flowchart TD thingy((thingy)) --> human([human]) thingy --> organic([organic]) thingy --> robot([robot]) thingy --> thing([thing]) organic2([organic]) --> fauna{{fauna}} organic2([organic]) --> flora{{flora}} Genera of Thingies Declaration The default declaration of the organic object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). All types of organic are not available to be declared by name. add_organic( moniker ); add_organic({ type }, moniker ); Referencing To reference the organic , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. All types of organic are not available to be referenced by name. with_organic( moniker ); with_organic({ type , moniker ); ( organic_moniker ); Typing The types of the organic object are those objects derived from common objects used in machine-learning visacuity. type operator coco identifier description API {bear} {\ud83d\udc3b} bear bear {bird} {\ud83d\udc26} bird bird {cat} {\ud83d\udc08} cat cat {cow} {\ud83d\udc04} {\ud83d\udc2e} cow cow {dog} {\ud83d\udc15} dog dog {elephant} {\ud83d\udc18} elephant elephant {giraffe} \ud83e\udd92 giraffe giraffe {horse} \ud83d\udc0e \ud83d\udc34 horse horse {sheep} \ud83d\udc11 sheep sheep {zebra} \ud83e\udd93 zebra zebra Bear (type) bear is a type of the organic object , representing a physical living animal (bear). Declaration & Assignment The bear type can only be declared, assigned and referenced through the organic object , defining the type by using curly brackets ( {} ), as such: {bear} . add_organic({bear}, moniker ); add_organic( moniker )_type(bear); Referencing To reference the bear type , use, either with_organic or shortened referencing using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_organic( moniker ); with_organic({bear}, moniker ); ( bear_moniker ); ({bear}, organic_moniker ); Expressions There is an bear operator (\ud83d\udc3b), to be used in expressions. <...> _ <expression_posit> ( ... \ud83d\udc3b ... ); Visacuity Source: #212688 Coco Explorer Bird (type) Cow (type) Dog (type) Elephant (type) Giraffe (type) Horse (type) Sheep (type) Zebra (type)","title":"Organic (object)"},{"location":"physic/obj/organic/#organic-object","text":"The organic object is a derivative of thingy and one of the four main hierarchical thingy types. The organic object is a representation of a non-human being, present and alive in the physical 'real' world. flowchart TD thingy((thingy)) --> human([human]) thingy --> organic([organic]) thingy --> robot([robot]) thingy --> thing([thing]) organic2([organic]) --> fauna{{fauna}} organic2([organic]) --> flora{{flora}} Genera of Thingies","title":"Organic (object)"},{"location":"physic/obj/organic/#declaration","text":"The default declaration of the organic object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). All types of organic are not available to be declared by name. add_organic( moniker ); add_organic({ type }, moniker );","title":"Declaration"},{"location":"physic/obj/organic/#referencing","text":"To reference the organic , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. All types of organic are not available to be referenced by name. with_organic( moniker ); with_organic({ type , moniker ); ( organic_moniker );","title":"Referencing"},{"location":"physic/obj/organic/#typing","text":"The types of the organic object are those objects derived from common objects used in machine-learning visacuity. type operator coco identifier description API {bear} {\ud83d\udc3b} bear bear {bird} {\ud83d\udc26} bird bird {cat} {\ud83d\udc08} cat cat {cow} {\ud83d\udc04} {\ud83d\udc2e} cow cow {dog} {\ud83d\udc15} dog dog {elephant} {\ud83d\udc18} elephant elephant {giraffe} \ud83e\udd92 giraffe giraffe {horse} \ud83d\udc0e \ud83d\udc34 horse horse {sheep} \ud83d\udc11 sheep sheep {zebra} \ud83e\udd93 zebra zebra","title":"Typing"},{"location":"physic/obj/organic/#bear-type","text":"bear is a type of the organic object , representing a physical living animal (bear).","title":"Bear (type)"},{"location":"physic/obj/organic/#declaration-assignment","text":"The bear type can only be declared, assigned and referenced through the organic object , defining the type by using curly brackets ( {} ), as such: {bear} . add_organic({bear}, moniker ); add_organic( moniker )_type(bear);","title":"Declaration &amp; Assignment"},{"location":"physic/obj/organic/#referencing_1","text":"To reference the bear type , use, either with_organic or shortened referencing using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_organic( moniker ); with_organic({bear}, moniker ); ( bear_moniker ); ({bear}, organic_moniker );","title":"Referencing"},{"location":"physic/obj/organic/#expressions","text":"There is an bear operator (\ud83d\udc3b), to be used in expressions. <...> _ <expression_posit> ( ... \ud83d\udc3b ... );","title":"Expressions"},{"location":"physic/obj/organic/#visacuity","text":"Source: #212688 Coco Explorer","title":"Visacuity"},{"location":"physic/obj/organic/#bird-type","text":"","title":"Bird (type)"},{"location":"physic/obj/organic/#cow-type","text":"","title":"Cow (type)"},{"location":"physic/obj/organic/#dog-type","text":"","title":"Dog (type)"},{"location":"physic/obj/organic/#elephant-type","text":"","title":"Elephant (type)"},{"location":"physic/obj/organic/#giraffe-type","text":"","title":"Giraffe (type)"},{"location":"physic/obj/organic/#horse-type","text":"","title":"Horse (type)"},{"location":"physic/obj/organic/#sheep-type","text":"","title":"Sheep (type)"},{"location":"physic/obj/organic/#zebra-type","text":"","title":"Zebra (type)"},{"location":"physic/obj/photoelect/","text":"Photoelectric Sensor (object)","title":"Photoelectric Sensor (object)"},{"location":"physic/obj/photoelect/#photoelectric-sensor-object","text":"","title":"Photoelectric Sensor (object)"},{"location":"physic/obj/poi/","text":"Point of Interest (object) Place of interest https://www.compart.com/en/unicode/U+2318 \u2318","title":"Poi"},{"location":"physic/obj/rail/","text":"Rail (object)","title":"Rail (object)"},{"location":"physic/obj/rail/#rail-object","text":"","title":"Rail (object)"},{"location":"physic/obj/robot/","text":"Robot (object) The robot object is a derived thingy , representing a self-propelled thingy in the physical 'real' world. flowchart LR thingy((thingy)) --> robot([robot]) Robot Hierarchy Declaration The default declaration of the robot object is to at least provide a moniker . There are no types of the robot object . The robot object can also be declared by casting thingy . add_robot( moniker ); add_thingy({robot}, moniker ); Referencing To reference robot , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_robot( moniker ); ( robot_moniker ); Posits posit description API _opsys() _opsys( operating_system ) Provide / declares the operating system(s) of the robot. opsys _opframe() _opframe( operating_framework ) Provide / declare the operating framework of the robot. opframe _() _( ) Provide / declare the . _() _( ) Provide / declare the .","title":"Robot (object)"},{"location":"physic/obj/robot/#robot-object","text":"The robot object is a derived thingy , representing a self-propelled thingy in the physical 'real' world. flowchart LR thingy((thingy)) --> robot([robot]) Robot Hierarchy","title":"Robot (object)"},{"location":"physic/obj/robot/#declaration","text":"The default declaration of the robot object is to at least provide a moniker . There are no types of the robot object . The robot object can also be declared by casting thingy . add_robot( moniker ); add_thingy({robot}, moniker );","title":"Declaration"},{"location":"physic/obj/robot/#referencing","text":"To reference robot , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_robot( moniker ); ( robot_moniker );","title":"Referencing"},{"location":"physic/obj/robot/#posits","text":"posit description API _opsys() _opsys( operating_system ) Provide / declares the operating system(s) of the robot. opsys _opframe() _opframe( operating_framework ) Provide / declare the operating framework of the robot. opframe _() _( ) Provide / declare the . _() _( ) Provide / declare the .","title":"Posits"},{"location":"physic/obj/roi/","text":"Region of Interest (object) A roi object (also region ) is an array of multi-point physical positions, used to represent a physical location in physical space, or on a map. The term 'place of interest' can refer to a 'roi' (region of interest), however, this is avoided so as not to be confused with a poi 'Point of Interest' which has the same initialisms. The roi object also has the operator ( \u2318 ) to be used in expressions . Declaration & Assignment The default declaration of roi is to at least provide a moniker . However, the definition of the roi can be assigned or declared using either: the shape posit; or, the ambit posit. There are various signatures for the shape and ambit posits. add_roi( moniker ); add_roi( moniker )_shape( moniker ); add_roi( moniker )_shape({ shape }, moniker ); add_roi( moniker )_shape({ shape }, x_lat1 , y_lng1 , x_lat2 , y_lng2 , ... ); add_roi( moniker )_shape({ shape }, [object1] , [object2] , ... ); add_roi( moniker )_ambit( moniker ); add_roi( moniker )_ambit( x_lat1 , y_lng1 , x_lat2 , y_lng2 , ... ); add_roi( moniker )_ambit( [object1] , [object2] , ... ); Referencing Referencing the roi object is achieved using the verb with or implied with the use of brackets ( () ). with_roi( moniker ); ( roi_moniker ); Posits The majority of posits for the roi object are concerned with developing the physical location and shape of the region of interest. posit description API _ambit Use a 'linear ring' to define the roi. ambit _area Provide or set the area of the roi (using default or explicit units). area _extrude Extrude the ambit or shape of the roi along a plane. extrude _flatten Flatten (or convert to two-dimensions) the ambit or shape of the roi. flatten _grow Grow the ambit or shape of the roi. grow _shape Use a geometry shape with multi-points to define the roi. shape_2d shape_3d _shrink Shrink the ambit or shape of the roi. shrink _skin Apply a skin to roi shape for graphical displays. skin _surface _sarea Provide or set the surface area of the roi (using default or explicit units). surface _text Provide text in a human language describing the roi. text _tip Provide a human tip in human language to briefly describe the roi. tip _to3d Convert the ambit or shape of the roi to three-dimensions. to3d _vol _volume Provide or set the volume of the roi (using default or explicit units). vol single <--> range s point <--> region i waypoint <--> locat ng way <--> place le goal <--> venue mu mpoint <--> mregion lt mwaypoint <--> mlocat pl mway <--> mplace e mgoal <--> mvenue add_locat( moniker ); add_location( moniker ); add_locat({ geometry }, moniker ); 2D {geometry_type} operator description API {circle} \u25ef circle {square} \u25fb square {rect} {rectangle} \u25ad rect {triangle} {tri} \u25b3 triangle 3D {geometry} operator description API {sphere} \ud83c\udfc0 circle {cube} cube {cuboid} \u25f3 cuboid {pyramid} pyramid add_reg({locat}, moniker ); add_region({locat}, moniker );","title":"Region of Interest (object)"},{"location":"physic/obj/roi/#region-of-interest-object","text":"A roi object (also region ) is an array of multi-point physical positions, used to represent a physical location in physical space, or on a map. The term 'place of interest' can refer to a 'roi' (region of interest), however, this is avoided so as not to be confused with a poi 'Point of Interest' which has the same initialisms. The roi object also has the operator ( \u2318 ) to be used in expressions .","title":"Region of Interest (object)"},{"location":"physic/obj/roi/#declaration-assignment","text":"The default declaration of roi is to at least provide a moniker . However, the definition of the roi can be assigned or declared using either: the shape posit; or, the ambit posit. There are various signatures for the shape and ambit posits. add_roi( moniker ); add_roi( moniker )_shape( moniker ); add_roi( moniker )_shape({ shape }, moniker ); add_roi( moniker )_shape({ shape }, x_lat1 , y_lng1 , x_lat2 , y_lng2 , ... ); add_roi( moniker )_shape({ shape }, [object1] , [object2] , ... ); add_roi( moniker )_ambit( moniker ); add_roi( moniker )_ambit( x_lat1 , y_lng1 , x_lat2 , y_lng2 , ... ); add_roi( moniker )_ambit( [object1] , [object2] , ... );","title":"Declaration &amp; Assignment"},{"location":"physic/obj/roi/#referencing","text":"Referencing the roi object is achieved using the verb with or implied with the use of brackets ( () ). with_roi( moniker ); ( roi_moniker );","title":"Referencing"},{"location":"physic/obj/roi/#posits","text":"The majority of posits for the roi object are concerned with developing the physical location and shape of the region of interest. posit description API _ambit Use a 'linear ring' to define the roi. ambit _area Provide or set the area of the roi (using default or explicit units). area _extrude Extrude the ambit or shape of the roi along a plane. extrude _flatten Flatten (or convert to two-dimensions) the ambit or shape of the roi. flatten _grow Grow the ambit or shape of the roi. grow _shape Use a geometry shape with multi-points to define the roi. shape_2d shape_3d _shrink Shrink the ambit or shape of the roi. shrink _skin Apply a skin to roi shape for graphical displays. skin _surface _sarea Provide or set the surface area of the roi (using default or explicit units). surface _text Provide text in a human language describing the roi. text _tip Provide a human tip in human language to briefly describe the roi. tip _to3d Convert the ambit or shape of the roi to three-dimensions. to3d _vol _volume Provide or set the volume of the roi (using default or explicit units). vol single <--> range s point <--> region i waypoint <--> locat ng way <--> place le goal <--> venue mu mpoint <--> mregion lt mwaypoint <--> mlocat pl mway <--> mplace e mgoal <--> mvenue add_locat( moniker ); add_location( moniker ); add_locat({ geometry }, moniker ); 2D {geometry_type} operator description API {circle} \u25ef circle {square} \u25fb square {rect} {rectangle} \u25ad rect {triangle} {tri} \u25b3 triangle 3D {geometry} operator description API {sphere} \ud83c\udfc0 circle {cube} cube {cuboid} \u25f3 cuboid {pyramid} pyramid add_reg({locat}, moniker ); add_region({locat}, moniker );","title":"Posits"},{"location":"physic/obj/room/","text":"Room (object) The 'room' object is a representation of a physical enclosed space. Declaration The default declaration of the room object is to at least provide a moniker . There are no types of the room object . add_room( moniker ); Referencing To reference room , use, either the with verb or the shortened syntax using brackets ( () ). with_room( moniker ); ( room_moniker ); Verbs verb_ Description API enter_ The proceeding room has the adjacent object entering (or will enter) into the proceeding room enter exit_ The proceeding room has the adjacent object exiting (or will exit) out of the proceeding room exit Properties property Description API shape Shape of the room shape width Width (length on x-plane) of the room width length Length (length on y-plane) of the room length height Height (length on z-plane) of the room height","title":"Room (object)"},{"location":"physic/obj/room/#room-object","text":"The 'room' object is a representation of a physical enclosed space.","title":"Room (object)"},{"location":"physic/obj/room/#declaration","text":"The default declaration of the room object is to at least provide a moniker . There are no types of the room object . add_room( moniker );","title":"Declaration"},{"location":"physic/obj/room/#referencing","text":"To reference room , use, either the with verb or the shortened syntax using brackets ( () ). with_room( moniker ); ( room_moniker );","title":"Referencing"},{"location":"physic/obj/room/#verbs","text":"verb_ Description API enter_ The proceeding room has the adjacent object entering (or will enter) into the proceeding room enter exit_ The proceeding room has the adjacent object exiting (or will exit) out of the proceeding room exit","title":"Verbs"},{"location":"physic/obj/room/#properties","text":"property Description API shape Shape of the room shape width Width (length on x-plane) of the room width length Length (length on y-plane) of the room length height Height (length on z-plane) of the room height","title":"Properties"},{"location":"physic/obj/sensor/","text":"Sensor (object) A sensor is an child object of a thing (and/or a child object of a module ) that records specific data from its environment. Data is usually communicated through stat s and metric s. Syntax The default declaration syntax is to provide at least the sensor moniker and type: add_sensor({ type }, moniker ); add_sensor( moniker )_type( type ); Some commonly used sensors have their own object name, so in syntax declaring the type is not neccesary, for example: add_compass( moniker ); add_tacho( moniker ); Where a sensor is combined with other sensors, this is known as a module . A module is optional, however, more granuality is provided if used. The syntax, is such: add_module({ type }, moniker ); add_module( moniker )_type( type ); add_module({ type }, moniker )_sensor({ type }, moniker ); add_module( moniker )_type( type )_sensor( moniker )_type( type ); Some commonly used modules have their own object name, so in syntax declaring the type is not neccesary, for example: add_imu( moniker ); add_oplight( moniker ); Example Many sensor declarations are used when serialising a new robot, for example: use_namespace(alif_setup)_me(); with_me() add_lidar(lidar); ; Sensor Types sensor type definition {accelero} _type(accelero) Accelerometer A tool that measures proper acceleration. {amblight} _type(amblight) Ambient Light Sensor A type of photoelectric sensor that is used to sense the amount of ambient light present, and appropriately dim. See modules oplight . {amp} _type(amp) Amplifier An electronic component for increasing the amplitude of electrical signals, used chiefly in sound reproduction. {colo} _type(colo) _colo() Colour Sensor A type of photoelectric sensor which emits light from a transmitter, and then detects the light reflected back from the detection object with a receiver. See derivative: colo . See sensors: photoelect . See modules: optical . {compass} _type(compass) _compass() Compass a device that shows the cardinal directions used for navigation and geographic orientation. Usually combined into an imu . See modules: magnet ; ins ; gnss/ins ; imu ; agm . {curren} _type(curren) Current Sensor A component that detects and converts current to an easily measurable output voltage, which is proportional to the current through the measured path. {encode} _type(encode) Encoder A one-hot to binary converter. {float} _type(float) Float Sensor A a type of level sensor, a component used to detect the level of liquid within a tank. See sensors: level . {flow} _type(flow) Flow Sensor An electronic component that measures or regulates the flow rate of liquids and gasses within pipes and tubes. {force} _type(force) Force Sensor A component that converts the magnitude of force into related electrical signals. {gas} _type(gas) Gas Sensor A component that detects the presence of gases in an area, often as part of a safety system. {gyro} _type(gyro) _gyro() Gyroscope A component used for measuring or maintaining orientation and angular velocity. Usually combined into an imu . See modules: ins ; gnss/ins ; imu ; agm ; motion . {hygro} _type(hygro) Hygrometer / Humidity (Moisture) Sensor A component used to measure the amount of water vapor in air, in soil, or in confined spaces. {inclino} _type(inclino) Inclinometer / Clinometer An instrument used for measuring angles of slope, elevation, or depression of an object with respect to gravity's direction. See modules: ins ; gnss/ins ; imu ; agm . {irda} _type(irda) IrDA Transceiver Module Hardware that sends information from an infrared remote control to another device by receiving and decoding signals. {level} _type(level) Level Sensor / Float Level Sensor Used to detect the level of liquids and other fluids and fluidized solids, including slurries, granular materials, and powders that exhibit an upper free surface. See sensors: float . {linear} _type(linear) Linear Position Sensor Measures the distance between an object and a point of reference, as well as changes in position. See sensors: posit ; prox . See modules: magnet . {lvdt} _type(lvdt) LVDT Transducer A device that converts energy from one form to another. {mems} _type(mems) Magnet Field Sensor / MEMS / Magnetic Sensor A small-scale microelectromechanical systems device for detecting and measuring magnetic fields. See modules: magnet . {posit} _type(posit) Position Sensor Measures the distance between an object and a point of reference. See sensors: linear ; prox . See modules: magnet . {press} _type(press) Pressure Sensor A device for pressure measurement of gases or liquids. See modules: pth . {prox} _type(prox) Proximity Sensor A sensor able to detect the presence of nearby objects without any physical contact. See sensors: posit ; linear . See modules: magnet . {tacho} _type(tacho) _tacho() Tachometer / Speed Sensor A sender device used for reading the speed of a vehicle's wheel rotation.. See modules: magnet . {thermo} _type(thermo) _thermo() Thermometer / Temperature Sensor A two terminal integrated circuit temperature transducer that produces an output current proportional to absolute temperature. See modules: magnet . {tilt} _type(tilt) Tilt Sensor A device used for measuring the tilt of an object in multiple axes with reference to an absolute level plane. {vibrat} _type(vibrat) Vibration Sensor A device that measures the amount and frequency of vibration in a given system, machine, or piece of equipment. Module Types sensor type definition {imu} _type(imu) _imu() Inertial Measurement Unit IMUs can carry: accelerometer ; gyroscopes ;... thermometer ; linear position sensor ; tachometer {magnet} _type(magnet) Magnetic Module Magnetic modules can carry: compass ; magnetic field sensor ; thermometer ; linear position sensor ; tachometer {motion} _type(motion) Motion Sensors Motion modules can carry: accelerometer ; gyroscopes ;... thermometer ; linear position sensor ; tachometer {oplight} _type(oplight) _oplight() Optical Light Module Motion modules can carry: ambient light sensor ; infra-red light sensor ; ultra-violet light sensor . {pth} _type(pth) Pressure / Temperature/ Humidity Module Motion modules can carry: pressure sensor ; thermometer ; hygrometer . | sensor | The thing version of an apparatus . See also: apparat |","title":"Sensor (object)"},{"location":"physic/obj/sensor/#sensor-object","text":"A sensor is an child object of a thing (and/or a child object of a module ) that records specific data from its environment. Data is usually communicated through stat s and metric s.","title":"Sensor (object)"},{"location":"physic/obj/sensor/#syntax","text":"The default declaration syntax is to provide at least the sensor moniker and type: add_sensor({ type }, moniker ); add_sensor( moniker )_type( type ); Some commonly used sensors have their own object name, so in syntax declaring the type is not neccesary, for example: add_compass( moniker ); add_tacho( moniker ); Where a sensor is combined with other sensors, this is known as a module . A module is optional, however, more granuality is provided if used. The syntax, is such: add_module({ type }, moniker ); add_module( moniker )_type( type ); add_module({ type }, moniker )_sensor({ type }, moniker ); add_module( moniker )_type( type )_sensor( moniker )_type( type ); Some commonly used modules have their own object name, so in syntax declaring the type is not neccesary, for example: add_imu( moniker ); add_oplight( moniker );","title":"Syntax"},{"location":"physic/obj/sensor/#example","text":"Many sensor declarations are used when serialising a new robot, for example: use_namespace(alif_setup)_me(); with_me() add_lidar(lidar); ;","title":"Example"},{"location":"physic/obj/sensor/#sensor-types","text":"sensor type definition {accelero} _type(accelero) Accelerometer A tool that measures proper acceleration. {amblight} _type(amblight) Ambient Light Sensor A type of photoelectric sensor that is used to sense the amount of ambient light present, and appropriately dim. See modules oplight . {amp} _type(amp) Amplifier An electronic component for increasing the amplitude of electrical signals, used chiefly in sound reproduction. {colo} _type(colo) _colo() Colour Sensor A type of photoelectric sensor which emits light from a transmitter, and then detects the light reflected back from the detection object with a receiver. See derivative: colo . See sensors: photoelect . See modules: optical . {compass} _type(compass) _compass() Compass a device that shows the cardinal directions used for navigation and geographic orientation. Usually combined into an imu . See modules: magnet ; ins ; gnss/ins ; imu ; agm . {curren} _type(curren) Current Sensor A component that detects and converts current to an easily measurable output voltage, which is proportional to the current through the measured path. {encode} _type(encode) Encoder A one-hot to binary converter. {float} _type(float) Float Sensor A a type of level sensor, a component used to detect the level of liquid within a tank. See sensors: level . {flow} _type(flow) Flow Sensor An electronic component that measures or regulates the flow rate of liquids and gasses within pipes and tubes. {force} _type(force) Force Sensor A component that converts the magnitude of force into related electrical signals. {gas} _type(gas) Gas Sensor A component that detects the presence of gases in an area, often as part of a safety system. {gyro} _type(gyro) _gyro() Gyroscope A component used for measuring or maintaining orientation and angular velocity. Usually combined into an imu . See modules: ins ; gnss/ins ; imu ; agm ; motion . {hygro} _type(hygro) Hygrometer / Humidity (Moisture) Sensor A component used to measure the amount of water vapor in air, in soil, or in confined spaces. {inclino} _type(inclino) Inclinometer / Clinometer An instrument used for measuring angles of slope, elevation, or depression of an object with respect to gravity's direction. See modules: ins ; gnss/ins ; imu ; agm . {irda} _type(irda) IrDA Transceiver Module Hardware that sends information from an infrared remote control to another device by receiving and decoding signals. {level} _type(level) Level Sensor / Float Level Sensor Used to detect the level of liquids and other fluids and fluidized solids, including slurries, granular materials, and powders that exhibit an upper free surface. See sensors: float . {linear} _type(linear) Linear Position Sensor Measures the distance between an object and a point of reference, as well as changes in position. See sensors: posit ; prox . See modules: magnet . {lvdt} _type(lvdt) LVDT Transducer A device that converts energy from one form to another. {mems} _type(mems) Magnet Field Sensor / MEMS / Magnetic Sensor A small-scale microelectromechanical systems device for detecting and measuring magnetic fields. See modules: magnet . {posit} _type(posit) Position Sensor Measures the distance between an object and a point of reference. See sensors: linear ; prox . See modules: magnet . {press} _type(press) Pressure Sensor A device for pressure measurement of gases or liquids. See modules: pth . {prox} _type(prox) Proximity Sensor A sensor able to detect the presence of nearby objects without any physical contact. See sensors: posit ; linear . See modules: magnet . {tacho} _type(tacho) _tacho() Tachometer / Speed Sensor A sender device used for reading the speed of a vehicle's wheel rotation.. See modules: magnet . {thermo} _type(thermo) _thermo() Thermometer / Temperature Sensor A two terminal integrated circuit temperature transducer that produces an output current proportional to absolute temperature. See modules: magnet . {tilt} _type(tilt) Tilt Sensor A device used for measuring the tilt of an object in multiple axes with reference to an absolute level plane. {vibrat} _type(vibrat) Vibration Sensor A device that measures the amount and frequency of vibration in a given system, machine, or piece of equipment.","title":"Sensor Types"},{"location":"physic/obj/sensor/#module-types","text":"sensor type definition {imu} _type(imu) _imu() Inertial Measurement Unit IMUs can carry: accelerometer ; gyroscopes ;... thermometer ; linear position sensor ; tachometer {magnet} _type(magnet) Magnetic Module Magnetic modules can carry: compass ; magnetic field sensor ; thermometer ; linear position sensor ; tachometer {motion} _type(motion) Motion Sensors Motion modules can carry: accelerometer ; gyroscopes ;... thermometer ; linear position sensor ; tachometer {oplight} _type(oplight) _oplight() Optical Light Module Motion modules can carry: ambient light sensor ; infra-red light sensor ; ultra-violet light sensor . {pth} _type(pth) Pressure / Temperature/ Humidity Module Motion modules can carry: pressure sensor ; thermometer ; hygrometer . | sensor | The thing version of an apparatus . See also: apparat |","title":"Module Types"},{"location":"physic/obj/shaft/","text":"Shaft (object)","title":"Shaft (object)"},{"location":"physic/obj/shaft/#shaft-object","text":"","title":"Shaft (object)"},{"location":"physic/obj/side/","text":"Side (object)","title":"Side (object)"},{"location":"physic/obj/side/#side-object","text":"","title":"Side (object)"},{"location":"physic/obj/sobot/","text":"Sobot (object) A sobot is a stationary robot , that although can be self-propelled, does not necessarily interact physically in the physical world outside its own environment, such as a robot arm . The computer has also been included as a derived sobot . The sobot is derived from a robot , and a robot is derived from thingy . This is depicted in the 'Sobot Hierarchy'. flowchart LR thingy([thingy]) --> robot([robot]) robot --> sobot sobot --> computer(computer) sobot --> arm(arm) Sobot Hierarchy Declaration The default declaration of the sobot object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The two derived objects can be declared by name. add_sobot( moniker ); add_sobot({ type }, moniker ); add_computer( moniker ); add_arm( moniker ); Referencing To reference the sobot , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_sobot( moniker ); with_sobot({ type , moniker ); with_computer( moniker ); with_arm( moniker ); ( sobot_moniker ); ( computer_moniker ); ( arm_moniker ); Posits method description API _ident() Provides or sets identity information. ident Ident","title":"Sobot (object)"},{"location":"physic/obj/sobot/#sobot-object","text":"A sobot is a stationary robot , that although can be self-propelled, does not necessarily interact physically in the physical world outside its own environment, such as a robot arm . The computer has also been included as a derived sobot . The sobot is derived from a robot , and a robot is derived from thingy . This is depicted in the 'Sobot Hierarchy'. flowchart LR thingy([thingy]) --> robot([robot]) robot --> sobot sobot --> computer(computer) sobot --> arm(arm) Sobot Hierarchy","title":"Sobot (object)"},{"location":"physic/obj/sobot/#declaration","text":"The default declaration of the sobot object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The two derived objects can be declared by name. add_sobot( moniker ); add_sobot({ type }, moniker ); add_computer( moniker ); add_arm( moniker );","title":"Declaration"},{"location":"physic/obj/sobot/#referencing","text":"To reference the sobot , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_sobot( moniker ); with_sobot({ type , moniker ); with_computer( moniker ); with_arm( moniker ); ( sobot_moniker ); ( computer_moniker ); ( arm_moniker );","title":"Referencing"},{"location":"physic/obj/sobot/#posits","text":"method description API _ident() Provides or sets identity information. ident","title":"Posits"},{"location":"physic/obj/sobot/#ident","text":"","title":"Ident"},{"location":"physic/obj/spec/","text":"Specification (object) | spec [ification] | See also: attribute |","title":"Specification (object)"},{"location":"physic/obj/spec/#specification-object","text":"| spec [ification] | See also: attribute |","title":"Specification (object)"},{"location":"physic/obj/stair/","text":"Stairs (object) https://specializedstairs.com/anatomy-of-a-staircase/ _stringer(open, closed, mono","title":"Stairs (object)"},{"location":"physic/obj/stair/#stairs-object","text":"https://specializedstairs.com/anatomy-of-a-staircase/ _stringer(open, closed, mono","title":"Stairs (object)"},{"location":"physic/obj/stride/","text":"Stride (object) | stride | The human version of gait |","title":"Stride (object)"},{"location":"physic/obj/stride/#stride-object","text":"| stride | The human version of gait |","title":"Stride (object)"},{"location":"physic/obj/switch/","text":"Switch (object) A switch is an child object of a thing that records specific boolean data from its environment. Data is usually communicated through flag s. Syntax The default declaration syntax is to provide at least the switch name and type: add_switch{ type }, moniker ); add_switch( moniker )_type( type ); Just referencing the switch, or using an empty _value() posit will read the state of the switch. To set the state of the switch, the _set , or, _on() / _off() , or, _true() / _false() , or, valued _value posits can be used (if write access): Get: with_switch( moniker ); with_switch( moniker )_value(); with_switch( moniker )_tovar( variablename ); Set: with_switch{ moniker )_set( boolean ); with_switch{ moniker )_value( boolean ); with_switch{ moniker )_on(); with_switch{ moniker )_off(); with_switch{ moniker )_true(); with_switch{ moniker )_false(); with_switch{ moniker )_value( boolean ); with_switch{ moniker )_value([ variablename ]); Switch Types sensor type access definition {level} _type(level) read-only Level Switch / Float Level Switch A component used to detect when the level of liquid rises to a set level, within a tank. {light} _type(light) read write Light Switch A switch most commonly used to operate electric lights, permanently connected equipment, or electrical outlets. {prox} _type(prox) read-only Proximity Switch A sensor able to detect when the presence of nearby objects are at a set displacement. {relay} _type(relay) read write Solid State Relay / Solid State Switch An electronic switching device that switches on or off when an external voltage is applied across its control terminals. {tilt} _type(tilt) read write Tilt Switch A device triggered when the tilt of an object in multiple axes has reference to an absolute level plane.","title":"Switch (object)"},{"location":"physic/obj/switch/#switch-object","text":"A switch is an child object of a thing that records specific boolean data from its environment. Data is usually communicated through flag s.","title":"Switch (object)"},{"location":"physic/obj/switch/#syntax","text":"The default declaration syntax is to provide at least the switch name and type: add_switch{ type }, moniker ); add_switch( moniker )_type( type ); Just referencing the switch, or using an empty _value() posit will read the state of the switch. To set the state of the switch, the _set , or, _on() / _off() , or, _true() / _false() , or, valued _value posits can be used (if write access): Get: with_switch( moniker ); with_switch( moniker )_value(); with_switch( moniker )_tovar( variablename ); Set: with_switch{ moniker )_set( boolean ); with_switch{ moniker )_value( boolean ); with_switch{ moniker )_on(); with_switch{ moniker )_off(); with_switch{ moniker )_true(); with_switch{ moniker )_false(); with_switch{ moniker )_value( boolean ); with_switch{ moniker )_value([ variablename ]);","title":"Syntax"},{"location":"physic/obj/switch/#switch-types","text":"sensor type access definition {level} _type(level) read-only Level Switch / Float Level Switch A component used to detect when the level of liquid rises to a set level, within a tank. {light} _type(light) read write Light Switch A switch most commonly used to operate electric lights, permanently connected equipment, or electrical outlets. {prox} _type(prox) read-only Proximity Switch A sensor able to detect when the presence of nearby objects are at a set displacement. {relay} _type(relay) read write Solid State Relay / Solid State Switch An electronic switching device that switches on or off when an external voltage is applied across its control terminals. {tilt} _type(tilt) read write Tilt Switch A device triggered when the tilt of an object in multiple axes has reference to an absolute level plane.","title":"Switch Types"},{"location":"physic/obj/tablet/","text":"Tablet (object) The tablet object is a derived mobot , representing a tablet computer, a mobile device, typically with a mobile operating system and touchscreen display processing circuitry, and a rechargeable battery in a single, thin and flat package. flowchart LR thingy((thingy)) --> thing([thing]) thing --> mobot mobot --> tablet(tablet) Tablet Hierarchy Declaration The default declaration of the tablet object is to at least provide a moniker . There are no types of the computer object . The tablet object can also be declared by casting mobot . add_tablet( moniker ); add_mobot({tablet}, moniker ); Referencing To reference tablet , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_tablet( moniker ); ( tablet_moniker ); Posits posit description API","title":"Tablet (object)"},{"location":"physic/obj/tablet/#tablet-object","text":"The tablet object is a derived mobot , representing a tablet computer, a mobile device, typically with a mobile operating system and touchscreen display processing circuitry, and a rechargeable battery in a single, thin and flat package. flowchart LR thingy((thingy)) --> thing([thing]) thing --> mobot mobot --> tablet(tablet) Tablet Hierarchy","title":"Tablet (object)"},{"location":"physic/obj/tablet/#declaration","text":"The default declaration of the tablet object is to at least provide a moniker . There are no types of the computer object . The tablet object can also be declared by casting mobot . add_tablet( moniker ); add_mobot({tablet}, moniker );","title":"Declaration"},{"location":"physic/obj/tablet/#referencing","text":"To reference tablet , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_tablet( moniker ); ( tablet_moniker );","title":"Referencing"},{"location":"physic/obj/tablet/#posits","text":"posit description API","title":"Posits"},{"location":"physic/obj/thing/","text":"Thing (object) A thing is a conveyed robot , that is not self-propelled, but interacts physically in the physical world, such as a cell phone .","title":"Thing (object)"},{"location":"physic/obj/thing/#thing-object","text":"A thing is a conveyed robot , that is not self-propelled, but interacts physically in the physical world, such as a cell phone .","title":"Thing (object)"},{"location":"physic/obj/thingy/","text":"Thingy (object) In the 'Genera of Thingies' the thingy object is the top most representation of all physical objects. flowchart TD thingy((thingy)) --> human([human]) thingy --> organic([organic]) thingy --> robot([robot]) thingy --> thing([thing]) human --> vehicle(vehicle) robot --> sobot(sobot) thing --> mach(mach) thing --> mobot(mobot) thing --> ject(ject) sobot --> pc{{computer}} mobot --> cellphone{{cellphone}} mobot --> tablet{{tablet}} mach --> applian{{applian}} ject --> object{{object}} ject --> subject{{subject}} ject --> mech{{mech}} Genera of Thingy Sub-Types | Organic Types Declaration The default declaration of the thingy object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The four derived objects can be declared by name. add_thingy( moniker ); add_thingy({ type }, moniker ); add_human( moniker ); add_organic( moniker ); add_robot( moniker ); add_thing( moniker ); Referencing To reference the thingy , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_thingy( moniker ); with_thingy({ type , moniker ); with_human( moniker ); with_organic( moniker ); ( robot_moniker ); ( thing_moniker ); Typing The types of thingy are those objects thingy derives into: {human} ; {organic} ; {robot} ; and, thing . {type} operator description API {human} :: A representation of a human being, present and alive in the physical 'real' world. human {organic} {org} {organism} :: Representation of a non-human being, present and alive in the physical 'real' world. organic {robot} :: Representation of a self-propelled thingy in the physical 'real' world. robot {thing} :: An immobile thingy in the physical 'real' world, such as a thing in IoT. thing Posits method description API _ident() Provides or sets identity information. ident Ident","title":"Thingy (object)"},{"location":"physic/obj/thingy/#thingy-object","text":"In the 'Genera of Thingies' the thingy object is the top most representation of all physical objects. flowchart TD thingy((thingy)) --> human([human]) thingy --> organic([organic]) thingy --> robot([robot]) thingy --> thing([thing]) human --> vehicle(vehicle) robot --> sobot(sobot) thing --> mach(mach) thing --> mobot(mobot) thing --> ject(ject) sobot --> pc{{computer}} mobot --> cellphone{{cellphone}} mobot --> tablet{{tablet}} mach --> applian{{applian}} ject --> object{{object}} ject --> subject{{subject}} ject --> mech{{mech}} Genera of Thingy Sub-Types | Organic Types","title":"Thingy (object)"},{"location":"physic/obj/thingy/#declaration","text":"The default declaration of the thingy object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The four derived objects can be declared by name. add_thingy( moniker ); add_thingy({ type }, moniker ); add_human( moniker ); add_organic( moniker ); add_robot( moniker ); add_thing( moniker );","title":"Declaration"},{"location":"physic/obj/thingy/#referencing","text":"To reference the thingy , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_thingy( moniker ); with_thingy({ type , moniker ); with_human( moniker ); with_organic( moniker ); ( robot_moniker ); ( thing_moniker );","title":"Referencing"},{"location":"physic/obj/thingy/#typing","text":"The types of thingy are those objects thingy derives into: {human} ; {organic} ; {robot} ; and, thing . {type} operator description API {human} :: A representation of a human being, present and alive in the physical 'real' world. human {organic} {org} {organism} :: Representation of a non-human being, present and alive in the physical 'real' world. organic {robot} :: Representation of a self-propelled thingy in the physical 'real' world. robot {thing} :: An immobile thingy in the physical 'real' world, such as a thing in IoT. thing","title":"Typing"},{"location":"physic/obj/thingy/#posits","text":"method description API _ident() Provides or sets identity information. ident","title":"Posits"},{"location":"physic/obj/thingy/#ident","text":"","title":"Ident"},{"location":"physic/obj/tri/","text":"Triangle (object)","title":"Triangle (object)"},{"location":"physic/obj/tri/#triangle-object","text":"","title":"Triangle (object)"},{"location":"physic/obj/valley/","text":"Valley (object)","title":"Valley (object)"},{"location":"physic/obj/valley/#valley-object","text":"","title":"Valley (object)"},{"location":"physic/obj/vehicle/","text":"Vehicle (object) The vehicle object is a derived human , representing a propelled thingy that transports the human who is controlling it. Similarly a thingy that was originally designed to transport the human who is controlling it, but then later modified to be self-controlled and not carry the human who is controlling it, is still a vehicle but an unmanned one. flowchart LR thingy((thingy)) --> human([human]) human --> vehicle Vehicle Hierarchy Declaration The default declaration of the vehicle object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. The vehicle object can also be declared by casting robot . However, this will imply that the vehicle is a child of the human . add_vehicle( moniker ); add_vehicle({ type }, moniker ); add_ <type> ( moniker ); add_human({vehicle}, moniker ); Referencing To reference vehicle , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_vehicle( moniker ); with_vehicle({ type , moniker ); ( vehicle_moniker ); ( vehicle_type_moniker ); Posits posit operator description API _car() _car( moniker ) _vehicle({ car }, moniker ) \ud83d\ude97 A wheeled motor vehicle that is used for transportation of mainly people instead of goods. car _truck() _lorry() _van() _truck( moniker ) _lorry( moniker ) _van( moniker ) _vehicle({ truck }, moniker ) \ud83d\ude9a A motor vehicle designed to transport cargo, carry specialized payloads, or perform other utilitarian work. truck _airplane() _airplane( moniker ) _vehicle({ airplane }, moniker ) \u2708 \ud83d\udee9 A fixed-wing aircraft that is propelled forward by thrust from a jet engine, propeller, or rocket engine. airplane _bus() _bus( moniker ) _bus({ airplane }, moniker ) \ud83d\ude8c A road vehicle that carries significantly more passengers than an average car or van. bus _plane() _( moniker ) _({ unit }, moniker ) _hovercraft() _hovercraft( moniker ) _({ unit }, moniker ) _spacecraft() _spacecraft( moniker ) _({ unit }, moniker ) _ship() _boat( moniker ) _vehicle({ ship }, moniker ) \u26f5 \ud83d\udee5 _submarine() _submarine( moniker ) _vehicle({ submarine }, moniker ) _blimp() _blimp( moniker ) _({ unit }, moniker ) . _cycle() _bicycle() _cycle( moniker ) _vehicle({ cycle }, moniker ) _bicycle( moniker ) \ud83d\udeb2 A representation of a human-powered or motor-powered assisted, pedal-driven, single-track vehicle, wheels attached to a frame. cycle _mcycle() _motorcycle() _motorbike() ( moniker ) _({ unit }, moniker ) \ud83c\udfcd _train() _train( moniker ) _vehicle({ train }, moniker ) \ud83d\ude86 _tram() _( moniker ) _({ unit }, moniker ) aircraft - airplane, seaplane, airboat, blimp watercraft - ship, boat, submarine cycle - bicycle, unicycle, tandem https://cocodataset.org/#home Cars","title":"Vehicle (object)"},{"location":"physic/obj/vehicle/#vehicle-object","text":"The vehicle object is a derived human , representing a propelled thingy that transports the human who is controlling it. Similarly a thingy that was originally designed to transport the human who is controlling it, but then later modified to be self-controlled and not carry the human who is controlling it, is still a vehicle but an unmanned one. flowchart LR thingy((thingy)) --> human([human]) human --> vehicle Vehicle Hierarchy","title":"Vehicle (object)"},{"location":"physic/obj/vehicle/#declaration","text":"The default declaration of the vehicle object is to at least provide a moniker . A type can be provided at declaration using curly brackets ( {} ). The derived objects can be declared by name. The vehicle object can also be declared by casting robot . However, this will imply that the vehicle is a child of the human . add_vehicle( moniker ); add_vehicle({ type }, moniker ); add_ <type> ( moniker ); add_human({vehicle}, moniker );","title":"Declaration"},{"location":"physic/obj/vehicle/#referencing","text":"To reference vehicle , use, either the with verb or the shortened syntax using brackets ( () ). The type is implied from the declaration, or can be cast when referenced. with_vehicle( moniker ); with_vehicle({ type , moniker ); ( vehicle_moniker ); ( vehicle_type_moniker );","title":"Referencing"},{"location":"physic/obj/vehicle/#posits","text":"posit operator description API _car() _car( moniker ) _vehicle({ car }, moniker ) \ud83d\ude97 A wheeled motor vehicle that is used for transportation of mainly people instead of goods. car _truck() _lorry() _van() _truck( moniker ) _lorry( moniker ) _van( moniker ) _vehicle({ truck }, moniker ) \ud83d\ude9a A motor vehicle designed to transport cargo, carry specialized payloads, or perform other utilitarian work. truck _airplane() _airplane( moniker ) _vehicle({ airplane }, moniker ) \u2708 \ud83d\udee9 A fixed-wing aircraft that is propelled forward by thrust from a jet engine, propeller, or rocket engine. airplane _bus() _bus( moniker ) _bus({ airplane }, moniker ) \ud83d\ude8c A road vehicle that carries significantly more passengers than an average car or van. bus _plane() _( moniker ) _({ unit }, moniker ) _hovercraft() _hovercraft( moniker ) _({ unit }, moniker ) _spacecraft() _spacecraft( moniker ) _({ unit }, moniker ) _ship() _boat( moniker ) _vehicle({ ship }, moniker ) \u26f5 \ud83d\udee5 _submarine() _submarine( moniker ) _vehicle({ submarine }, moniker ) _blimp() _blimp( moniker ) _({ unit }, moniker ) . _cycle() _bicycle() _cycle( moniker ) _vehicle({ cycle }, moniker ) _bicycle( moniker ) \ud83d\udeb2 A representation of a human-powered or motor-powered assisted, pedal-driven, single-track vehicle, wheels attached to a frame. cycle _mcycle() _motorcycle() _motorbike() ( moniker ) _({ unit }, moniker ) \ud83c\udfcd _train() _train( moniker ) _vehicle({ train }, moniker ) \ud83d\ude86 _tram() _( moniker ) _({ unit }, moniker ) aircraft - airplane, seaplane, airboat, blimp watercraft - ship, boat, submarine cycle - bicycle, unicycle, tandem https://cocodataset.org/#home","title":"Posits"},{"location":"physic/obj/vehicle/#cars","text":"","title":"Cars"},{"location":"physic/obj/wall/","text":"Wall (object)","title":"Wall (object)"},{"location":"physic/obj/wall/#wall-object","text":"","title":"Wall (object)"},{"location":"physic/obj/wayfind/","text":"Wayfind (object) | wayfind | Wayfinding floor signature, created using paint, tape, or, decals. Example: \" Tokyo Station \" by mrhayata is licensed under CC BY 2.0 | route | wayfind |","title":"Wayfind (object)"},{"location":"physic/obj/wayfind/#wayfind-object","text":"| wayfind | Wayfinding floor signature, created using paint, tape, or, decals. Example: \" Tokyo Station \" by mrhayata is licensed under CC BY 2.0 | route | wayfind |","title":"Wayfind (object)"},{"location":"physic/prop/air/","text":"Air Speed (property) Maximum Air Speed (property)","title":"Air Speed (property)"},{"location":"physic/prop/air/#air-speed-property","text":"Maximum Air Speed (property)","title":"Air Speed (property)"},{"location":"physic/prop/alt/","text":"Altitude (property) normal_operating_altitude | _opalt() _opalt( normal_operating_altitude ) _({ unit }, normal_operating_altitude ) | Provides / declares the normal operating altitude of the drone. | opalt | *AGL = Above Ground Level **MSL = Mean Sea Level Note: If the UAS has even one characteristic of the next level, it is classified in that level. Source: \u201c Eyes of the Army (link is external) \u201d U.S. Army Roadmap for UAS 2010-2035","title":"Altitude (property)"},{"location":"physic/prop/alt/#altitude-property","text":"normal_operating_altitude | _opalt() _opalt( normal_operating_altitude ) _({ unit }, normal_operating_altitude ) | Provides / declares the normal operating altitude of the drone. | opalt | *AGL = Above Ground Level **MSL = Mean Sea Level Note: If the UAS has even one characteristic of the next level, it is classified in that level. Source: \u201c Eyes of the Army (link is external) \u201d U.S. Army Roadmap for UAS 2010-2035","title":"Altitude (property)"},{"location":"physic/prop/android/","text":"Android Operating System (property) | {android} {google} | :: | Cell phone running on Google\u00ae Android\u2122. | android |","title":"Android Operating System (property)"},{"location":"physic/prop/android/#android-operating-system-property","text":"| {android} {google} | :: | Cell phone running on Google\u00ae Android\u2122. | android |","title":"Android Operating System (property)"},{"location":"physic/prop/bb/","text":"Blackberry Operating System (property)","title":"Blackberry Operating System (property)"},{"location":"physic/prop/bb/#blackberry-operating-system-property","text":"","title":"Blackberry Operating System (property)"},{"location":"physic/prop/cap/","text":"Capacity (object) Battery The capacity of a battery (usually in Ah \u276cAh\u276d )","title":"Capacity (object)"},{"location":"physic/prop/cap/#capacity-object","text":"","title":"Capacity (object)"},{"location":"physic/prop/cap/#battery","text":"The capacity of a battery (usually in Ah \u276cAh\u276d )","title":"Battery"},{"location":"physic/prop/country/","text":"Country (property)","title":"Country (property)"},{"location":"physic/prop/country/#country-property","text":"","title":"Country (property)"},{"location":"physic/prop/imei/","text":"International Mobile Equipment Identity (property)","title":"International Mobile Equipment Identity (property)"},{"location":"physic/prop/imei/#international-mobile-equipment-identity-property","text":"","title":"International Mobile Equipment Identity (property)"},{"location":"physic/prop/ios/","text":"Apple\u00ae iOS\u2122 Operating System (property) | {ios} {iphone} {apple} | :: | Cell phone running on Apple\u00ae iOS\u2122. | ios |","title":"Apple&reg; iOS&#8482; Operating System (property)"},{"location":"physic/prop/ios/#apple-ios-operating-system-property","text":"| {ios} {iphone} {apple} | :: | Cell phone running on Apple\u00ae iOS\u2122. | ios |","title":"Apple&reg; iOS&#8482; Operating System (property)"},{"location":"physic/prop/opframe/","text":"Operating Framework","title":"Operating Framework"},{"location":"physic/prop/opframe/#operating-framework","text":"","title":"Operating Framework"},{"location":"physic/prop/phonenum/","text":"Telephone Number (property) <object> _phonenum( phone_mumber ); <object> _phonenum( cc , nc , ndc , sn ); add_cellphone({ type }, moniker ); add_cellphone( moniker );","title":"Telephone Number (property)"},{"location":"physic/prop/phonenum/#telephone-number-property","text":"<object> _phonenum( phone_mumber ); <object> _phonenum( cc , nc , ndc , sn ); add_cellphone({ type }, moniker ); add_cellphone( moniker );","title":"Telephone Number (property)"},{"location":"physic/prop/status/","text":"Status (property) drones status enum notes unknown error err -1 Unknown status null 0 No status in-flight if 1 Drone is currently in flight ground grd 2 Drone is grounded","title":"Status (property)"},{"location":"physic/prop/status/#status-property","text":"drones status enum notes unknown error err -1 Unknown status null 0 No status in-flight if 1 Drone is currently in flight ground grd 2 Drone is grounded","title":"Status (property)"},{"location":"physic/prop/win/","text":"Microsoft\u00ae Windows\u2122 Operating System (property)","title":"Microsoft&reg; Windows&#8482; Operating System (property)"},{"location":"physic/prop/win/#microsoft-windows-operating-system-property","text":"","title":"Microsoft&reg; Windows&#8482; Operating System (property)"},{"location":"physic/prop/win_mobile/","text":"Microsoft\u00ae Windows Mobile (property)","title":"Microsoft&reg; Windows Mobile (property)"},{"location":"physic/prop/win_mobile/#microsoft-windows-mobile-property","text":"","title":"Microsoft&reg; Windows Mobile (property)"},{"location":"physic/special/world/","text":"World (special)","title":"World (special)"},{"location":"physic/special/world/#world-special","text":"","title":"World (special)"},{"location":"physic/verb/alert/","text":"Alert (verb)","title":"Alert (verb)"},{"location":"physic/verb/alert/#alert-verb","text":"","title":"Alert (verb)"},{"location":"physic/verb/enter/","text":"Enter (verb) room enter_room(garage)_human(bob); enter_room(garage)_forof(bob);","title":"Enter (verb)"},{"location":"physic/verb/enter/#enter-verb","text":"room enter_room(garage)_human(bob); enter_room(garage)_forof(bob);","title":"Enter (verb)"},{"location":"physic/verb/exit/","text":"Exit (verb) room exit_room(garage)_human(bob); exit_room(garage)_forof(bob);","title":"Exit (verb)"},{"location":"physic/verb/exit/#exit-verb","text":"room exit_room(garage)_human(bob); exit_room(garage)_forof(bob);","title":"Exit (verb)"},{"location":"tasks/newton_loop/","text":"The Newton Loop The Newton Loop is a movement is based on the idea of a Newton's cradle whereby the The persian chain is a baton movement of three agents on an infinite repeating loop. Each To demonstrate this movement we are going to use three drones, a charging table, and, 10 waypoints. Namespace We are going to use common names, so we need to set up a namespace... use_namespace(persian_chain_demo); The Agents The agents of this Persian Chain demonstration will be 'alif', 'be' and , 'pe': add_robot(alif)_type(drone); add_robot(be)_type(drone); add_robot(pe)_type(drone); A Brave New World So first we are going to start setting up the physical world... // Set up physical world ready for the persian chain movement: begin_instruct(persian_chain_physicals)_for(alif, be, pe); add_thing(chargepoint)_type(chargepoint); add_object(table)_type(table); with_object(table)_thing(chargepoint); add_map(map)_scope(global)_unit(dd)_altitude(47)_coords(x_lat, y_long, z_height); with_map(map)_pluscode(53QJ+3V Baringa, Queensland); add_route(perimeter); add_waypoint(x0)_route(perimeter)_coords(-26.812298, 153.082254, ); add_waypoint(x1)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x2)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x3)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x4)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x5)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x6)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x7)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x8)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x9)_route(perimeter)_coords(-26.812298, 153.082254); add_rosary(perimeter_cc)_value(x0 \u2192 x1 \u2192 x2 \u2192 x3 \u2192 x4 \u2192 x5 \u2192 x6 \u2192 x7 \u2192 x8 \u2192 x9 \u2940 x0); with_route(perimeter)_rosary(perimeter_cc); add_var(penultimate_n)_dtype(0)_default(0); add_sobriquet(all_waypoints)_specificto(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); add_sobriquet(penultimate_waypoint); with_map(map)_object(table)_at(-26.812298, 153.082254); end_instruct(persian_chain_physicals); exec_instruct(persian_chain_physicals)_for(alif, be, pe); This is a simple composition instruction of the physical world for our three drones alif , be , and, pe . The table itself could have been a thingy , but instead we created it as an object with a thing child, the charger. The waypoints produce an perimeter route, called perimeter , sequenced from waypoint x0 to x9 in and counter-clockwise approach, around the house 21 Toyne Street, Baringa, QLD 4551, Australia. There is no elevation on this route as the map, map , is set at an altitude of 47m above sea level, a close approximation. We added a pluscode for the extent of the map. Finally the table, table has been placed on the map. We execute the instruction immediately. There is a Beginning to Everything To start the Persian Chain we need one active agent and two loitering agents. We also have starting positions. alif will be the first active agent starting at waypoint x9 to go along rosary perimeter_cc (on route perimeter ), be and pe be will be the loitering agents, and they will loiter around waypoints x5 and x6 respectively... begin_instruct(persian_chain_starting_positions)_for(alif, be, pe)_onceonly(); with_robot(alif)_sobriquet(active_agent); with_waypoint(x9)_sobriquet(active_startpoint); with_waypoint(x3)_sobriquet(active_endpoint); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_robot(be)_sobriquet(loiterer); go_robot(be)_rosary(perimeter_cc)_goto(x5) ? exec_instruct(loiterise_agent)_for(loiterer); with_robot(pe)_sobriquet(loiterer); go_robot(pe)_goto(x6) ? exec_instruct(loiterise_agent)_for(loiterer); end_instruct(persian_chain_starting_positions); We do not want to execute instruction persian_chain_starting_positions yet as the guys ( alif , be , and, pe ) don't know about instructions activate_agent and loiterise_agent . Active Agent In the Persian Chain Movement the active agent scouts around the route from a starting position to an ending position. When it arrives penultimate to its ending position, it has to inform the others... // Activate the active_agent to go on route `perimeter` begin_instruct(activate_agent)_for(active_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() : wtf(); with_robot(active_agent)_sobriquet(loiterer) ? : ; end_instruct(activate_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) With two commands one nested and concurrent in the other, we are instructing robot active_agent (which will be assigned previously) to follow rosary perimeter_cc (previously assigned to route perimeter ) from rosarypoint active_startpoint to rosarypoint active_endpoint . Concurrently, robot active_agent is triggered on the rosarypoint at active_endpoint minus one ( _change(--) ). ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() When active_agent reaches the penultimate rosarypoint of active_endpoint_change(-- ) it will execute start_persian_chain instruction. ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() Finally when active_agent has reached active_endpoint it will execute loiterise_agent instruction. with_robot(active_agent)_sobriquet(loiterer) ? : ; When all has been done active_agent becomes a loiterer . ... wtf() Throughout this code black when the fickle finger of fate is at work, the 'where's the fire' _wtf() is called to handle anything that's flung its way. We will try and handle any known-knowns that could come our way later. Loiter Agent So, above, we provided the 'activate_agent' instruction, now we need to build the instruction for loiterise_agent ... begin_instruct(loiterise_agent)_for(loiterer); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); end_instruct(loiterise_agent); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); There are actually two loitering agents, at this time we do not need to separate/differentiate them apart because this command is executed as a 'blanket' command (by default) for both (or any) robot (or thingies) sobriquetled loiterer . The default loitering parameters have been previously drilled into these drones when they were young, so there is no need to repeat them, just instruct the drones to _loiterat and they will know what to do. If they don't, there are many available packaging tools, which they can upgrade with: apt_me()_forwhat(loiter); Chain Reactions Now the cornerstone of the Persian Chain Movement is to chain reaction, which occurs just before the active_agent arrives at it's endpoint on rosary perimeter_cc . The chain reaction is tiggered by the active_agent drone executing the start_persian_chain instruct... begin_instruct(start_persian_chain)_for(loiterer); with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc)_orderat(highest, 1); with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_1); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_2); with_robot(loiterer_1)_sobriquet(loiterer); end_instruct(start_persian_chain); If we did need to separate/differentiate them, we could use the _cardinatat postposition such as: with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc); Clone Protocol 66 End Namespace use_namespace(persian_chain_demo);","title":"The Newton Loop"},{"location":"tasks/newton_loop/#the-newton-loop","text":"The Newton Loop is a movement is based on the idea of a Newton's cradle whereby the The persian chain is a baton movement of three agents on an infinite repeating loop. Each To demonstrate this movement we are going to use three drones, a charging table, and, 10 waypoints.","title":"The Newton Loop"},{"location":"tasks/newton_loop/#namespace","text":"We are going to use common names, so we need to set up a namespace... use_namespace(persian_chain_demo);","title":"Namespace"},{"location":"tasks/newton_loop/#the-agents","text":"The agents of this Persian Chain demonstration will be 'alif', 'be' and , 'pe': add_robot(alif)_type(drone); add_robot(be)_type(drone); add_robot(pe)_type(drone);","title":"The Agents"},{"location":"tasks/newton_loop/#a-brave-new-world","text":"So first we are going to start setting up the physical world... // Set up physical world ready for the persian chain movement: begin_instruct(persian_chain_physicals)_for(alif, be, pe); add_thing(chargepoint)_type(chargepoint); add_object(table)_type(table); with_object(table)_thing(chargepoint); add_map(map)_scope(global)_unit(dd)_altitude(47)_coords(x_lat, y_long, z_height); with_map(map)_pluscode(53QJ+3V Baringa, Queensland); add_route(perimeter); add_waypoint(x0)_route(perimeter)_coords(-26.812298, 153.082254, ); add_waypoint(x1)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x2)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x3)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x4)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x5)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x6)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x7)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x8)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x9)_route(perimeter)_coords(-26.812298, 153.082254); add_rosary(perimeter_cc)_value(x0 \u2192 x1 \u2192 x2 \u2192 x3 \u2192 x4 \u2192 x5 \u2192 x6 \u2192 x7 \u2192 x8 \u2192 x9 \u2940 x0); with_route(perimeter)_rosary(perimeter_cc); add_var(penultimate_n)_dtype(0)_default(0); add_sobriquet(all_waypoints)_specificto(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); add_sobriquet(penultimate_waypoint); with_map(map)_object(table)_at(-26.812298, 153.082254); end_instruct(persian_chain_physicals); exec_instruct(persian_chain_physicals)_for(alif, be, pe); This is a simple composition instruction of the physical world for our three drones alif , be , and, pe . The table itself could have been a thingy , but instead we created it as an object with a thing child, the charger. The waypoints produce an perimeter route, called perimeter , sequenced from waypoint x0 to x9 in and counter-clockwise approach, around the house 21 Toyne Street, Baringa, QLD 4551, Australia. There is no elevation on this route as the map, map , is set at an altitude of 47m above sea level, a close approximation. We added a pluscode for the extent of the map. Finally the table, table has been placed on the map. We execute the instruction immediately.","title":"A Brave New World"},{"location":"tasks/newton_loop/#there-is-a-beginning-to-everything","text":"To start the Persian Chain we need one active agent and two loitering agents. We also have starting positions. alif will be the first active agent starting at waypoint x9 to go along rosary perimeter_cc (on route perimeter ), be and pe be will be the loitering agents, and they will loiter around waypoints x5 and x6 respectively... begin_instruct(persian_chain_starting_positions)_for(alif, be, pe)_onceonly(); with_robot(alif)_sobriquet(active_agent); with_waypoint(x9)_sobriquet(active_startpoint); with_waypoint(x3)_sobriquet(active_endpoint); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_robot(be)_sobriquet(loiterer); go_robot(be)_rosary(perimeter_cc)_goto(x5) ? exec_instruct(loiterise_agent)_for(loiterer); with_robot(pe)_sobriquet(loiterer); go_robot(pe)_goto(x6) ? exec_instruct(loiterise_agent)_for(loiterer); end_instruct(persian_chain_starting_positions); We do not want to execute instruction persian_chain_starting_positions yet as the guys ( alif , be , and, pe ) don't know about instructions activate_agent and loiterise_agent .","title":"There is a Beginning to Everything"},{"location":"tasks/newton_loop/#active-agent","text":"In the Persian Chain Movement the active agent scouts around the route from a starting position to an ending position. When it arrives penultimate to its ending position, it has to inform the others... // Activate the active_agent to go on route `perimeter` begin_instruct(activate_agent)_for(active_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() : wtf(); with_robot(active_agent)_sobriquet(loiterer) ? : ; end_instruct(activate_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) With two commands one nested and concurrent in the other, we are instructing robot active_agent (which will be assigned previously) to follow rosary perimeter_cc (previously assigned to route perimeter ) from rosarypoint active_startpoint to rosarypoint active_endpoint . Concurrently, robot active_agent is triggered on the rosarypoint at active_endpoint minus one ( _change(--) ). ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() When active_agent reaches the penultimate rosarypoint of active_endpoint_change(-- ) it will execute start_persian_chain instruction. ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() Finally when active_agent has reached active_endpoint it will execute loiterise_agent instruction. with_robot(active_agent)_sobriquet(loiterer) ? : ; When all has been done active_agent becomes a loiterer . ... wtf() Throughout this code black when the fickle finger of fate is at work, the 'where's the fire' _wtf() is called to handle anything that's flung its way. We will try and handle any known-knowns that could come our way later.","title":"Active Agent"},{"location":"tasks/newton_loop/#loiter-agent","text":"So, above, we provided the 'activate_agent' instruction, now we need to build the instruction for loiterise_agent ... begin_instruct(loiterise_agent)_for(loiterer); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); end_instruct(loiterise_agent); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); There are actually two loitering agents, at this time we do not need to separate/differentiate them apart because this command is executed as a 'blanket' command (by default) for both (or any) robot (or thingies) sobriquetled loiterer . The default loitering parameters have been previously drilled into these drones when they were young, so there is no need to repeat them, just instruct the drones to _loiterat and they will know what to do. If they don't, there are many available packaging tools, which they can upgrade with: apt_me()_forwhat(loiter);","title":"Loiter Agent"},{"location":"tasks/newton_loop/#chain-reactions","text":"Now the cornerstone of the Persian Chain Movement is to chain reaction, which occurs just before the active_agent arrives at it's endpoint on rosary perimeter_cc . The chain reaction is tiggered by the active_agent drone executing the start_persian_chain instruct... begin_instruct(start_persian_chain)_for(loiterer); with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc)_orderat(highest, 1); with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_1); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_2); with_robot(loiterer_1)_sobriquet(loiterer); end_instruct(start_persian_chain); If we did need to separate/differentiate them, we could use the _cardinatat postposition such as: with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc); Clone Protocol 66","title":"Chain Reactions"},{"location":"tasks/newton_loop/#end-namespace","text":"use_namespace(persian_chain_demo);","title":"End Namespace"},{"location":"tasks/persian_chain/","text":"The Persian Chain The persian chain is a baton movement of three agents on an infinite repeating loop. Each To demonstrate this movement we are going to use three drones, a charging table, and, 10 waypoints. Namespace We are going to use common names, so we need to set up a namespace... use_namespace(persian_chain_demo); The Agents The agents of this Persian Chain demonstration will be 'alif', 'be' and , 'pe': add_robot(alif)_type(drone); add_robot(be)_type(drone); add_robot(pe)_type(drone); A Brave New World So first we are going to start setting up the physical world... // Set up physical world ready for the persian chain movement: begin_instruct(persian_chain_physicals)_for(alif, be, pe); add_thing(chargepoint)_type(chargepoint); add_object(table)_type(table); with_object(table)_thing(chargepoint); add_map(map)_scope(global)_unit(dd)_altitude(47)_coords(x_lat, y_long, z_height); with_map(map)_pluscode(53QJ+3V Baringa, Queensland); add_route(perimeter); add_waypoint(x0)_route(perimeter)_coords(-26.812298, 153.082254, ); add_waypoint(x1)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x2)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x3)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x4)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x5)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x6)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x7)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x8)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x9)_route(perimeter)_coords(-26.812298, 153.082254); add_rosary(perimeter_cc)_value(x0 \u2192 x1 \u2192 x2 \u2192 x3 \u2192 x4 \u2192 x5 \u2192 x6 \u2192 x7 \u2192 x8 \u2192 x9 \u2940 x0); with_route(perimeter)_rosary(perimeter_cc); add_var(penultimate_n)_dtype(0)_default(0); add_sobriquet(all_waypoints)_specificto(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); add_sobriquet(penultimate_waypoint); with_map(map)_object(table)_at(-26.812298, 153.082254); end_instruct(persian_chain_physicals); exec_instruct(persian_chain_physicals)_for(alif, be, pe); This is a simple composition instruction of the physical world for our three drones alif , be , and, pe . The table itself could have been a thingy , but instead we created it as an object with a thing child, the charger. The waypoints produce an perimeter route, called perimeter , sequenced from waypoint x0 to x9 in and counter-clockwise approach, around the house 21 Toyne Street, Baringa, QLD 4551, Australia. There is no elevation on this route as the map, map , is set at an altitude of 47m above sea level, a close approximation. We added a pluscode for the extent of the map. Finally the table, table has been placed on the map. We execute the instruction immediately. There is a Beginning to Everything To start the Persian Chain we need one active agent and two loitering agents. We also have starting positions. alif will be the first active agent starting at waypoint x9 to go along rosary perimeter_cc (on route perimeter ), be and pe be will be the loitering agents, and they will loiter around waypoints x5 and x6 respectively... begin_instruct(persian_chain_starting_positions)_for(alif, be, pe)_onceonly(); with_robot(alif)_sobriquet(active_agent); with_waypoint(x9)_sobriquet(active_startpoint); with_waypoint(x3)_sobriquet(active_endpoint); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_robot(be)_sobriquet(loiterer); go_robot(be)_rosary(perimeter_cc)_goto(x5) ? exec_instruct(loiterise_agent)_for(loiterer); with_robot(pe)_sobriquet(loiterer); go_robot(pe)_goto(x6) ? exec_instruct(loiterise_agent)_for(loiterer); end_instruct(persian_chain_starting_positions); We do not want to execute instruction persian_chain_starting_positions yet as the guys ( alif , be , and, pe ) don't know about instructions activate_agent and loiterise_agent . Active Agent In the Persian Chain Movement the active agent scouts around the route from a starting position to an ending position. When it arrives penultimate to its ending position, it has to inform the others... // Activate the active_agent to go on route `perimeter` begin_instruct(activate_agent)_for(active_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() : wtf(); with_robot(active_agent)_sobriquet(loiterer) ? : ; end_instruct(activate_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) With two commands one nested and concurrent in the other, we are instructing robot active_agent (which will be assigned previously) to follow rosary perimeter_cc (previously assigned to route perimeter ) from rosarypoint active_startpoint to rosarypoint active_endpoint . Concurrently, robot active_agent is triggered on the rosarypoint at active_endpoint minus one ( _change(--) ). ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() When active_agent reaches the penultimate rosarypoint of active_endpoint_change(-- ) it will execute start_persian_chain instruction. ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() Finally when active_agent has reached active_endpoint it will execute loiterise_agent instruction. with_robot(active_agent)_sobriquet(loiterer) ? : ; When all has been done active_agent becomes a loiterer . ... wtf() Throughout this code black when the fickle finger of fate is at work, the 'where's the fire' _wtf() is called to handle anything that's flung its way. We will try and handle any known-knowns that could come our way later. Loiter Agent So, above, we provided the 'activate_agent' instruction, now we need to build the instruction for loiterise_agent ... begin_instruct(loiterise_agent)_for(loiterer); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); end_instruct(loiterise_agent); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); There are actually two loitering agents, at this time we do not need to separate/differentiate them apart because this command is executed as a 'blanket' command (by default) for both (or any) robot (or thingies) sobriquetled loiterer . The default loitering parameters have been previously drilled into these drones when they were young, so there is no need to repeat them, just instruct the drones to _loiterat and they will know what to do. If they don't, there are many available packaging tools, which they can upgrade with: apt_me()_forwhat(loiter); Chain Reactions Now the cornerstone of the Persian Chain Movement is to chain reaction, which occurs just before the active_agent arrives at it's endpoint on rosary perimeter_cc . The chain reaction is tiggered by the active_agent drone executing the start_persian_chain instruct... begin_instruct(start_persian_chain)_for(loiterer); with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc)_orderat(highest, 1); with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_1); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_2); with_robot(loiterer_1)_sobriquet(loiterer); end_instruct(start_persian_chain); If we did need to separate/differentiate them, we could use the _cardinatat postposition such as: with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc); Clone Protocol 66 End Namespace use_namespace(persian_chain_demo);","title":"The Persian Chain"},{"location":"tasks/persian_chain/#the-persian-chain","text":"The persian chain is a baton movement of three agents on an infinite repeating loop. Each To demonstrate this movement we are going to use three drones, a charging table, and, 10 waypoints.","title":"The Persian Chain"},{"location":"tasks/persian_chain/#namespace","text":"We are going to use common names, so we need to set up a namespace... use_namespace(persian_chain_demo);","title":"Namespace"},{"location":"tasks/persian_chain/#the-agents","text":"The agents of this Persian Chain demonstration will be 'alif', 'be' and , 'pe': add_robot(alif)_type(drone); add_robot(be)_type(drone); add_robot(pe)_type(drone);","title":"The Agents"},{"location":"tasks/persian_chain/#a-brave-new-world","text":"So first we are going to start setting up the physical world... // Set up physical world ready for the persian chain movement: begin_instruct(persian_chain_physicals)_for(alif, be, pe); add_thing(chargepoint)_type(chargepoint); add_object(table)_type(table); with_object(table)_thing(chargepoint); add_map(map)_scope(global)_unit(dd)_altitude(47)_coords(x_lat, y_long, z_height); with_map(map)_pluscode(53QJ+3V Baringa, Queensland); add_route(perimeter); add_waypoint(x0)_route(perimeter)_coords(-26.812298, 153.082254, ); add_waypoint(x1)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x2)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x3)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x4)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x5)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x6)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x7)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x8)_route(perimeter)_coords(-26.812298, 153.082254); add_waypoint(x9)_route(perimeter)_coords(-26.812298, 153.082254); add_rosary(perimeter_cc)_value(x0 \u2192 x1 \u2192 x2 \u2192 x3 \u2192 x4 \u2192 x5 \u2192 x6 \u2192 x7 \u2192 x8 \u2192 x9 \u2940 x0); with_route(perimeter)_rosary(perimeter_cc); add_var(penultimate_n)_dtype(0)_default(0); add_sobriquet(all_waypoints)_specificto(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); add_sobriquet(penultimate_waypoint); with_map(map)_object(table)_at(-26.812298, 153.082254); end_instruct(persian_chain_physicals); exec_instruct(persian_chain_physicals)_for(alif, be, pe); This is a simple composition instruction of the physical world for our three drones alif , be , and, pe . The table itself could have been a thingy , but instead we created it as an object with a thing child, the charger. The waypoints produce an perimeter route, called perimeter , sequenced from waypoint x0 to x9 in and counter-clockwise approach, around the house 21 Toyne Street, Baringa, QLD 4551, Australia. There is no elevation on this route as the map, map , is set at an altitude of 47m above sea level, a close approximation. We added a pluscode for the extent of the map. Finally the table, table has been placed on the map. We execute the instruction immediately.","title":"A Brave New World"},{"location":"tasks/persian_chain/#there-is-a-beginning-to-everything","text":"To start the Persian Chain we need one active agent and two loitering agents. We also have starting positions. alif will be the first active agent starting at waypoint x9 to go along rosary perimeter_cc (on route perimeter ), be and pe be will be the loitering agents, and they will loiter around waypoints x5 and x6 respectively... begin_instruct(persian_chain_starting_positions)_for(alif, be, pe)_onceonly(); with_robot(alif)_sobriquet(active_agent); with_waypoint(x9)_sobriquet(active_startpoint); with_waypoint(x3)_sobriquet(active_endpoint); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_robot(be)_sobriquet(loiterer); go_robot(be)_rosary(perimeter_cc)_goto(x5) ? exec_instruct(loiterise_agent)_for(loiterer); with_robot(pe)_sobriquet(loiterer); go_robot(pe)_goto(x6) ? exec_instruct(loiterise_agent)_for(loiterer); end_instruct(persian_chain_starting_positions); We do not want to execute instruction persian_chain_starting_positions yet as the guys ( alif , be , and, pe ) don't know about instructions activate_agent and loiterise_agent .","title":"There is a Beginning to Everything"},{"location":"tasks/persian_chain/#active-agent","text":"In the Persian Chain Movement the active agent scouts around the route from a starting position to an ending position. When it arrives penultimate to its ending position, it has to inform the others... // Activate the active_agent to go on route `perimeter` begin_instruct(activate_agent)_for(active_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() : wtf(); with_robot(active_agent)_sobriquet(loiterer) ? : ; end_instruct(activate_agent); with_robot(active_agent)_gorosary(perimeter_cc)_startat(active_startpoint)_endat(active_endpoint) | with_robot(active_agent)_atrosary(active_endpoint)_change(--) With two commands one nested and concurrent in the other, we are instructing robot active_agent (which will be assigned previously) to follow rosary perimeter_cc (previously assigned to route perimeter ) from rosarypoint active_startpoint to rosarypoint active_endpoint . Concurrently, robot active_agent is triggered on the rosarypoint at active_endpoint minus one ( _change(--) ). ? exec_instruct(start_persian_chain)_for(loiterer) : wtf() When active_agent reaches the penultimate rosarypoint of active_endpoint_change(-- ) it will execute start_persian_chain instruction. ? exec_instruct(loiterise_agent)_for(active_agent) ? : wtf() Finally when active_agent has reached active_endpoint it will execute loiterise_agent instruction. with_robot(active_agent)_sobriquet(loiterer) ? : ; When all has been done active_agent becomes a loiterer . ... wtf() Throughout this code black when the fickle finger of fate is at work, the 'where's the fire' _wtf() is called to handle anything that's flung its way. We will try and handle any known-knowns that could come our way later.","title":"Active Agent"},{"location":"tasks/persian_chain/#loiter-agent","text":"So, above, we provided the 'activate_agent' instruction, now we need to build the instruction for loiterise_agent ... begin_instruct(loiterise_agent)_for(loiterer); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); end_instruct(loiterise_agent); with_robot(loiterer)_loiterat()_placeat(perimeter_cc); There are actually two loitering agents, at this time we do not need to separate/differentiate them apart because this command is executed as a 'blanket' command (by default) for both (or any) robot (or thingies) sobriquetled loiterer . The default loitering parameters have been previously drilled into these drones when they were young, so there is no need to repeat them, just instruct the drones to _loiterat and they will know what to do. If they don't, there are many available packaging tools, which they can upgrade with: apt_me()_forwhat(loiter);","title":"Loiter Agent"},{"location":"tasks/persian_chain/#chain-reactions","text":"Now the cornerstone of the Persian Chain Movement is to chain reaction, which occurs just before the active_agent arrives at it's endpoint on rosary perimeter_cc . The chain reaction is tiggered by the active_agent drone executing the start_persian_chain instruct... begin_instruct(start_persian_chain)_for(loiterer); with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc)_orderat(highest, 1); with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_1); go_robot(active_agent)_rosary(perimeter_cc)_goto(active_startpoint) ? exec_instruct(activate_agent)_for(active_agent) : ; with_waypoint()_placeat(perimeter_cc)_sobriquet(active_startpoint)_forwho(loiterer_2); with_robot(loiterer_1)_sobriquet(loiterer); end_instruct(start_persian_chain); If we did need to separate/differentiate them, we could use the _cardinatat postposition such as: with_sobriquet(loiterer)_cardinatat()_placeat(perimeter_cc); Clone Protocol 66","title":"Chain Reactions"},{"location":"tasks/persian_chain/#end-namespace","text":"use_namespace(persian_chain_demo);","title":"End Namespace"},{"location":"tasks/recharge/","text":"","title":"Recharge"}]}