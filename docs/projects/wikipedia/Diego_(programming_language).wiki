{{short description|Programming language}}
{{Use mdy dates|date=October 2018}}
{{Infobox programming language
| name = Diego
| logo = 
| logo size = 128px
| logo caption = 
| paradigm = [[Multi-paradigm programming language|Multi-paradigm]]: [[concurrent programming|concurrent]] [[imperative programming|imperative]], [[object-oriented programming|object-oriented]]
| year = {{start date and age|2019|06|14}}
| designer = [[Tavis Pitt]]
| developer = The Diego Authors
| latest release version = Humble Hookbill
| latest release date = {{start date and age|2022|05|23}}
| latest_test_version = 
| latest_test_date = 
| typing = [[type inference|Inferred]], [[static typing|static]], [[strong typing|strong]], [[structural typing|structural]], [[nominal typing|nominal]]
| implementations = 
| programming language = 
| dialects = 
| influenced_by = {{#statements:influenced by}}
| influenced = 
| operating_system = 
| license = 
| file_ext = .dgo
}}

'''Diego''' is a [[static typing|statically typed]], systemised [[programming language]] designed by [[Tavis Pitt]].

==History==
Diego evolved from a need to provide a common shared corpus of instructions to robots from a human-controlled console. In June 2019, Tavis Pitt, working as a roboticist, was given two robots and was asked to "make them talk to each other". In order to fulfil the request, various tasks were chosen to test communication between robots and humans.  Initially the communication was provided with ROS2 messages based on C++, however, when switching between tasks another layer was needed to codify the ROS2 messages. Diego was then developed to provide this abstract common language of instructions.

As Diego grew its vocabulary, an abstract programming corpus of commands was added, then Diego became a instruction language and a programming language.

===Syntax===
Diego's syntax is unique to other programming languages in that it rarely uses white-space, and flows in longer statement strings that most other languages. The components of a statement are separated with the <code>_</code> underscore, with semicolons used to terminate statements. There are many syntactical alternatives, and shortened alternatives to commands.

Diego is a very structured instructional language and follows a strict syntax, with a fundamental syntax construction consisting of:

<code><i>verb</i>_<i>object/action</i>(<i>moniker/value</i>)_<i>posit</i>()...</code>

Statements are nested inside other statements by bordering semicolons.  Outcomes of statements are managed using an [elvis-like operator](Elvis_operator) using <code>?</code> for a positive outcome, <code>|</code> for a neutral outcome or sibling statement(s), and, <code>:</code> for a negative outcome or an error.

===Types===
Go has a number of built-in types.

==Examples==
===Hello world===
<syntaxhighlight lang="diego">
use_namespace(wikipedia)_me();

add_instruct()
    me_msg(hello world);
;

exec_instruct()_me();

reset_namespace[];
</syntaxhighlight>

where <code>use_namespace(wikipedia)_me();</code> initiates the `wikipedia` namespace. Namespaces (using <code>_namespace</code>, or, shortened, <code>_ns</code>) contain the scope of statements, objects, variables, etc. however, everything is public inside the namespace. <code>instruct</code> is a method with no return statement, similar to a 'void' function in C++.
<!--
==Notes==
{{Notelist}}

==References==
{{Reflist}}

==Further reading== -->

==External links==
[https://www.diegolang.org/ Official website]

{{Programming languages}}

[[Category:Diego (programming language)| ]]
[[Category:2019 software]]
[[Category:Australian inventions]]
[[Category:Concurrent programming languages]]
[[Category:Cross-platform free software]]
[[Category:Cross-platform software]]
[[Category:High-level programming languages]]
[[Category:Procedural programming languages]]
[[Category:Programming languages]]
[[Category:Programming languages created in 2019]]
[[Category:Statically typed programming languages]]
[[Category:Systems programming languages]]
